
STM32F4xx-Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e40  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08001004  08001004  00011004  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800101c  0800101c  0001101c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08001024  08001024  00011024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08001028  08001028  00011028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  0800102c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000034  2000000c  08001038  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000040  08001038  00020040  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000051db  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000130c  00000000  00000000  00025217  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    00002129  00000000  00000000  00026523  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000408  00000000  00000000  00028650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00000588  00000000  00000000  00028a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00001555  00000000  00000000  00028fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000755d  00000000  00000000  0002a535  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000d6606  00000000  00000000  00031a92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  00108098  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00000944  00000000  00000000  001080e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000fec 	.word	0x08000fec

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08000fec 	.word	0x08000fec

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000508:	490f      	ldr	r1, [pc, #60]	; (8000548 <SystemInit+0x40>)
 800050a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800050e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000512:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000516:	4b0d      	ldr	r3, [pc, #52]	; (800054c <SystemInit+0x44>)
 8000518:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800051a:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 800051c:	f042 0201 	orr.w	r2, r2, #1
 8000520:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8000522:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000524:	681a      	ldr	r2, [r3, #0]
 8000526:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800052a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800052e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000530:	4a07      	ldr	r2, [pc, #28]	; (8000550 <SystemInit+0x48>)
 8000532:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000534:	681a      	ldr	r2, [r3, #0]
 8000536:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800053a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800053c:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800053e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000542:	608b      	str	r3, [r1, #8]
#endif
}
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	e000ed00 	.word	0xe000ed00
 800054c:	40023800 	.word	0x40023800
 8000550:	24003010 	.word	0x24003010

08000554 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000554:	4770      	bx	lr
	...

08000558 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000558:	b570      	push	{r4, r5, r6, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800055a:	4a0e      	ldr	r2, [pc, #56]	; (8000594 <HAL_InitTick+0x3c>)
 800055c:	4e0e      	ldr	r6, [pc, #56]	; (8000598 <HAL_InitTick+0x40>)
{
 800055e:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000560:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000564:	7830      	ldrb	r0, [r6, #0]
 8000566:	fbb3 f3f0 	udiv	r3, r3, r0
 800056a:	6810      	ldr	r0, [r2, #0]
 800056c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000570:	f000 f898 	bl	80006a4 <HAL_SYSTICK_Config>
 8000574:	4604      	mov	r4, r0
 8000576:	b950      	cbnz	r0, 800058e <HAL_InitTick+0x36>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000578:	2d0f      	cmp	r5, #15
 800057a:	d808      	bhi.n	800058e <HAL_InitTick+0x36>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800057c:	4602      	mov	r2, r0
 800057e:	4629      	mov	r1, r5
 8000580:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000584:	f000 f85c 	bl	8000640 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000588:	6075      	str	r5, [r6, #4]
 800058a:	4620      	mov	r0, r4
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800058c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800058e:	2001      	movs	r0, #1
 8000590:	e7fc      	b.n	800058c <HAL_InitTick+0x34>
 8000592:	bf00      	nop
 8000594:	20000000 	.word	0x20000000
 8000598:	20000004 	.word	0x20000004

0800059c <HAL_Init>:
{
 800059c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800059e:	4b0b      	ldr	r3, [pc, #44]	; (80005cc <HAL_Init+0x30>)
 80005a0:	681a      	ldr	r2, [r3, #0]
 80005a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80005a6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005a8:	681a      	ldr	r2, [r3, #0]
 80005aa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80005ae:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005b0:	681a      	ldr	r2, [r3, #0]
 80005b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80005b6:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005b8:	2003      	movs	r0, #3
 80005ba:	f000 f82f 	bl	800061c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80005be:	200f      	movs	r0, #15
 80005c0:	f7ff ffca 	bl	8000558 <HAL_InitTick>
  HAL_MspInit();
 80005c4:	f7ff ffc6 	bl	8000554 <HAL_MspInit>
}
 80005c8:	2000      	movs	r0, #0
 80005ca:	bd08      	pop	{r3, pc}
 80005cc:	40023c00 	.word	0x40023c00

080005d0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80005d0:	4a03      	ldr	r2, [pc, #12]	; (80005e0 <HAL_IncTick+0x10>)
 80005d2:	4b04      	ldr	r3, [pc, #16]	; (80005e4 <HAL_IncTick+0x14>)
 80005d4:	6811      	ldr	r1, [r2, #0]
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	440b      	add	r3, r1
 80005da:	6013      	str	r3, [r2, #0]
}
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	20000028 	.word	0x20000028
 80005e4:	20000004 	.word	0x20000004

080005e8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005e8:	4b01      	ldr	r3, [pc, #4]	; (80005f0 <HAL_GetTick+0x8>)
 80005ea:	6818      	ldr	r0, [r3, #0]
}
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	20000028 	.word	0x20000028

080005f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005f4:	b538      	push	{r3, r4, r5, lr}
 80005f6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80005f8:	f7ff fff6 	bl	80005e8 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005fc:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80005fe:	bf1c      	itt	ne
 8000600:	4b05      	ldrne	r3, [pc, #20]	; (8000618 <HAL_Delay+0x24>)
 8000602:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000604:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000606:	bf18      	it	ne
 8000608:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800060a:	f7ff ffed 	bl	80005e8 <HAL_GetTick>
 800060e:	1b43      	subs	r3, r0, r5
 8000610:	42a3      	cmp	r3, r4
 8000612:	d3fa      	bcc.n	800060a <HAL_Delay+0x16>
  {
  }
}
 8000614:	bd38      	pop	{r3, r4, r5, pc}
 8000616:	bf00      	nop
 8000618:	20000004 	.word	0x20000004

0800061c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800061c:	4907      	ldr	r1, [pc, #28]	; (800063c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800061e:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000620:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000624:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000626:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000628:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800062c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800062e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000630:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000634:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000638:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800063a:	4770      	bx	lr
 800063c:	e000ed00 	.word	0xe000ed00

08000640 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000640:	4b16      	ldr	r3, [pc, #88]	; (800069c <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000642:	b530      	push	{r4, r5, lr}
 8000644:	68dc      	ldr	r4, [r3, #12]
 8000646:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800064a:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800064e:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000650:	2d04      	cmp	r5, #4
 8000652:	bf28      	it	cs
 8000654:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000656:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000658:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800065c:	bf8c      	ite	hi
 800065e:	3c03      	subhi	r4, #3
 8000660:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000662:	fa03 f505 	lsl.w	r5, r3, r5
 8000666:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800066a:	40a3      	lsls	r3, r4
 800066c:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000670:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 8000672:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000674:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000678:	bfac      	ite	ge
 800067a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800067e:	4a08      	ldrlt	r2, [pc, #32]	; (80006a0 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000680:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000684:	bfb8      	it	lt
 8000686:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800068a:	b2db      	uxtb	r3, r3
 800068c:	bfaa      	itet	ge
 800068e:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000692:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000694:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	bf00      	nop
 800069c:	e000ed00 	.word	0xe000ed00
 80006a0:	e000ed14 	.word	0xe000ed14

080006a4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006a4:	3801      	subs	r0, #1
 80006a6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006aa:	d20b      	bcs.n	80006c4 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006ac:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b0:	4a05      	ldr	r2, [pc, #20]	; (80006c8 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006b2:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b4:	21f0      	movs	r1, #240	; 0xf0
 80006b6:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006ba:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006bc:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006be:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006c0:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006c2:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80006c4:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80006c6:	4770      	bx	lr
 80006c8:	e000ed00 	.word	0xe000ed00

080006cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80006cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006d0:	f8df 919c 	ldr.w	r9, [pc, #412]	; 8000870 <HAL_GPIO_Init+0x1a4>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80006d4:	4a64      	ldr	r2, [pc, #400]	; (8000868 <HAL_GPIO_Init+0x19c>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 80006d6:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006d8:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 80006da:	2401      	movs	r4, #1
 80006dc:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006de:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 80006e2:	43ac      	bics	r4, r5
 80006e4:	f040 80ad 	bne.w	8000842 <HAL_GPIO_Init+0x176>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80006e8:	684d      	ldr	r5, [r1, #4]
 80006ea:	f005 0403 	and.w	r4, r5, #3
 80006ee:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80006f2:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80006f4:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80006f6:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80006fa:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80006fc:	ea6f 0606 	mvn.w	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000700:	d834      	bhi.n	800076c <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 8000702:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000704:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000708:	68cf      	ldr	r7, [r1, #12]
 800070a:	fa07 f708 	lsl.w	r7, r7, r8
 800070e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8000712:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000714:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000716:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800071a:	f3c5 1700 	ubfx	r7, r5, #4, #1
 800071e:	409f      	lsls	r7, r3
 8000720:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000724:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8000726:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000728:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800072c:	688f      	ldr	r7, [r1, #8]
 800072e:	fa07 f708 	lsl.w	r7, r7, r8
 8000732:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000736:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 8000738:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800073a:	d119      	bne.n	8000770 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 800073c:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000740:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000744:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000748:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800074c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000750:	f04f 0e0f 	mov.w	lr, #15
 8000754:	fa0e fe0b 	lsl.w	lr, lr, fp
 8000758:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800075c:	690f      	ldr	r7, [r1, #16]
 800075e:	fa07 f70b 	lsl.w	r7, r7, fp
 8000762:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8000766:	f8ca 7020 	str.w	r7, [sl, #32]
 800076a:	e001      	b.n	8000770 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800076c:	2c03      	cmp	r4, #3
 800076e:	d1da      	bne.n	8000726 <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 8000770:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000772:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000776:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000778:	4326      	orrs	r6, r4
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800077a:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 800077e:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000780:	d05f      	beq.n	8000842 <HAL_GPIO_Init+0x176>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000782:	f04f 0a00 	mov.w	sl, #0
 8000786:	f8cd a004 	str.w	sl, [sp, #4]
 800078a:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800078e:	4c37      	ldr	r4, [pc, #220]	; (800086c <HAL_GPIO_Init+0x1a0>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000790:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8000794:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
 8000798:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
 800079c:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 80007a0:	9601      	str	r6, [sp, #4]
 80007a2:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80007a4:	f023 0603 	bic.w	r6, r3, #3
 80007a8:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 80007ac:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80007b0:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80007b4:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80007b8:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80007bc:	270f      	movs	r7, #15
 80007be:	fa07 f70e 	lsl.w	r7, r7, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007c2:	42a0      	cmp	r0, r4
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80007c4:	ea28 0707 	bic.w	r7, r8, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007c8:	d042      	beq.n	8000850 <HAL_GPIO_Init+0x184>
 80007ca:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80007ce:	42a0      	cmp	r0, r4
 80007d0:	d040      	beq.n	8000854 <HAL_GPIO_Init+0x188>
 80007d2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80007d6:	42a0      	cmp	r0, r4
 80007d8:	d03e      	beq.n	8000858 <HAL_GPIO_Init+0x18c>
 80007da:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80007de:	42a0      	cmp	r0, r4
 80007e0:	d03c      	beq.n	800085c <HAL_GPIO_Init+0x190>
 80007e2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80007e6:	42a0      	cmp	r0, r4
 80007e8:	d03a      	beq.n	8000860 <HAL_GPIO_Init+0x194>
 80007ea:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80007ee:	42a0      	cmp	r0, r4
 80007f0:	d038      	beq.n	8000864 <HAL_GPIO_Init+0x198>
 80007f2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80007f6:	42a0      	cmp	r0, r4
 80007f8:	bf0c      	ite	eq
 80007fa:	2406      	moveq	r4, #6
 80007fc:	2407      	movne	r4, #7
 80007fe:	fa04 f40e 	lsl.w	r4, r4, lr
 8000802:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000804:	60b4      	str	r4, [r6, #8]
        temp = EXTI->RTSR;
 8000806:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000808:	ea6f 060c 	mvn.w	r6, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800080c:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 800080e:	bf54      	ite	pl
 8000810:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8000812:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;
 8000816:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 8000818:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800081a:	02af      	lsls	r7, r5, #10
        temp &= ~((uint32_t)iocurrent);
 800081c:	bf54      	ite	pl
 800081e:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8000820:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;
 8000824:	60d4      	str	r4, [r2, #12]

        temp = EXTI->EMR;
 8000826:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000828:	03af      	lsls	r7, r5, #14
        temp &= ~((uint32_t)iocurrent);
 800082a:	bf54      	ite	pl
 800082c:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 800082e:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR = temp;
 8000832:	6054      	str	r4, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000834:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000836:	03ed      	lsls	r5, r5, #15
        temp &= ~((uint32_t)iocurrent);
 8000838:	bf54      	ite	pl
 800083a:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 800083c:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 8000840:	6014      	str	r4, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000842:	3301      	adds	r3, #1
 8000844:	2b10      	cmp	r3, #16
 8000846:	f47f af47 	bne.w	80006d8 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 800084a:	b003      	add	sp, #12
 800084c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000850:	4654      	mov	r4, sl
 8000852:	e7d4      	b.n	80007fe <HAL_GPIO_Init+0x132>
 8000854:	2401      	movs	r4, #1
 8000856:	e7d2      	b.n	80007fe <HAL_GPIO_Init+0x132>
 8000858:	2402      	movs	r4, #2
 800085a:	e7d0      	b.n	80007fe <HAL_GPIO_Init+0x132>
 800085c:	2403      	movs	r4, #3
 800085e:	e7ce      	b.n	80007fe <HAL_GPIO_Init+0x132>
 8000860:	2404      	movs	r4, #4
 8000862:	e7cc      	b.n	80007fe <HAL_GPIO_Init+0x132>
 8000864:	2405      	movs	r4, #5
 8000866:	e7ca      	b.n	80007fe <HAL_GPIO_Init+0x132>
 8000868:	40013c00 	.word	0x40013c00
 800086c:	40020000 	.word	0x40020000
 8000870:	40023800 	.word	0x40023800

08000874 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000874:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000876:	ea01 0203 	and.w	r2, r1, r3
 800087a:	ea21 0103 	bic.w	r1, r1, r3
 800087e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000882:	6181      	str	r1, [r0, #24]
}
 8000884:	4770      	bx	lr
	...

08000888 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000888:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	9301      	str	r3, [sp, #4]
 800088e:	4b18      	ldr	r3, [pc, #96]	; (80008f0 <HAL_PWREx_EnableOverDrive+0x68>)
  __HAL_PWR_OVERDRIVE_ENABLE();

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000890:	4d18      	ldr	r5, [pc, #96]	; (80008f4 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000892:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000894:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000898:	641a      	str	r2, [r3, #64]	; 0x40
 800089a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008a0:	9301      	str	r3, [sp, #4]
 80008a2:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 80008a4:	4b14      	ldr	r3, [pc, #80]	; (80008f8 <HAL_PWREx_EnableOverDrive+0x70>)
 80008a6:	2201      	movs	r2, #1
 80008a8:	641a      	str	r2, [r3, #64]	; 0x40
  tickstart = HAL_GetTick();
 80008aa:	f7ff fe9d 	bl	80005e8 <HAL_GetTick>
 80008ae:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80008b0:	686b      	ldr	r3, [r5, #4]
 80008b2:	03da      	lsls	r2, r3, #15
 80008b4:	d50b      	bpl.n	80008ce <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80008b6:	4b10      	ldr	r3, [pc, #64]	; (80008f8 <HAL_PWREx_EnableOverDrive+0x70>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80008b8:	4d0e      	ldr	r5, [pc, #56]	; (80008f4 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80008ba:	2201      	movs	r2, #1
 80008bc:	645a      	str	r2, [r3, #68]	; 0x44
  tickstart = HAL_GetTick();
 80008be:	f7ff fe93 	bl	80005e8 <HAL_GetTick>
 80008c2:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80008c4:	686b      	ldr	r3, [r5, #4]
 80008c6:	039b      	lsls	r3, r3, #14
 80008c8:	d50a      	bpl.n	80008e0 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 80008ca:	2000      	movs	r0, #0
 80008cc:	e006      	b.n	80008dc <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80008ce:	f7ff fe8b 	bl	80005e8 <HAL_GetTick>
 80008d2:	1b00      	subs	r0, r0, r4
 80008d4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80008d8:	d9ea      	bls.n	80008b0 <HAL_PWREx_EnableOverDrive+0x28>
      return HAL_TIMEOUT;
 80008da:	2003      	movs	r0, #3
}
 80008dc:	b003      	add	sp, #12
 80008de:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80008e0:	f7ff fe82 	bl	80005e8 <HAL_GetTick>
 80008e4:	1b00      	subs	r0, r0, r4
 80008e6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80008ea:	d9eb      	bls.n	80008c4 <HAL_PWREx_EnableOverDrive+0x3c>
 80008ec:	e7f5      	b.n	80008da <HAL_PWREx_EnableOverDrive+0x52>
 80008ee:	bf00      	nop
 80008f0:	40023800 	.word	0x40023800
 80008f4:	40007000 	.word	0x40007000
 80008f8:	420e0000 	.word	0x420e0000

080008fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80008fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000900:	460d      	mov	r5, r1
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000902:	4604      	mov	r4, r0
 8000904:	b910      	cbnz	r0, 800090c <HAL_RCC_ClockConfig+0x10>
  {
    return HAL_ERROR;
 8000906:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);

  return HAL_OK;
}
 8000908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800090c:	4b44      	ldr	r3, [pc, #272]	; (8000a20 <HAL_RCC_ClockConfig+0x124>)
 800090e:	681a      	ldr	r2, [r3, #0]
 8000910:	f002 020f 	and.w	r2, r2, #15
 8000914:	428a      	cmp	r2, r1
 8000916:	d328      	bcc.n	800096a <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000918:	6822      	ldr	r2, [r4, #0]
 800091a:	0797      	lsls	r7, r2, #30
 800091c:	d42d      	bmi.n	800097a <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800091e:	07d0      	lsls	r0, r2, #31
 8000920:	d441      	bmi.n	80009a6 <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000922:	4b3f      	ldr	r3, [pc, #252]	; (8000a20 <HAL_RCC_ClockConfig+0x124>)
 8000924:	681a      	ldr	r2, [r3, #0]
 8000926:	f002 020f 	and.w	r2, r2, #15
 800092a:	42aa      	cmp	r2, r5
 800092c:	d866      	bhi.n	80009fc <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800092e:	6822      	ldr	r2, [r4, #0]
 8000930:	0751      	lsls	r1, r2, #29
 8000932:	d46c      	bmi.n	8000a0e <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000934:	0713      	lsls	r3, r2, #28
 8000936:	d507      	bpl.n	8000948 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000938:	4a3a      	ldr	r2, [pc, #232]	; (8000a24 <HAL_RCC_ClockConfig+0x128>)
 800093a:	6921      	ldr	r1, [r4, #16]
 800093c:	6893      	ldr	r3, [r2, #8]
 800093e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000942:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000946:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000948:	f000 f874 	bl	8000a34 <HAL_RCC_GetSysClockFreq>
 800094c:	4b35      	ldr	r3, [pc, #212]	; (8000a24 <HAL_RCC_ClockConfig+0x128>)
 800094e:	4a36      	ldr	r2, [pc, #216]	; (8000a28 <HAL_RCC_ClockConfig+0x12c>)
 8000950:	689b      	ldr	r3, [r3, #8]
 8000952:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000956:	5cd3      	ldrb	r3, [r2, r3]
 8000958:	40d8      	lsrs	r0, r3
 800095a:	4b34      	ldr	r3, [pc, #208]	; (8000a2c <HAL_RCC_ClockConfig+0x130>)
 800095c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 800095e:	4b34      	ldr	r3, [pc, #208]	; (8000a30 <HAL_RCC_ClockConfig+0x134>)
 8000960:	6818      	ldr	r0, [r3, #0]
 8000962:	f7ff fdf9 	bl	8000558 <HAL_InitTick>
  return HAL_OK;
 8000966:	2000      	movs	r0, #0
 8000968:	e7ce      	b.n	8000908 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800096a:	b2ca      	uxtb	r2, r1
 800096c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	f003 030f 	and.w	r3, r3, #15
 8000974:	428b      	cmp	r3, r1
 8000976:	d1c6      	bne.n	8000906 <HAL_RCC_ClockConfig+0xa>
 8000978:	e7ce      	b.n	8000918 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800097a:	4b2a      	ldr	r3, [pc, #168]	; (8000a24 <HAL_RCC_ClockConfig+0x128>)
 800097c:	f012 0f04 	tst.w	r2, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000980:	bf1e      	ittt	ne
 8000982:	6899      	ldrne	r1, [r3, #8]
 8000984:	f441 51e0 	orrne.w	r1, r1, #7168	; 0x1c00
 8000988:	6099      	strne	r1, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800098a:	0716      	lsls	r6, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800098c:	bf42      	ittt	mi
 800098e:	6899      	ldrmi	r1, [r3, #8]
 8000990:	f441 4160 	orrmi.w	r1, r1, #57344	; 0xe000
 8000994:	6099      	strmi	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000996:	4923      	ldr	r1, [pc, #140]	; (8000a24 <HAL_RCC_ClockConfig+0x128>)
 8000998:	68a0      	ldr	r0, [r4, #8]
 800099a:	688b      	ldr	r3, [r1, #8]
 800099c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80009a0:	4303      	orrs	r3, r0
 80009a2:	608b      	str	r3, [r1, #8]
 80009a4:	e7bb      	b.n	800091e <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80009a6:	6862      	ldr	r2, [r4, #4]
 80009a8:	4b1e      	ldr	r3, [pc, #120]	; (8000a24 <HAL_RCC_ClockConfig+0x128>)
 80009aa:	2a01      	cmp	r2, #1
 80009ac:	d11c      	bne.n	80009e8 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009b4:	d0a7      	beq.n	8000906 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80009b6:	4e1b      	ldr	r6, [pc, #108]	; (8000a24 <HAL_RCC_ClockConfig+0x128>)
 80009b8:	68b3      	ldr	r3, [r6, #8]
 80009ba:	f023 0303 	bic.w	r3, r3, #3
 80009be:	4313      	orrs	r3, r2
 80009c0:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80009c2:	f7ff fe11 	bl	80005e8 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009c6:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80009ca:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80009cc:	68b3      	ldr	r3, [r6, #8]
 80009ce:	6862      	ldr	r2, [r4, #4]
 80009d0:	f003 030c 	and.w	r3, r3, #12
 80009d4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80009d8:	d0a3      	beq.n	8000922 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009da:	f7ff fe05 	bl	80005e8 <HAL_GetTick>
 80009de:	1bc0      	subs	r0, r0, r7
 80009e0:	4540      	cmp	r0, r8
 80009e2:	d9f3      	bls.n	80009cc <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 80009e4:	2003      	movs	r0, #3
 80009e6:	e78f      	b.n	8000908 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80009e8:	1e91      	subs	r1, r2, #2
 80009ea:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80009ec:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80009ee:	d802      	bhi.n	80009f6 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80009f0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80009f4:	e7de      	b.n	80009b4 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009f6:	f013 0f02 	tst.w	r3, #2
 80009fa:	e7db      	b.n	80009b4 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80009fc:	b2ea      	uxtb	r2, r5
 80009fe:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	f003 030f 	and.w	r3, r3, #15
 8000a06:	42ab      	cmp	r3, r5
 8000a08:	f47f af7d 	bne.w	8000906 <HAL_RCC_ClockConfig+0xa>
 8000a0c:	e78f      	b.n	800092e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000a0e:	4905      	ldr	r1, [pc, #20]	; (8000a24 <HAL_RCC_ClockConfig+0x128>)
 8000a10:	68e0      	ldr	r0, [r4, #12]
 8000a12:	688b      	ldr	r3, [r1, #8]
 8000a14:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000a18:	4303      	orrs	r3, r0
 8000a1a:	608b      	str	r3, [r1, #8]
 8000a1c:	e78a      	b.n	8000934 <HAL_RCC_ClockConfig+0x38>
 8000a1e:	bf00      	nop
 8000a20:	40023c00 	.word	0x40023c00
 8000a24:	40023800 	.word	0x40023800
 8000a28:	08001004 	.word	0x08001004
 8000a2c:	20000000 	.word	0x20000000
 8000a30:	20000008 	.word	0x20000008

08000a34 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000a34:	4920      	ldr	r1, [pc, #128]	; (8000ab8 <HAL_RCC_GetSysClockFreq+0x84>)
{
 8000a36:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000a38:	688b      	ldr	r3, [r1, #8]
 8000a3a:	f003 030c 	and.w	r3, r3, #12
 8000a3e:	2b08      	cmp	r3, #8
 8000a40:	d007      	beq.n	8000a52 <HAL_RCC_GetSysClockFreq+0x1e>
 8000a42:	2b0c      	cmp	r3, #12
 8000a44:	d020      	beq.n	8000a88 <HAL_RCC_GetSysClockFreq+0x54>
 8000a46:	481d      	ldr	r0, [pc, #116]	; (8000abc <HAL_RCC_GetSysClockFreq+0x88>)
 8000a48:	4a1d      	ldr	r2, [pc, #116]	; (8000ac0 <HAL_RCC_GetSysClockFreq+0x8c>)
 8000a4a:	2b04      	cmp	r3, #4
 8000a4c:	bf08      	it	eq
 8000a4e:	4610      	moveq	r0, r2
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000a50:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000a52:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000a54:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000a56:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000a58:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000a5c:	bf14      	ite	ne
 8000a5e:	4818      	ldrne	r0, [pc, #96]	; (8000ac0 <HAL_RCC_GetSysClockFreq+0x8c>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000a60:	4816      	ldreq	r0, [pc, #88]	; (8000abc <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000a62:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000a66:	bf18      	it	ne
 8000a68:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000a6a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000a6e:	fba1 0100 	umull	r0, r1, r1, r0
 8000a72:	f7ff fbc7 	bl	8000204 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000a76:	4b10      	ldr	r3, [pc, #64]	; (8000ab8 <HAL_RCC_GetSysClockFreq+0x84>)
 8000a78:	685b      	ldr	r3, [r3, #4]
 8000a7a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000a7e:	3301      	adds	r3, #1
 8000a80:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllr;
 8000a82:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8000a86:	e7e3      	b.n	8000a50 <HAL_RCC_GetSysClockFreq+0x1c>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000a88:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000a8a:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000a8c:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000a8e:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000a92:	bf14      	ite	ne
 8000a94:	480a      	ldrne	r0, [pc, #40]	; (8000ac0 <HAL_RCC_GetSysClockFreq+0x8c>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000a96:	4809      	ldreq	r0, [pc, #36]	; (8000abc <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000a98:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000a9c:	bf18      	it	ne
 8000a9e:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000aa0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000aa4:	fba1 0100 	umull	r0, r1, r1, r0
 8000aa8:	f7ff fbac 	bl	8000204 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8000aac:	4b02      	ldr	r3, [pc, #8]	; (8000ab8 <HAL_RCC_GetSysClockFreq+0x84>)
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	f3c3 7302 	ubfx	r3, r3, #28, #3
 8000ab4:	e7e5      	b.n	8000a82 <HAL_RCC_GetSysClockFreq+0x4e>
 8000ab6:	bf00      	nop
 8000ab8:	40023800 	.word	0x40023800
 8000abc:	00f42400 	.word	0x00f42400
 8000ac0:	007a1200 	.word	0x007a1200

08000ac4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ac4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ac8:	4604      	mov	r4, r0
 8000aca:	2800      	cmp	r0, #0
 8000acc:	d030      	beq.n	8000b30 <HAL_RCC_OscConfig+0x6c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ace:	6803      	ldr	r3, [r0, #0]
 8000ad0:	07df      	lsls	r7, r3, #31
 8000ad2:	d410      	bmi.n	8000af6 <HAL_RCC_OscConfig+0x32>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ad4:	6823      	ldr	r3, [r4, #0]
 8000ad6:	079e      	lsls	r6, r3, #30
 8000ad8:	d463      	bmi.n	8000ba2 <HAL_RCC_OscConfig+0xde>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ada:	6823      	ldr	r3, [r4, #0]
 8000adc:	071a      	lsls	r2, r3, #28
 8000ade:	f100 80ad 	bmi.w	8000c3c <HAL_RCC_OscConfig+0x178>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ae2:	6823      	ldr	r3, [r4, #0]
 8000ae4:	075b      	lsls	r3, r3, #29
 8000ae6:	f100 80cd 	bmi.w	8000c84 <HAL_RCC_OscConfig+0x1c0>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000aea:	69a0      	ldr	r0, [r4, #24]
 8000aec:	2800      	cmp	r0, #0
 8000aee:	f040 8135 	bne.w	8000d5c <HAL_RCC_OscConfig+0x298>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8000af2:	2000      	movs	r0, #0
 8000af4:	e034      	b.n	8000b60 <HAL_RCC_OscConfig+0x9c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8000af6:	4b96      	ldr	r3, [pc, #600]	; (8000d50 <HAL_RCC_OscConfig+0x28c>)
 8000af8:	689a      	ldr	r2, [r3, #8]
 8000afa:	f002 020c 	and.w	r2, r2, #12
 8000afe:	2a04      	cmp	r2, #4
 8000b00:	d00f      	beq.n	8000b22 <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8000b02:	689a      	ldr	r2, [r3, #8]
 8000b04:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8000b08:	2a08      	cmp	r2, #8
 8000b0a:	d102      	bne.n	8000b12 <HAL_RCC_OscConfig+0x4e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8000b0c:	685a      	ldr	r2, [r3, #4]
 8000b0e:	0255      	lsls	r5, r2, #9
 8000b10:	d407      	bmi.n	8000b22 <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b12:	689a      	ldr	r2, [r3, #8]
 8000b14:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8000b18:	2a0c      	cmp	r2, #12
 8000b1a:	d10b      	bne.n	8000b34 <HAL_RCC_OscConfig+0x70>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	0258      	lsls	r0, r3, #9
 8000b20:	d508      	bpl.n	8000b34 <HAL_RCC_OscConfig+0x70>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b22:	4b8b      	ldr	r3, [pc, #556]	; (8000d50 <HAL_RCC_OscConfig+0x28c>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	0399      	lsls	r1, r3, #14
 8000b28:	d5d4      	bpl.n	8000ad4 <HAL_RCC_OscConfig+0x10>
 8000b2a:	6863      	ldr	r3, [r4, #4]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d1d1      	bne.n	8000ad4 <HAL_RCC_OscConfig+0x10>
          return HAL_ERROR;
 8000b30:	2001      	movs	r0, #1
 8000b32:	e015      	b.n	8000b60 <HAL_RCC_OscConfig+0x9c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b34:	6863      	ldr	r3, [r4, #4]
 8000b36:	4d86      	ldr	r5, [pc, #536]	; (8000d50 <HAL_RCC_OscConfig+0x28c>)
 8000b38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b3c:	d113      	bne.n	8000b66 <HAL_RCC_OscConfig+0xa2>
 8000b3e:	682b      	ldr	r3, [r5, #0]
 8000b40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b44:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000b46:	f7ff fd4f 	bl	80005e8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b4a:	4e81      	ldr	r6, [pc, #516]	; (8000d50 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8000b4c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b4e:	6833      	ldr	r3, [r6, #0]
 8000b50:	039a      	lsls	r2, r3, #14
 8000b52:	d4bf      	bmi.n	8000ad4 <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b54:	f7ff fd48 	bl	80005e8 <HAL_GetTick>
 8000b58:	1b40      	subs	r0, r0, r5
 8000b5a:	2864      	cmp	r0, #100	; 0x64
 8000b5c:	d9f7      	bls.n	8000b4e <HAL_RCC_OscConfig+0x8a>
            return HAL_TIMEOUT;
 8000b5e:	2003      	movs	r0, #3
}
 8000b60:	b002      	add	sp, #8
 8000b62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b66:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b6a:	d104      	bne.n	8000b76 <HAL_RCC_OscConfig+0xb2>
 8000b6c:	682b      	ldr	r3, [r5, #0]
 8000b6e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b72:	602b      	str	r3, [r5, #0]
 8000b74:	e7e3      	b.n	8000b3e <HAL_RCC_OscConfig+0x7a>
 8000b76:	682a      	ldr	r2, [r5, #0]
 8000b78:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000b7c:	602a      	str	r2, [r5, #0]
 8000b7e:	682a      	ldr	r2, [r5, #0]
 8000b80:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000b84:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d1dd      	bne.n	8000b46 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8000b8a:	f7ff fd2d 	bl	80005e8 <HAL_GetTick>
 8000b8e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b90:	682b      	ldr	r3, [r5, #0]
 8000b92:	039b      	lsls	r3, r3, #14
 8000b94:	d59e      	bpl.n	8000ad4 <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b96:	f7ff fd27 	bl	80005e8 <HAL_GetTick>
 8000b9a:	1b80      	subs	r0, r0, r6
 8000b9c:	2864      	cmp	r0, #100	; 0x64
 8000b9e:	d9f7      	bls.n	8000b90 <HAL_RCC_OscConfig+0xcc>
 8000ba0:	e7dd      	b.n	8000b5e <HAL_RCC_OscConfig+0x9a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8000ba2:	4b6b      	ldr	r3, [pc, #428]	; (8000d50 <HAL_RCC_OscConfig+0x28c>)
 8000ba4:	689a      	ldr	r2, [r3, #8]
 8000ba6:	f012 0f0c 	tst.w	r2, #12
 8000baa:	d00f      	beq.n	8000bcc <HAL_RCC_OscConfig+0x108>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8000bac:	689a      	ldr	r2, [r3, #8]
 8000bae:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8000bb2:	2a08      	cmp	r2, #8
 8000bb4:	d102      	bne.n	8000bbc <HAL_RCC_OscConfig+0xf8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8000bb6:	685a      	ldr	r2, [r3, #4]
 8000bb8:	0257      	lsls	r7, r2, #9
 8000bba:	d507      	bpl.n	8000bcc <HAL_RCC_OscConfig+0x108>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000bbc:	689a      	ldr	r2, [r3, #8]
 8000bbe:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8000bc2:	2a0c      	cmp	r2, #12
 8000bc4:	d111      	bne.n	8000bea <HAL_RCC_OscConfig+0x126>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	025e      	lsls	r6, r3, #9
 8000bca:	d40e      	bmi.n	8000bea <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000bcc:	4a60      	ldr	r2, [pc, #384]	; (8000d50 <HAL_RCC_OscConfig+0x28c>)
 8000bce:	6813      	ldr	r3, [r2, #0]
 8000bd0:	079d      	lsls	r5, r3, #30
 8000bd2:	d502      	bpl.n	8000bda <HAL_RCC_OscConfig+0x116>
 8000bd4:	68e3      	ldr	r3, [r4, #12]
 8000bd6:	2b01      	cmp	r3, #1
 8000bd8:	d1aa      	bne.n	8000b30 <HAL_RCC_OscConfig+0x6c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000bda:	6813      	ldr	r3, [r2, #0]
 8000bdc:	6921      	ldr	r1, [r4, #16]
 8000bde:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000be2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000be6:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000be8:	e777      	b.n	8000ada <HAL_RCC_OscConfig+0x16>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000bea:	68e2      	ldr	r2, [r4, #12]
 8000bec:	4b59      	ldr	r3, [pc, #356]	; (8000d54 <HAL_RCC_OscConfig+0x290>)
 8000bee:	b1b2      	cbz	r2, 8000c1e <HAL_RCC_OscConfig+0x15a>
        __HAL_RCC_HSI_ENABLE();
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000bf4:	f7ff fcf8 	bl	80005e8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bf8:	4d55      	ldr	r5, [pc, #340]	; (8000d50 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8000bfa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bfc:	682b      	ldr	r3, [r5, #0]
 8000bfe:	0798      	lsls	r0, r3, #30
 8000c00:	d507      	bpl.n	8000c12 <HAL_RCC_OscConfig+0x14e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c02:	682b      	ldr	r3, [r5, #0]
 8000c04:	6922      	ldr	r2, [r4, #16]
 8000c06:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000c0a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000c0e:	602b      	str	r3, [r5, #0]
 8000c10:	e763      	b.n	8000ada <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c12:	f7ff fce9 	bl	80005e8 <HAL_GetTick>
 8000c16:	1b80      	subs	r0, r0, r6
 8000c18:	2802      	cmp	r0, #2
 8000c1a:	d9ef      	bls.n	8000bfc <HAL_RCC_OscConfig+0x138>
 8000c1c:	e79f      	b.n	8000b5e <HAL_RCC_OscConfig+0x9a>
        __HAL_RCC_HSI_DISABLE();
 8000c1e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000c20:	f7ff fce2 	bl	80005e8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c24:	4e4a      	ldr	r6, [pc, #296]	; (8000d50 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8000c26:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c28:	6833      	ldr	r3, [r6, #0]
 8000c2a:	0799      	lsls	r1, r3, #30
 8000c2c:	f57f af55 	bpl.w	8000ada <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c30:	f7ff fcda 	bl	80005e8 <HAL_GetTick>
 8000c34:	1b40      	subs	r0, r0, r5
 8000c36:	2802      	cmp	r0, #2
 8000c38:	d9f6      	bls.n	8000c28 <HAL_RCC_OscConfig+0x164>
 8000c3a:	e790      	b.n	8000b5e <HAL_RCC_OscConfig+0x9a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000c3c:	6962      	ldr	r2, [r4, #20]
 8000c3e:	4b45      	ldr	r3, [pc, #276]	; (8000d54 <HAL_RCC_OscConfig+0x290>)
 8000c40:	b182      	cbz	r2, 8000c64 <HAL_RCC_OscConfig+0x1a0>
      __HAL_RCC_LSI_ENABLE();
 8000c42:	2201      	movs	r2, #1
 8000c44:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8000c48:	f7ff fcce 	bl	80005e8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c4c:	4e40      	ldr	r6, [pc, #256]	; (8000d50 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8000c4e:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c50:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8000c52:	079f      	lsls	r7, r3, #30
 8000c54:	f53f af45 	bmi.w	8000ae2 <HAL_RCC_OscConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c58:	f7ff fcc6 	bl	80005e8 <HAL_GetTick>
 8000c5c:	1b40      	subs	r0, r0, r5
 8000c5e:	2802      	cmp	r0, #2
 8000c60:	d9f6      	bls.n	8000c50 <HAL_RCC_OscConfig+0x18c>
 8000c62:	e77c      	b.n	8000b5e <HAL_RCC_OscConfig+0x9a>
      __HAL_RCC_LSI_DISABLE();
 8000c64:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8000c68:	f7ff fcbe 	bl	80005e8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c6c:	4e38      	ldr	r6, [pc, #224]	; (8000d50 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8000c6e:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c70:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8000c72:	0798      	lsls	r0, r3, #30
 8000c74:	f57f af35 	bpl.w	8000ae2 <HAL_RCC_OscConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c78:	f7ff fcb6 	bl	80005e8 <HAL_GetTick>
 8000c7c:	1b40      	subs	r0, r0, r5
 8000c7e:	2802      	cmp	r0, #2
 8000c80:	d9f6      	bls.n	8000c70 <HAL_RCC_OscConfig+0x1ac>
 8000c82:	e76c      	b.n	8000b5e <HAL_RCC_OscConfig+0x9a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c84:	4b32      	ldr	r3, [pc, #200]	; (8000d50 <HAL_RCC_OscConfig+0x28c>)
 8000c86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c88:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000c8c:	d128      	bne.n	8000ce0 <HAL_RCC_OscConfig+0x21c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c8e:	9201      	str	r2, [sp, #4]
 8000c90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c92:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000c96:	641a      	str	r2, [r3, #64]	; 0x40
 8000c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c9e:	9301      	str	r3, [sp, #4]
 8000ca0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000ca2:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ca4:	4d2c      	ldr	r5, [pc, #176]	; (8000d58 <HAL_RCC_OscConfig+0x294>)
 8000ca6:	682b      	ldr	r3, [r5, #0]
 8000ca8:	05d9      	lsls	r1, r3, #23
 8000caa:	d51b      	bpl.n	8000ce4 <HAL_RCC_OscConfig+0x220>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000cac:	68a3      	ldr	r3, [r4, #8]
 8000cae:	4d28      	ldr	r5, [pc, #160]	; (8000d50 <HAL_RCC_OscConfig+0x28c>)
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	d127      	bne.n	8000d04 <HAL_RCC_OscConfig+0x240>
 8000cb4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000cb6:	f043 0301 	orr.w	r3, r3, #1
 8000cba:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000cbc:	f7ff fc94 	bl	80005e8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000cc0:	4e23      	ldr	r6, [pc, #140]	; (8000d50 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8000cc2:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000cc4:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000cc8:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8000cca:	079b      	lsls	r3, r3, #30
 8000ccc:	d539      	bpl.n	8000d42 <HAL_RCC_OscConfig+0x27e>
    if(pwrclkchanged == SET)
 8000cce:	2f00      	cmp	r7, #0
 8000cd0:	f43f af0b 	beq.w	8000aea <HAL_RCC_OscConfig+0x26>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000cd4:	4a1e      	ldr	r2, [pc, #120]	; (8000d50 <HAL_RCC_OscConfig+0x28c>)
 8000cd6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000cd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000cdc:	6413      	str	r3, [r2, #64]	; 0x40
 8000cde:	e704      	b.n	8000aea <HAL_RCC_OscConfig+0x26>
    FlagStatus       pwrclkchanged = RESET;
 8000ce0:	2700      	movs	r7, #0
 8000ce2:	e7df      	b.n	8000ca4 <HAL_RCC_OscConfig+0x1e0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ce4:	682b      	ldr	r3, [r5, #0]
 8000ce6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cea:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000cec:	f7ff fc7c 	bl	80005e8 <HAL_GetTick>
 8000cf0:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cf2:	682b      	ldr	r3, [r5, #0]
 8000cf4:	05da      	lsls	r2, r3, #23
 8000cf6:	d4d9      	bmi.n	8000cac <HAL_RCC_OscConfig+0x1e8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000cf8:	f7ff fc76 	bl	80005e8 <HAL_GetTick>
 8000cfc:	1b80      	subs	r0, r0, r6
 8000cfe:	2802      	cmp	r0, #2
 8000d00:	d9f7      	bls.n	8000cf2 <HAL_RCC_OscConfig+0x22e>
 8000d02:	e72c      	b.n	8000b5e <HAL_RCC_OscConfig+0x9a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d04:	2b05      	cmp	r3, #5
 8000d06:	d104      	bne.n	8000d12 <HAL_RCC_OscConfig+0x24e>
 8000d08:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000d0a:	f043 0304 	orr.w	r3, r3, #4
 8000d0e:	672b      	str	r3, [r5, #112]	; 0x70
 8000d10:	e7d0      	b.n	8000cb4 <HAL_RCC_OscConfig+0x1f0>
 8000d12:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000d14:	f022 0201 	bic.w	r2, r2, #1
 8000d18:	672a      	str	r2, [r5, #112]	; 0x70
 8000d1a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000d1c:	f022 0204 	bic.w	r2, r2, #4
 8000d20:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d1ca      	bne.n	8000cbc <HAL_RCC_OscConfig+0x1f8>
      tickstart = HAL_GetTick();
 8000d26:	f7ff fc5f 	bl	80005e8 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d2a:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000d2e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d30:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000d32:	0798      	lsls	r0, r3, #30
 8000d34:	d5cb      	bpl.n	8000cce <HAL_RCC_OscConfig+0x20a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d36:	f7ff fc57 	bl	80005e8 <HAL_GetTick>
 8000d3a:	1b80      	subs	r0, r0, r6
 8000d3c:	4540      	cmp	r0, r8
 8000d3e:	d9f7      	bls.n	8000d30 <HAL_RCC_OscConfig+0x26c>
 8000d40:	e70d      	b.n	8000b5e <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d42:	f7ff fc51 	bl	80005e8 <HAL_GetTick>
 8000d46:	1b40      	subs	r0, r0, r5
 8000d48:	4540      	cmp	r0, r8
 8000d4a:	d9bd      	bls.n	8000cc8 <HAL_RCC_OscConfig+0x204>
 8000d4c:	e707      	b.n	8000b5e <HAL_RCC_OscConfig+0x9a>
 8000d4e:	bf00      	nop
 8000d50:	40023800 	.word	0x40023800
 8000d54:	42470000 	.word	0x42470000
 8000d58:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000d5c:	4d3b      	ldr	r5, [pc, #236]	; (8000e4c <HAL_RCC_OscConfig+0x388>)
 8000d5e:	68ab      	ldr	r3, [r5, #8]
 8000d60:	f003 030c 	and.w	r3, r3, #12
 8000d64:	2b08      	cmp	r3, #8
 8000d66:	d040      	beq.n	8000dea <HAL_RCC_OscConfig+0x326>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000d68:	4b39      	ldr	r3, [pc, #228]	; (8000e50 <HAL_RCC_OscConfig+0x38c>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000d6e:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000d70:	d12e      	bne.n	8000dd0 <HAL_RCC_OscConfig+0x30c>
        tickstart = HAL_GetTick();
 8000d72:	f7ff fc39 	bl	80005e8 <HAL_GetTick>
 8000d76:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000d78:	682b      	ldr	r3, [r5, #0]
 8000d7a:	0199      	lsls	r1, r3, #6
 8000d7c:	d422      	bmi.n	8000dc4 <HAL_RCC_OscConfig+0x300>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000d7e:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8000d82:	4313      	orrs	r3, r2
 8000d84:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000d86:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000d8a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000d8c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000d90:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000d92:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8000d96:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000d98:	0852      	lsrs	r2, r2, #1
 8000d9a:	3a01      	subs	r2, #1
 8000d9c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000da0:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000da2:	4b2b      	ldr	r3, [pc, #172]	; (8000e50 <HAL_RCC_OscConfig+0x38c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000da4:	4d29      	ldr	r5, [pc, #164]	; (8000e4c <HAL_RCC_OscConfig+0x388>)
        __HAL_RCC_PLL_ENABLE();
 8000da6:	2201      	movs	r2, #1
 8000da8:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8000daa:	f7ff fc1d 	bl	80005e8 <HAL_GetTick>
 8000dae:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000db0:	682b      	ldr	r3, [r5, #0]
 8000db2:	019a      	lsls	r2, r3, #6
 8000db4:	f53f ae9d 	bmi.w	8000af2 <HAL_RCC_OscConfig+0x2e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000db8:	f7ff fc16 	bl	80005e8 <HAL_GetTick>
 8000dbc:	1b00      	subs	r0, r0, r4
 8000dbe:	2802      	cmp	r0, #2
 8000dc0:	d9f6      	bls.n	8000db0 <HAL_RCC_OscConfig+0x2ec>
 8000dc2:	e6cc      	b.n	8000b5e <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000dc4:	f7ff fc10 	bl	80005e8 <HAL_GetTick>
 8000dc8:	1b80      	subs	r0, r0, r6
 8000dca:	2802      	cmp	r0, #2
 8000dcc:	d9d4      	bls.n	8000d78 <HAL_RCC_OscConfig+0x2b4>
 8000dce:	e6c6      	b.n	8000b5e <HAL_RCC_OscConfig+0x9a>
        tickstart = HAL_GetTick();
 8000dd0:	f7ff fc0a 	bl	80005e8 <HAL_GetTick>
 8000dd4:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000dd6:	682b      	ldr	r3, [r5, #0]
 8000dd8:	019b      	lsls	r3, r3, #6
 8000dda:	f57f ae8a 	bpl.w	8000af2 <HAL_RCC_OscConfig+0x2e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000dde:	f7ff fc03 	bl	80005e8 <HAL_GetTick>
 8000de2:	1b00      	subs	r0, r0, r4
 8000de4:	2802      	cmp	r0, #2
 8000de6:	d9f6      	bls.n	8000dd6 <HAL_RCC_OscConfig+0x312>
 8000de8:	e6b9      	b.n	8000b5e <HAL_RCC_OscConfig+0x9a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000dea:	2801      	cmp	r0, #1
 8000dec:	f43f aeb8 	beq.w	8000b60 <HAL_RCC_OscConfig+0x9c>
        pll_config = RCC->PLLCFGR;
 8000df0:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000df2:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000df4:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000df8:	4291      	cmp	r1, r2
 8000dfa:	f47f ae99 	bne.w	8000b30 <HAL_RCC_OscConfig+0x6c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000dfe:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000e00:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000e04:	428a      	cmp	r2, r1
 8000e06:	f47f ae93 	bne.w	8000b30 <HAL_RCC_OscConfig+0x6c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000e0a:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000e0c:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8000e10:	401a      	ands	r2, r3
 8000e12:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8000e16:	f47f ae8b 	bne.w	8000b30 <HAL_RCC_OscConfig+0x6c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000e1a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000e1c:	0852      	lsrs	r2, r2, #1
 8000e1e:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8000e22:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000e24:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8000e28:	f47f ae82 	bne.w	8000b30 <HAL_RCC_OscConfig+0x6c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8000e2c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000e2e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000e32:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 8000e36:	f47f ae7b 	bne.w	8000b30 <HAL_RCC_OscConfig+0x6c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8000e3a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000e3c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8000e40:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
 8000e44:	f43f ae55 	beq.w	8000af2 <HAL_RCC_OscConfig+0x2e>
 8000e48:	e672      	b.n	8000b30 <HAL_RCC_OscConfig+0x6c>
 8000e4a:	bf00      	nop
 8000e4c:	40023800 	.word	0x40023800
 8000e50:	42470000 	.word	0x42470000

08000e54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e8c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000e58:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000e5a:	e003      	b.n	8000e64 <LoopCopyDataInit>

08000e5c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000e5c:	4b0c      	ldr	r3, [pc, #48]	; (8000e90 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000e5e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000e60:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000e62:	3104      	adds	r1, #4

08000e64 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000e64:	480b      	ldr	r0, [pc, #44]	; (8000e94 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000e66:	4b0c      	ldr	r3, [pc, #48]	; (8000e98 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000e68:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000e6a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000e6c:	d3f6      	bcc.n	8000e5c <CopyDataInit>
  ldr  r2, =_sbss
 8000e6e:	4a0b      	ldr	r2, [pc, #44]	; (8000e9c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000e70:	e002      	b.n	8000e78 <LoopFillZerobss>

08000e72 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000e72:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000e74:	f842 3b04 	str.w	r3, [r2], #4

08000e78 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000e78:	4b09      	ldr	r3, [pc, #36]	; (8000ea0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000e7a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000e7c:	d3f9      	bcc.n	8000e72 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e7e:	f7ff fb43 	bl	8000508 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e82:	f000 f88f 	bl	8000fa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e86:	f000 f857 	bl	8000f38 <main>
  bx  lr    
 8000e8a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e8c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000e90:	0800102c 	.word	0x0800102c
  ldr  r0, =_sdata
 8000e94:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000e98:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000e9c:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000ea0:	20000040 	.word	0x20000040

08000ea4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ea4:	e7fe      	b.n	8000ea4 <ADC_IRQHandler>
	...

08000ea8 <SystemClock_Config>:
  *            Flash Latency(WS)              = 5
  * @param  None
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ea8:	b510      	push	{r4, lr}
 8000eaa:	b094      	sub	sp, #80	; 0x50
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eac:	2300      	movs	r3, #0
 8000eae:	4a20      	ldr	r2, [pc, #128]	; (8000f30 <SystemClock_Config+0x88>)
 8000eb0:	9300      	str	r3, [sp, #0]
 8000eb2:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8000eb4:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000eb8:	6411      	str	r1, [r2, #64]	; 0x40
 8000eba:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000ebc:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8000ec0:	9200      	str	r2, [sp, #0]
 8000ec2:	9a00      	ldr	r2, [sp, #0]
  
  /* The voltage scaling allows optimizing the power consumption when the device is 
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ec4:	4a1b      	ldr	r2, [pc, #108]	; (8000f34 <SystemClock_Config+0x8c>)
 8000ec6:	9301      	str	r3, [sp, #4]
 8000ec8:	6811      	ldr	r1, [r2, #0]
 8000eca:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8000ece:	6011      	str	r1, [r2, #0]
 8000ed0:	6812      	ldr	r2, [r2, #0]
  
  /* Enable HSI Oscillator and activate PLL with HSI as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ed2:	2402      	movs	r4, #2
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ed4:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 0x10;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ed8:	e9cd 430d 	strd	r4, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 360;
 8000edc:	f44f 73b4 	mov.w	r3, #360	; 0x168
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  RCC_OscInitStruct.PLL.PLLR = 6;
 8000ee0:	2007      	movs	r0, #7
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ee2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ee6:	9201      	str	r2, [sp, #4]
  RCC_OscInitStruct.PLL.PLLR = 6;
 8000ee8:	2306      	movs	r3, #6
 8000eea:	e9cd 0312 	strd	r0, r3, [sp, #72]	; 0x48
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000eee:	9a01      	ldr	r2, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ef0:	9407      	str	r4, [sp, #28]
  RCC_OscInitStruct.HSICalibrationValue = 0x10;
 8000ef2:	2210      	movs	r2, #16
 8000ef4:	2101      	movs	r1, #1
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ef6:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.HSICalibrationValue = 0x10;
 8000ef8:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000efc:	920f      	str	r2, [sp, #60]	; 0x3c
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000efe:	f7ff fde1 	bl	8000ac4 <HAL_RCC_OscConfig>
 8000f02:	b100      	cbz	r0, 8000f06 <SystemClock_Config+0x5e>
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
  while(1)
 8000f04:	e7fe      	b.n	8000f04 <SystemClock_Config+0x5c>
  ret = HAL_PWREx_EnableOverDrive();
 8000f06:	f7ff fcbf 	bl	8000888 <HAL_PWREx_EnableOverDrive>
  if(ret != HAL_OK)
 8000f0a:	b100      	cbz	r0, 8000f0e <SystemClock_Config+0x66>
    while(1) { ; }
 8000f0c:	e7fe      	b.n	8000f0c <SystemClock_Config+0x64>
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8000f0e:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f10:	e9cd 3402 	strd	r3, r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  
 8000f14:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;  
 8000f18:	e9cd 3005 	strd	r3, r0, [sp, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f1c:	9004      	str	r0, [sp, #16]
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f1e:	2105      	movs	r1, #5
 8000f20:	a802      	add	r0, sp, #8
 8000f22:	f7ff fceb 	bl	80008fc <HAL_RCC_ClockConfig>
 8000f26:	b100      	cbz	r0, 8000f2a <SystemClock_Config+0x82>
  while(1)
 8000f28:	e7fe      	b.n	8000f28 <SystemClock_Config+0x80>
}
 8000f2a:	b014      	add	sp, #80	; 0x50
 8000f2c:	bd10      	pop	{r4, pc}
 8000f2e:	bf00      	nop
 8000f30:	40023800 	.word	0x40023800
 8000f34:	40007000 	.word	0x40007000

08000f38 <main>:
{
 8000f38:	b507      	push	{r0, r1, r2, lr}
  HAL_Init();
 8000f3a:	f7ff fb2f 	bl	800059c <HAL_Init>
  SystemClock_Config();
 8000f3e:	f7ff ffb3 	bl	8000ea8 <SystemClock_Config>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	9301      	str	r3, [sp, #4]
 8000f46:	4b0f      	ldr	r3, [pc, #60]	; (8000f84 <main+0x4c>)
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000f48:	490f      	ldr	r1, [pc, #60]	; (8000f88 <main+0x50>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 8000f4c:	480f      	ldr	r0, [pc, #60]	; (8000f8c <main+0x54>)
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000f4e:	4c0f      	ldr	r4, [pc, #60]	; (8000f8c <main+0x54>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f50:	f042 0201 	orr.w	r2, r2, #1
 8000f54:	631a      	str	r2, [r3, #48]	; 0x30
 8000f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f58:	f003 0301 	and.w	r3, r3, #1
 8000f5c:	9301      	str	r3, [sp, #4]
 8000f5e:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f60:	2220      	movs	r2, #32
 8000f62:	2301      	movs	r3, #1
 8000f64:	e9c1 2300 	strd	r2, r3, [r1]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f68:	608b      	str	r3, [r1, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	60cb      	str	r3, [r1, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 8000f6e:	f7ff fbad 	bl	80006cc <HAL_GPIO_Init>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000f72:	4620      	mov	r0, r4
 8000f74:	2120      	movs	r1, #32
 8000f76:	f7ff fc7d 	bl	8000874 <HAL_GPIO_TogglePin>
    HAL_Delay(100);
 8000f7a:	2064      	movs	r0, #100	; 0x64
 8000f7c:	f7ff fb3a 	bl	80005f4 <HAL_Delay>
  while (1)
 8000f80:	e7f7      	b.n	8000f72 <main+0x3a>
 8000f82:	bf00      	nop
 8000f84:	40023800 	.word	0x40023800
 8000f88:	2000002c 	.word	0x2000002c
 8000f8c:	40020000 	.word	0x40020000

08000f90 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8000f90:	4770      	bx	lr

08000f92 <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000f92:	e7fe      	b.n	8000f92 <HardFault_Handler>

08000f94 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000f94:	e7fe      	b.n	8000f94 <MemManage_Handler>

08000f96 <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000f96:	e7fe      	b.n	8000f96 <BusFault_Handler>

08000f98 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000f98:	e7fe      	b.n	8000f98 <UsageFault_Handler>

08000f9a <SVC_Handler>:
 8000f9a:	4770      	bx	lr

08000f9c <DebugMon_Handler>:
 8000f9c:	4770      	bx	lr

08000f9e <PendSV_Handler>:
 8000f9e:	4770      	bx	lr

08000fa0 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 8000fa0:	f7ff bb16 	b.w	80005d0 <HAL_IncTick>

08000fa4 <__libc_init_array>:
 8000fa4:	b570      	push	{r4, r5, r6, lr}
 8000fa6:	4d0d      	ldr	r5, [pc, #52]	; (8000fdc <__libc_init_array+0x38>)
 8000fa8:	4c0d      	ldr	r4, [pc, #52]	; (8000fe0 <__libc_init_array+0x3c>)
 8000faa:	1b64      	subs	r4, r4, r5
 8000fac:	10a4      	asrs	r4, r4, #2
 8000fae:	2600      	movs	r6, #0
 8000fb0:	42a6      	cmp	r6, r4
 8000fb2:	d109      	bne.n	8000fc8 <__libc_init_array+0x24>
 8000fb4:	4d0b      	ldr	r5, [pc, #44]	; (8000fe4 <__libc_init_array+0x40>)
 8000fb6:	4c0c      	ldr	r4, [pc, #48]	; (8000fe8 <__libc_init_array+0x44>)
 8000fb8:	f000 f818 	bl	8000fec <_init>
 8000fbc:	1b64      	subs	r4, r4, r5
 8000fbe:	10a4      	asrs	r4, r4, #2
 8000fc0:	2600      	movs	r6, #0
 8000fc2:	42a6      	cmp	r6, r4
 8000fc4:	d105      	bne.n	8000fd2 <__libc_init_array+0x2e>
 8000fc6:	bd70      	pop	{r4, r5, r6, pc}
 8000fc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8000fcc:	4798      	blx	r3
 8000fce:	3601      	adds	r6, #1
 8000fd0:	e7ee      	b.n	8000fb0 <__libc_init_array+0xc>
 8000fd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8000fd6:	4798      	blx	r3
 8000fd8:	3601      	adds	r6, #1
 8000fda:	e7f2      	b.n	8000fc2 <__libc_init_array+0x1e>
 8000fdc:	08001024 	.word	0x08001024
 8000fe0:	08001024 	.word	0x08001024
 8000fe4:	08001024 	.word	0x08001024
 8000fe8:	08001028 	.word	0x08001028

08000fec <_init>:
 8000fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fee:	bf00      	nop
 8000ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ff2:	bc08      	pop	{r3}
 8000ff4:	469e      	mov	lr, r3
 8000ff6:	4770      	bx	lr

08000ff8 <_fini>:
 8000ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ffa:	bf00      	nop
 8000ffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ffe:	bc08      	pop	{r3}
 8001000:	469e      	mov	lr, r3
 8001002:	4770      	bx	lr
