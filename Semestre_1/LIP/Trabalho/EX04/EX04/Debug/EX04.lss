
EX04.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000fe  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000152  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  00000172  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000175  00000000  00000000  0000018d  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000ea  00000000  00000000  00000302  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000018d  00000000  00000000  000003ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  0000057c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000d1  00000000  00000000  0000059c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000ea  00000000  00000000  0000066d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000060  00000000  00000000  00000757  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 7d 00 	jmp	0xfa	; 0xfa <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:

/**
 * Função principal e de entrada do programa;
 */
int main( void )
{
  80:	ff 92       	push	r15
  82:	0f 93       	push	r16
  84:	1f 93       	push	r17
    uint8_t aux = 0;
	/**
	 * Para usar qualquer GPIO antes é necessário configurar o sentido (entrada ou saída);
	 * Configura todos os pinos do PORTB como saída; 
	 */
    Set_bit( DDRB, LED_BUILDING ); //Pino RB5 como saída;
  86:	e4 e2       	ldi	r30, 0x24	; 36
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	80 81       	ld	r24, Z
  8c:	80 62       	ori	r24, 0x20	; 32
  8e:	80 83       	st	Z, r24
    Clr_bit( DDRD, BUTTON_1 ); //Pino PD2 como entrada; 
  90:	ea e2       	ldi	r30, 0x2A	; 42
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	8b 7f       	andi	r24, 0xFB	; 251
  98:	80 83       	st	Z, r24
	Set_bit( PORTD, BUTTON_1 ); //Pull UP em PD2
  9a:	eb e2       	ldi	r30, 0x2B	; 43
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	84 60       	ori	r24, 0x04	; 4
  a2:	80 83       	st	Z, r24
  a4:	90 e0       	ldi	r25, 0x00	; 0
    for(;;) 
    {
		/**
		 * Button pressionado?
		 */
    	if( !Tst_bit( PIND, 2 ) && aux == 0 )  
  a6:	e9 e2       	ldi	r30, 0x29	; 41
  a8:	f0 e0       	ldi	r31, 0x00	; 0
    	{
    		/**
    		 * Inverte o estado lógico do led building;
    		 */
			Cpl_bit( PORTB, LED_BUILDING ); 
  aa:	a5 e2       	ldi	r26, 0x25	; 37
  ac:	b0 e0       	ldi	r27, 0x00	; 0
  ae:	10 e2       	ldi	r17, 0x20	; 32
  b0:	68 ee       	ldi	r22, 0xE8	; 232
  b2:	73 e0       	ldi	r23, 0x03	; 3
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  b4:	40 e9       	ldi	r20, 0x90	; 144
  b6:	51 e0       	ldi	r21, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  b8:	01 e0       	ldi	r16, 0x01	; 1
	 * Para usar qualquer GPIO antes é necessário configurar o sentido (entrada ou saída);
	 * Configura todos os pinos do PORTB como saída; 
	 */
    Set_bit( DDRB, LED_BUILDING ); //Pino RB5 como saída;
    Clr_bit( DDRD, BUTTON_1 ); //Pino PD2 como entrada; 
	Set_bit( PORTD, BUTTON_1 ); //Pull UP em PD2
  ba:	ff 24       	eor	r15, r15
  bc:	01 c0       	rjmp	.+2      	; 0xc0 <main+0x40>
  be:	9f 2d       	mov	r25, r15
    for(;;) 
    {
		/**
		 * Button pressionado?
		 */
    	if( !Tst_bit( PIND, 2 ) && aux == 0 )  
  c0:	80 81       	ld	r24, Z
  c2:	82 fd       	sbrc	r24, 2
  c4:	0d c0       	rjmp	.+26     	; 0xe0 <main+0x60>
  c6:	99 23       	and	r25, r25
  c8:	59 f4       	brne	.+22     	; 0xe0 <main+0x60>
    	{
    		/**
    		 * Inverte o estado lógico do led building;
    		 */
			Cpl_bit( PORTB, LED_BUILDING ); 
  ca:	8c 91       	ld	r24, X
  cc:	81 27       	eor	r24, r17
  ce:	8c 93       	st	X, r24
  d0:	9b 01       	movw	r18, r22
  d2:	ca 01       	movw	r24, r20
  d4:	01 97       	sbiw	r24, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <main+0x54>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  d8:	21 50       	subi	r18, 0x01	; 1
  da:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  dc:	d1 f7       	brne	.-12     	; 0xd2 <main+0x52>
  de:	90 2f       	mov	r25, r16
			aux = 1; 
		}
		/**
		 * Button solto?
		 */
		if( Tst_bit( PIND, BUTTON_1) && aux == 1 )
  e0:	80 81       	ld	r24, Z
  e2:	82 ff       	sbrs	r24, 2
  e4:	ed cf       	rjmp	.-38     	; 0xc0 <main+0x40>
  e6:	91 30       	cpi	r25, 0x01	; 1
  e8:	59 f7       	brne	.-42     	; 0xc0 <main+0x40>
  ea:	9b 01       	movw	r18, r22
  ec:	ca 01       	movw	r24, r20
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <main+0x6e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  f2:	21 50       	subi	r18, 0x01	; 1
  f4:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  f6:	d1 f7       	brne	.-12     	; 0xec <main+0x6c>
  f8:	e2 cf       	rjmp	.-60     	; 0xbe <main+0x3e>

000000fa <_exit>:
  fa:	f8 94       	cli

000000fc <__stop_program>:
  fc:	ff cf       	rjmp	.-2      	; 0xfc <__stop_program>
