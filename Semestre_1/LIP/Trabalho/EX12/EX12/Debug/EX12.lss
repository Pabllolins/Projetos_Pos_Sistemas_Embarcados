
EX12.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000018c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800100  00800100  00000200  2**0
                  ALLOC
  2 .debug_aranges 00000050  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000065  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000202  00000000  00000000  000002b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000153  00000000  00000000  000004b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000241  00000000  00000000  0000060a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000060  00000000  00000000  0000084c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000112  00000000  00000000  000008ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000088  00000000  00000000  000009be  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000040  00000000  00000000  00000a46  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 c4 00 	jmp	0x188	; 0x188 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
#include "defs.h"
#include "ticks.h"

int main( void )
{
  90:	df 92       	push	r13
  92:	ef 92       	push	r14
  94:	ff 92       	push	r15
  96:	0f 93       	push	r16
  98:	1f 93       	push	r17
  9a:	df 93       	push	r29
  9c:	cf 93       	push	r28
  9e:	00 d0       	rcall	.+0      	; 0xa0 <main+0x10>
  a0:	cd b7       	in	r28, 0x3d	; 61
  a2:	de b7       	in	r29, 0x3e	; 62
	unsigned int tick1 = 0;
  a4:	1a 82       	std	Y+2, r1	; 0x02
  a6:	19 82       	std	Y+1, r1	; 0x01
	
	DDRB = 0xFF;										
  a8:	8f ef       	ldi	r24, 0xFF	; 255
  aa:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00;									
  ac:	15 b8       	out	0x05, r1	; 5
	
	ticks_init();
  ae:	0e 94 71 00 	call	0xe2	; 0xe2 <ticks_init>
	
	sei();												
  b2:	78 94       	sei
	
	for(;;)
	{
		if( ticks( 1000, &tick1 ) )
  b4:	8e 01       	movw	r16, r28
  b6:	0f 5f       	subi	r16, 0xFF	; 255
  b8:	1f 4f       	sbci	r17, 0xFF	; 255
		{
			PORTB ^= (1 << 5);		// Toggle LED0 each 1000 ms (0,5Hz)
  ba:	0f 2e       	mov	r0, r31
  bc:	f5 e2       	ldi	r31, 0x25	; 37
  be:	ef 2e       	mov	r14, r31
  c0:	ff 24       	eor	r15, r15
  c2:	f0 2d       	mov	r31, r0
  c4:	dd 24       	eor	r13, r13
  c6:	68 94       	set
  c8:	d5 f8       	bld	r13, 5
	
	sei();												
	
	for(;;)
	{
		if( ticks( 1000, &tick1 ) )
  ca:	88 ee       	ldi	r24, 0xE8	; 232
  cc:	93 e0       	ldi	r25, 0x03	; 3
  ce:	b8 01       	movw	r22, r16
  d0:	0e 94 85 00 	call	0x10a	; 0x10a <ticks>
  d4:	88 23       	and	r24, r24
  d6:	c9 f3       	breq	.-14     	; 0xca <main+0x3a>
		{
			PORTB ^= (1 << 5);		// Toggle LED0 each 1000 ms (0,5Hz)
  d8:	f7 01       	movw	r30, r14
  da:	80 81       	ld	r24, Z
  dc:	8d 25       	eor	r24, r13
  de:	80 83       	st	Z, r24
  e0:	f4 cf       	rjmp	.-24     	; 0xca <main+0x3a>

000000e2 <ticks_init>:
*
*	Return:			None
****************************************************************************************************************************************************************/
void ticks_init( void )
{
	TCCR1B |= (1 << WGM12);			// Set timer1 in CTC-mode with OCR1A as compare register
  e2:	a1 e8       	ldi	r26, 0x81	; 129
  e4:	b0 e0       	ldi	r27, 0x00	; 0
  e6:	8c 91       	ld	r24, X
  e8:	88 60       	ori	r24, 0x08	; 8
  ea:	8c 93       	st	X, r24
	TIMSK1 |= (1 << OCIE1A);		// Enable CTC Output Compare 1A interrupt
  ec:	ef e6       	ldi	r30, 0x6F	; 111
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	82 60       	ori	r24, 0x02	; 2
  f4:	80 83       	st	Z, r24

	OCR1A = F_CPU/1000;				// timer1-value that corresponds to 1 ms
  f6:	80 e8       	ldi	r24, 0x80	; 128
  f8:	9e e3       	ldi	r25, 0x3E	; 62
  fa:	90 93 89 00 	sts	0x0089, r25
  fe:	80 93 88 00 	sts	0x0088, r24
	TCCR1B |= (1 << CS10);			// Set timer1 clock source to F_CPU with no prescaling	
 102:	8c 91       	ld	r24, X
 104:	81 60       	ori	r24, 0x01	; 1
 106:	8c 93       	st	X, r24
}
 108:	08 95       	ret

0000010a <ticks>:
*
*	Return:				0					Tick not trigged
						1					Tick trigged and timerCompareValue updated
****************************************************************************************************************************************************************/
char ticks( unsigned int interval, unsigned int *tickCompareValue )
{
 10a:	fc 01       	movw	r30, r24
 10c:	db 01       	movw	r26, r22
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 10e:	f8 94       	cli
	unsigned int temp;
	ATOMIC_BLOCK(ATOMIC_FORCEON){
		temp = ms_Counter;
 110:	80 91 00 01 	lds	r24, 0x0100
 114:	90 91 01 01 	lds	r25, 0x0101
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 118:	78 94       	sei
	}
	
	if((*tickCompareValue - interval) > *tickCompareValue)
 11a:	2d 91       	ld	r18, X+
 11c:	3c 91       	ld	r19, X
 11e:	11 97       	sbiw	r26, 0x01	; 1
 120:	a9 01       	movw	r20, r18
 122:	4e 1b       	sub	r20, r30
 124:	5f 0b       	sbc	r21, r31
 126:	24 17       	cp	r18, r20
 128:	35 07       	cpc	r19, r21
 12a:	60 f4       	brcc	.+24     	; 0x144 <ticks+0x3a>
	{								// Wraparound condition
		if((temp < (*tickCompareValue - interval)) && (temp >= *tickCompareValue))
 12c:	84 17       	cp	r24, r20
 12e:	95 07       	cpc	r25, r21
 130:	90 f4       	brcc	.+36     	; 0x156 <ticks+0x4c>
 132:	82 17       	cp	r24, r18
 134:	93 07       	cpc	r25, r19
 136:	78 f0       	brcs	.+30     	; 0x156 <ticks+0x4c>
		{    // If timer is larger or equal to tickCompareValue but also smaller than previous tickCompareValue
			*tickCompareValue = temp + interval;// Calculate tickCompareValue for next tick
 138:	8e 0f       	add	r24, r30
 13a:	9f 1f       	adc	r25, r31
 13c:	8d 93       	st	X+, r24
 13e:	9c 93       	st	X, r25
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	08 95       	ret
			return 1;
		} else
			return 0;
	} else
		if(temp >= *tickCompareValue){				
 144:	82 17       	cp	r24, r18
 146:	93 07       	cpc	r25, r19
 148:	30 f0       	brcs	.+12     	; 0x156 <ticks+0x4c>
			*tickCompareValue = temp + interval;// Calculate tickCompareValue for next tick
 14a:	8e 0f       	add	r24, r30
 14c:	9f 1f       	adc	r25, r31
 14e:	8d 93       	st	X+, r24
 150:	9c 93       	st	X, r25
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	08 95       	ret
			return 1;
 156:	80 e0       	ldi	r24, 0x00	; 0
		} else
			return 0;
	return 0;
}
 158:	08 95       	ret

0000015a <__vector_11>:
*	TIMER1 Compare Output A Interrupt Service Routine
*	Increment ms_Counter at a rate of 1 ms
*
******************************************************************************************************************************************************************/
ISR( TIMER1_COMPA_vect )
{
 15a:	1f 92       	push	r1
 15c:	0f 92       	push	r0
 15e:	0f b6       	in	r0, 0x3f	; 63
 160:	0f 92       	push	r0
 162:	11 24       	eor	r1, r1
 164:	8f 93       	push	r24
 166:	9f 93       	push	r25
	ms_Counter++;
 168:	80 91 00 01 	lds	r24, 0x0100
 16c:	90 91 01 01 	lds	r25, 0x0101
 170:	01 96       	adiw	r24, 0x01	; 1
 172:	90 93 01 01 	sts	0x0101, r25
 176:	80 93 00 01 	sts	0x0100, r24
}
 17a:	9f 91       	pop	r25
 17c:	8f 91       	pop	r24
 17e:	0f 90       	pop	r0
 180:	0f be       	out	0x3f, r0	; 63
 182:	0f 90       	pop	r0
 184:	1f 90       	pop	r1
 186:	18 95       	reti

00000188 <_exit>:
 188:	f8 94       	cli

0000018a <__stop_program>:
 18a:	ff cf       	rjmp	.-2      	; 0x18a <__stop_program>
