
EX08.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003e  00800100  000003c0  00000454  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000067  0080013e  0080013e  00000492  2**0
                  ALLOC
  3 .debug_aranges 00000090  00000000  00000000  00000492  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000ec  00000000  00000000  00000522  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000003e4  00000000  00000000  0000060e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000265  00000000  00000000  000009f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004b2  00000000  00000000  00000c57  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c0  00000000  00000000  0000110c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000185  00000000  00000000  000011cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000012c  00000000  00000000  00001351  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  0000147d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	UDR0 = data;								// Envia o dado pela porta serial
}

//-------------------------------------------------------------------------------------------------------
unsigned char USART_Receive()
{
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ec       	ldi	r30, 0xC0	; 192
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	ae 33       	cpi	r26, 0x3E	; 62
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	ae e3       	ldi	r26, 0x3E	; 62
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 3a       	cpi	r26, 0xA5	; 165
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 b3 00 	call	0x166	; 0x166 <main>
  9e:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <adc_init>:
#include <stdint.h>

void adc_init(void)
{
	// AREF = AVcc
	ADMUX = (1<<REFS0);
  a6:	80 e4       	ldi	r24, 0x40	; 64
  a8:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  ac:	87 e8       	ldi	r24, 0x87	; 135
  ae:	80 93 7a 00 	sts	0x007A, r24
}
  b2:	08 95       	ret

000000b4 <adc_read>:
{
	// select the corresponding channel 0~7
	// ANDing with â€™7' will always keep the value
	// of â€˜châ€™ between 0 and 7
	ch &= 0b00000111;  // AND operation with 7
	ADMUX = (ADMUX & 0xF8)|ch; 
  b4:	ec e7       	ldi	r30, 0x7C	; 124
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	90 81       	ld	r25, Z
  ba:	87 70       	andi	r24, 0x07	; 7
  bc:	98 7f       	andi	r25, 0xF8	; 248
  be:	89 2b       	or	r24, r25
  c0:	80 83       	st	Z, r24

	// start single convertion
	// write â€™1' to ADSC
	ADCSRA |= (1<<ADSC);
  c2:	ea e7       	ldi	r30, 0x7A	; 122
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	80 64       	ori	r24, 0x40	; 64
  ca:	80 83       	st	Z, r24

	// wait for conversion to complete
	// ADSC becomes â€™0' again
	// till then, run loop continuously
	while(ADCSRA & (1<<ADSC));
  cc:	80 81       	ld	r24, Z
  ce:	86 fd       	sbrc	r24, 6
  d0:	fd cf       	rjmp	.-6      	; 0xcc <adc_read+0x18>

	return (ADCW);
  d2:	20 91 78 00 	lds	r18, 0x0078
  d6:	30 91 79 00 	lds	r19, 0x0079
  da:	82 2f       	mov	r24, r18
  dc:	93 2f       	mov	r25, r19
  de:	08 95       	ret

000000e0 <__vector_18>:

/**
 * Vetor de Interrupção USART RX
 */
ISR( USART_RX_vect )
{
  e0:	1f 92       	push	r1
  e2:	0f 92       	push	r0
  e4:	0f b6       	in	r0, 0x3f	; 63
  e6:	0f 92       	push	r0
  e8:	11 24       	eor	r1, r1
  ea:	2f 93       	push	r18
  ec:	8f 93       	push	r24
  ee:	9f 93       	push	r25
  f0:	ef 93       	push	r30
  f2:	ff 93       	push	r31
	 *  FE0 = Frame Error;
	 *  DOR0 = Data OverRun;
	 *  UPE0 = USART Parity Error;
	 */
	 
	 data = UDR0;
  f4:	20 91 c6 00 	lds	r18, 0x00C6
	
	if((UCSR0A & ((1 << FE0) | (1 << DOR0) | (1 << UPE0))) == 0)
  f8:	80 91 c0 00 	lds	r24, 0x00C0
  fc:	8c 71       	andi	r24, 0x1C	; 28
  fe:	49 f5       	brne	.+82     	; 0x152 <__vector_18+0x72>
	{

		/**
		 * Buffer cheio? Caso sim, reinicia indice
		 */		
		if(indice >= sizeof(usart_rx_buffer))
 100:	80 91 3e 01 	lds	r24, 0x013E
 104:	90 91 3f 01 	lds	r25, 0x013F
 108:	84 36       	cpi	r24, 0x64	; 100
 10a:	91 05       	cpc	r25, r1
 10c:	20 f0       	brcs	.+8      	; 0x116 <__vector_18+0x36>
		{
			indice = 0;
 10e:	10 92 3f 01 	sts	0x013F, r1
 112:	10 92 3e 01 	sts	0x013E, r1
		}
		
		/**
		 * Caractere indicador de fim de frame;
		 */
		if( data == '\n' )
 116:	2a 30       	cpi	r18, 0x0A	; 10
 118:	79 f4       	brne	.+30     	; 0x138 <__vector_18+0x58>
		{
			usart_rx_buffer[indice] = '\0'; 
 11a:	e0 91 3e 01 	lds	r30, 0x013E
 11e:	f0 91 3f 01 	lds	r31, 0x013F
 122:	ef 5b       	subi	r30, 0xBF	; 191
 124:	fe 4f       	sbci	r31, 0xFE	; 254
 126:	10 82       	st	Z, r1
			frame_status = 1; 
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	80 93 40 01 	sts	0x0140, r24
			indice = 0;
 12e:	10 92 3f 01 	sts	0x013F, r1
 132:	10 92 3e 01 	sts	0x013E, r1
 136:	0d c0       	rjmp	.+26     	; 0x152 <__vector_18+0x72>
		} 
		/* Armazena os bytes recebidos no buffer */
		else {
			usart_rx_buffer[indice++] = data; 
 138:	80 91 3e 01 	lds	r24, 0x013E
 13c:	90 91 3f 01 	lds	r25, 0x013F
 140:	fc 01       	movw	r30, r24
 142:	ef 5b       	subi	r30, 0xBF	; 191
 144:	fe 4f       	sbci	r31, 0xFE	; 254
 146:	20 83       	st	Z, r18
 148:	01 96       	adiw	r24, 0x01	; 1
 14a:	90 93 3f 01 	sts	0x013F, r25
 14e:	80 93 3e 01 	sts	0x013E, r24
		}
	
	}
}
 152:	ff 91       	pop	r31
 154:	ef 91       	pop	r30
 156:	9f 91       	pop	r25
 158:	8f 91       	pop	r24
 15a:	2f 91       	pop	r18
 15c:	0f 90       	pop	r0
 15e:	0f be       	out	0x3f, r0	; 63
 160:	0f 90       	pop	r0
 162:	1f 90       	pop	r1
 164:	18 95       	reti

00000166 <main>:
/**
 * Função principal e de entrada do programa;
 */
int main( void )
{
 166:	2f 92       	push	r2
 168:	3f 92       	push	r3
 16a:	4f 92       	push	r4
 16c:	5f 92       	push	r5
 16e:	6f 92       	push	r6
 170:	7f 92       	push	r7
 172:	8f 92       	push	r8
 174:	9f 92       	push	r9
 176:	af 92       	push	r10
 178:	bf 92       	push	r11
 17a:	cf 92       	push	r12
 17c:	df 92       	push	r13
 17e:	ef 92       	push	r14
 180:	ff 92       	push	r15
 182:	0f 93       	push	r16
 184:	1f 93       	push	r17
 186:	df 93       	push	r29
 188:	cf 93       	push	r28
 18a:	cd b7       	in	r28, 0x3d	; 61
 18c:	de b7       	in	r29, 0x3e	; 62
 18e:	2a 97       	sbiw	r28, 0x0a	; 10
 190:	0f b6       	in	r0, 0x3f	; 63
 192:	f8 94       	cli
 194:	de bf       	out	0x3e, r29	; 62
 196:	0f be       	out	0x3f, r0	; 63
 198:	cd bf       	out	0x3d, r28	; 61
	uint8_t string_adc[10];
	/**
	 * Para usar qualquer GPIO antes é necessário configurar o sentido (entrada ou saída);
	 * Configura todos os pinos do PORTB como saída; 
	 */
    Set_bit( DDRB, LED_BUILDING );  //Pino RB5 como saída;
 19a:	e4 e2       	ldi	r30, 0x24	; 36
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	80 81       	ld	r24, Z
 1a0:	80 62       	ori	r24, 0x20	; 32
 1a2:	80 83       	st	Z, r24
    Clr_bit( DDRD, BUTTON_1 ); 		//Pino PD2 como entrada; 
 1a4:	ea e2       	ldi	r30, 0x2A	; 42
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	80 81       	ld	r24, Z
 1aa:	8b 7f       	andi	r24, 0xFB	; 251
 1ac:	80 83       	st	Z, r24
	Set_bit( PORTD, BUTTON_1 ); 	//Pull UP em PD2
 1ae:	eb e2       	ldi	r30, 0x2B	; 43
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	80 81       	ld	r24, Z
 1b4:	84 60       	ori	r24, 0x04	; 4
 1b6:	80 83       	st	Z, r24
	/**
	 * Inicializa a Uart
	 */
	USART_Init(); 
 1b8:	0e 94 60 01 	call	0x2c0	; 0x2c0 <USART_Init>
	USART_StrTx("Hello\r\n");
 1bc:	80 e0       	ldi	r24, 0x00	; 0
 1be:	91 e0       	ldi	r25, 0x01	; 1
 1c0:	0e 94 75 01 	call	0x2ea	; 0x2ea <USART_StrTx>
	/**
	 * Habilita a interrupção Serial;
	 * sei() -> habilita a chave geral das interrupções;
	 * cli() -> desabilita a chave geral das interrupções;
	 */	
	sei(); 
 1c4:	78 94       	sei
	USART_rxIE();   
 1c6:	0e 94 84 01 	call	0x308	; 0x308 <USART_rxIE>

	/**
	 * Inicializa AD;
	 */		
	adc_init(); 
 1ca:	0e 94 53 00 	call	0xa6	; 0xa6 <adc_init>
 1ce:	ff 24       	eor	r15, r15
		
		ENTER_CRITICAL();
		{
			if( frame_status )
			{
				USART_StrTx( (char*)usart_rx_buffer ); 
 1d0:	0f 2e       	mov	r0, r31
 1d2:	f1 e4       	ldi	r31, 0x41	; 65
 1d4:	af 2e       	mov	r10, r31
 1d6:	f1 e0       	ldi	r31, 0x01	; 1
 1d8:	bf 2e       	mov	r11, r31
 1da:	f0 2d       	mov	r31, r0
				
				/**
				 * Comando: 
				 * [AN0] -> Leitura do canal AN0;
				 */
				if( strstr( (char*) usart_rx_buffer, "[AN0]" ) )
 1dc:	0f 2e       	mov	r0, r31
 1de:	f8 e0       	ldi	r31, 0x08	; 8
 1e0:	6f 2e       	mov	r6, r31
 1e2:	f1 e0       	ldi	r31, 0x01	; 1
 1e4:	7f 2e       	mov	r7, r31
 1e6:	f0 2d       	mov	r31, r0
				{
					adc_result = adc_read(0);
					
					/* Converte o valor uint16_t para string via utoa da libC stdlib.h */
					utoa( adc_result, (char*)string_adc, 10 ); 
 1e8:	4e 01       	movw	r8, r28
 1ea:	08 94       	sec
 1ec:	81 1c       	adc	r8, r1
 1ee:	91 1c       	adc	r9, r1
		
		
		/**
		 * Button pressionado?
		 */
    	if( !Tst_bit( PIND, BUTTON_1 ) && aux == 0 )  
 1f0:	0f 2e       	mov	r0, r31
 1f2:	f9 e2       	ldi	r31, 0x29	; 41
 1f4:	cf 2e       	mov	r12, r31
 1f6:	dd 24       	eor	r13, r13
 1f8:	f0 2d       	mov	r31, r0
			USART_StrTx("Button Pressionado.\r\n");
			
    		/**
    		 * Inverte o estado lógico do led building;
    		 */
			Cpl_bit( PORTB, LED_BUILDING ); 
 1fa:	0f 2e       	mov	r0, r31
 1fc:	f5 e2       	ldi	r31, 0x25	; 37
 1fe:	4f 2e       	mov	r4, r31
 200:	55 24       	eor	r5, r5
 202:	f0 2d       	mov	r31, r0
 204:	ee 24       	eor	r14, r14
 206:	68 94       	set
 208:	e5 f8       	bld	r14, 5
 20a:	0f 2e       	mov	r0, r31
 20c:	f8 ee       	ldi	r31, 0xE8	; 232
 20e:	2f 2e       	mov	r2, r31
 210:	f3 e0       	ldi	r31, 0x03	; 3
 212:	3f 2e       	mov	r3, r31
 214:	f0 2d       	mov	r31, r0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 216:	00 e9       	ldi	r16, 0x90	; 144
 218:	11 e0       	ldi	r17, 0x01	; 1
 21a:	01 c0       	rjmp	.+2      	; 0x21e <main+0xb8>
	USART_rxIE();   

	/**
	 * Inicializa AD;
	 */		
	adc_init(); 
 21c:	ff 24       	eor	r15, r15
	
    for(;;) 
    {
		
		ENTER_CRITICAL();
 21e:	f8 94       	cli
		{
			if( frame_status )
 220:	80 91 40 01 	lds	r24, 0x0140
 224:	88 23       	and	r24, r24
 226:	01 f1       	breq	.+64     	; 0x268 <main+0x102>
			{
				USART_StrTx( (char*)usart_rx_buffer ); 
 228:	c5 01       	movw	r24, r10
 22a:	0e 94 75 01 	call	0x2ea	; 0x2ea <USART_StrTx>
				
				/**
				 * Comando: 
				 * [AN0] -> Leitura do canal AN0;
				 */
				if( strstr( (char*) usart_rx_buffer, "[AN0]" ) )
 22e:	c5 01       	movw	r24, r10
 230:	b3 01       	movw	r22, r6
 232:	0e 94 8a 01 	call	0x314	; 0x314 <strstr>
 236:	28 2f       	mov	r18, r24
 238:	39 2f       	mov	r19, r25
 23a:	23 2b       	or	r18, r19
 23c:	99 f0       	breq	.+38     	; 0x264 <main+0xfe>
				{
					adc_result = adc_read(0);
 23e:	80 e0       	ldi	r24, 0x00	; 0
 240:	0e 94 5a 00 	call	0xb4	; 0xb4 <adc_read>
					
					/* Converte o valor uint16_t para string via utoa da libC stdlib.h */
					utoa( adc_result, (char*)string_adc, 10 ); 
 244:	b4 01       	movw	r22, r8
 246:	4a e0       	ldi	r20, 0x0A	; 10
 248:	50 e0       	ldi	r21, 0x00	; 0
 24a:	0e 94 a4 01 	call	0x348	; 0x348 <utoa>
					
				    /**
					 * Formata o retorno com a leitura do conversor AD conforme: "[AD0:XXXXX]\r\n";
					 */
					 				
					USART_StrTx( "[AN0:" );
 24e:	8e e0       	ldi	r24, 0x0E	; 14
 250:	91 e0       	ldi	r25, 0x01	; 1
 252:	0e 94 75 01 	call	0x2ea	; 0x2ea <USART_StrTx>
					USART_StrTx( (char*)string_adc ); 
 256:	c4 01       	movw	r24, r8
 258:	0e 94 75 01 	call	0x2ea	; 0x2ea <USART_StrTx>
					USART_StrTx( "]\r\n" ); 
 25c:	84 e1       	ldi	r24, 0x14	; 20
 25e:	91 e0       	ldi	r25, 0x01	; 1
 260:	0e 94 75 01 	call	0x2ea	; 0x2ea <USART_StrTx>
				}
				
				frame_status = 0; 
 264:	10 92 40 01 	sts	0x0140, r1
			}
		}
		EXIT_CRITICAL();
 268:	78 94       	sei
		
		
		/**
		 * Button pressionado?
		 */
    	if( !Tst_bit( PIND, BUTTON_1 ) && aux == 0 )  
 26a:	f6 01       	movw	r30, r12
 26c:	80 81       	ld	r24, Z
 26e:	82 fd       	sbrc	r24, 2
 270:	13 c0       	rjmp	.+38     	; 0x298 <main+0x132>
 272:	ff 20       	and	r15, r15
 274:	89 f4       	brne	.+34     	; 0x298 <main+0x132>
    	{
			
			USART_StrTx("Button Pressionado.\r\n");
 276:	88 e1       	ldi	r24, 0x18	; 24
 278:	91 e0       	ldi	r25, 0x01	; 1
 27a:	0e 94 75 01 	call	0x2ea	; 0x2ea <USART_StrTx>
			
    		/**
    		 * Inverte o estado lógico do led building;
    		 */
			Cpl_bit( PORTB, LED_BUILDING ); 
 27e:	f2 01       	movw	r30, r4
 280:	80 81       	ld	r24, Z
 282:	8e 25       	eor	r24, r14
 284:	80 83       	st	Z, r24
 286:	91 01       	movw	r18, r2
 288:	c8 01       	movw	r24, r16
 28a:	01 97       	sbiw	r24, 0x01	; 1
 28c:	f1 f7       	brne	.-4      	; 0x28a <main+0x124>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 28e:	21 50       	subi	r18, 0x01	; 1
 290:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 292:	d1 f7       	brne	.-12     	; 0x288 <main+0x122>
 294:	ff 24       	eor	r15, r15
 296:	f3 94       	inc	r15
			aux = 1; 
		}
		/**
		 * Button solto?
		 */
		if( Tst_bit( PIND, BUTTON_1 ) && aux == 1 )
 298:	f6 01       	movw	r30, r12
 29a:	80 81       	ld	r24, Z
 29c:	82 ff       	sbrs	r24, 2
 29e:	bf cf       	rjmp	.-130    	; 0x21e <main+0xb8>
 2a0:	f1 e0       	ldi	r31, 0x01	; 1
 2a2:	ff 16       	cp	r15, r31
 2a4:	09 f0       	breq	.+2      	; 0x2a8 <main+0x142>
 2a6:	bb cf       	rjmp	.-138    	; 0x21e <main+0xb8>
		{
			USART_StrTx("Button Solto.\r\n");
 2a8:	8e e2       	ldi	r24, 0x2E	; 46
 2aa:	91 e0       	ldi	r25, 0x01	; 1
 2ac:	0e 94 75 01 	call	0x2ea	; 0x2ea <USART_StrTx>
 2b0:	91 01       	movw	r18, r2
 2b2:	c8 01       	movw	r24, r16
 2b4:	01 97       	sbiw	r24, 0x01	; 1
 2b6:	f1 f7       	brne	.-4      	; 0x2b4 <main+0x14e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2b8:	21 50       	subi	r18, 0x01	; 1
 2ba:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2bc:	d1 f7       	brne	.-12     	; 0x2b2 <main+0x14c>
 2be:	ae cf       	rjmp	.-164    	; 0x21c <main+0xb6>

000002c0 <USART_Init>:
#include "usart.h"

void USART_Init()
{
	UBRR0H = (uint8_t) (MYUBRR>>8);				// Ajuste da transmissÃ£o em 9600 bps
 2c0:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (uint8_t)(MYUBRR);
 2c4:	87 e6       	ldi	r24, 0x67	; 103
 2c6:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);				// Habilita transmissÃ£o e recepÃ§Ã£o
 2ca:	88 e1       	ldi	r24, 0x18	; 24
 2cc:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (3<<UCSZ00);						// Modo assincrono, 8 bits, 1 stop, sem paridade
 2d0:	86 e0       	ldi	r24, 0x06	; 6
 2d2:	80 93 c2 00 	sts	0x00C2, r24
}
 2d6:	08 95       	ret

000002d8 <USART_Transmit>:
//-------------------------------------------------------------------------------------------------------
void USART_Transmit(unsigned char data)
{
 2d8:	98 2f       	mov	r25, r24
	while(!(UCSR0A & (1<<UDRE0)));				// Espera o dado ser enviado
 2da:	e0 ec       	ldi	r30, 0xC0	; 192
 2dc:	f0 e0       	ldi	r31, 0x00	; 0
 2de:	80 81       	ld	r24, Z
 2e0:	85 ff       	sbrs	r24, 5
 2e2:	fd cf       	rjmp	.-6      	; 0x2de <USART_Transmit+0x6>
	UDR0 = data;								// Envia o dado pela porta serial
 2e4:	90 93 c6 00 	sts	0x00C6, r25
}
 2e8:	08 95       	ret

000002ea <USART_StrTx>:
	return UDR0;
}

//-------------------------------------------------------------------------------------------------------
void USART_StrTx(const char* ptr)
{
 2ea:	cf 93       	push	r28
 2ec:	df 93       	push	r29
 2ee:	ec 01       	movw	r28, r24
	while(*ptr != '\0')
 2f0:	88 81       	ld	r24, Y
 2f2:	88 23       	and	r24, r24
 2f4:	31 f0       	breq	.+12     	; 0x302 <USART_StrTx+0x18>
	{
		USART_Transmit(*ptr);
 2f6:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <USART_Transmit>
		ptr++;
 2fa:	21 96       	adiw	r28, 0x01	; 1
}

//-------------------------------------------------------------------------------------------------------
void USART_StrTx(const char* ptr)
{
	while(*ptr != '\0')
 2fc:	88 81       	ld	r24, Y
 2fe:	88 23       	and	r24, r24
 300:	d1 f7       	brne	.-12     	; 0x2f6 <USART_StrTx+0xc>
	{
		USART_Transmit(*ptr);
		ptr++;
	}
}
 302:	df 91       	pop	r29
 304:	cf 91       	pop	r28
 306:	08 95       	ret

00000308 <USART_rxIE>:
//-------------------------------------------------------------------------------------------------------
void USART_rxIE()
{
	UCSR0B |= (1 << RXCIE0 );
 308:	e1 ec       	ldi	r30, 0xC1	; 193
 30a:	f0 e0       	ldi	r31, 0x00	; 0
 30c:	80 81       	ld	r24, Z
 30e:	80 68       	ori	r24, 0x80	; 128
 310:	80 83       	st	Z, r24
}
 312:	08 95       	ret

00000314 <strstr>:
 314:	fb 01       	movw	r30, r22
 316:	51 91       	ld	r21, Z+
 318:	55 23       	and	r21, r21
 31a:	a9 f0       	breq	.+42     	; 0x346 <strstr+0x32>
 31c:	bf 01       	movw	r22, r30
 31e:	dc 01       	movw	r26, r24
 320:	4d 91       	ld	r20, X+
 322:	45 17       	cp	r20, r21
 324:	41 11       	cpse	r20, r1
 326:	e1 f7       	brne	.-8      	; 0x320 <strstr+0xc>
 328:	59 f4       	brne	.+22     	; 0x340 <strstr+0x2c>
 32a:	cd 01       	movw	r24, r26
 32c:	01 90       	ld	r0, Z+
 32e:	00 20       	and	r0, r0
 330:	49 f0       	breq	.+18     	; 0x344 <strstr+0x30>
 332:	4d 91       	ld	r20, X+
 334:	40 15       	cp	r20, r0
 336:	41 11       	cpse	r20, r1
 338:	c9 f3       	breq	.-14     	; 0x32c <strstr+0x18>
 33a:	fb 01       	movw	r30, r22
 33c:	41 11       	cpse	r20, r1
 33e:	ef cf       	rjmp	.-34     	; 0x31e <strstr+0xa>
 340:	81 e0       	ldi	r24, 0x01	; 1
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	01 97       	sbiw	r24, 0x01	; 1
 346:	08 95       	ret

00000348 <utoa>:
 348:	fb 01       	movw	r30, r22
 34a:	9f 01       	movw	r18, r30
 34c:	42 30       	cpi	r20, 0x02	; 2
 34e:	74 f0       	brlt	.+28     	; 0x36c <utoa+0x24>
 350:	45 32       	cpi	r20, 0x25	; 37
 352:	64 f4       	brge	.+24     	; 0x36c <utoa+0x24>
 354:	64 2f       	mov	r22, r20
 356:	77 27       	eor	r23, r23
 358:	0e 94 ca 01 	call	0x394	; 0x394 <__udivmodhi4>
 35c:	80 5d       	subi	r24, 0xD0	; 208
 35e:	8a 33       	cpi	r24, 0x3A	; 58
 360:	0c f0       	brlt	.+2      	; 0x364 <utoa+0x1c>
 362:	89 5d       	subi	r24, 0xD9	; 217
 364:	81 93       	st	Z+, r24
 366:	cb 01       	movw	r24, r22
 368:	00 97       	sbiw	r24, 0x00	; 0
 36a:	a1 f7       	brne	.-24     	; 0x354 <utoa+0xc>
 36c:	10 82       	st	Z, r1
 36e:	c9 01       	movw	r24, r18
 370:	0c 94 ba 01 	jmp	0x374	; 0x374 <strrev>

00000374 <strrev>:
 374:	dc 01       	movw	r26, r24
 376:	fc 01       	movw	r30, r24
 378:	67 2f       	mov	r22, r23
 37a:	71 91       	ld	r23, Z+
 37c:	77 23       	and	r23, r23
 37e:	e1 f7       	brne	.-8      	; 0x378 <strrev+0x4>
 380:	32 97       	sbiw	r30, 0x02	; 2
 382:	04 c0       	rjmp	.+8      	; 0x38c <strrev+0x18>
 384:	7c 91       	ld	r23, X
 386:	6d 93       	st	X+, r22
 388:	70 83       	st	Z, r23
 38a:	62 91       	ld	r22, -Z
 38c:	ae 17       	cp	r26, r30
 38e:	bf 07       	cpc	r27, r31
 390:	c8 f3       	brcs	.-14     	; 0x384 <strrev+0x10>
 392:	08 95       	ret

00000394 <__udivmodhi4>:
 394:	aa 1b       	sub	r26, r26
 396:	bb 1b       	sub	r27, r27
 398:	51 e1       	ldi	r21, 0x11	; 17
 39a:	07 c0       	rjmp	.+14     	; 0x3aa <__udivmodhi4_ep>

0000039c <__udivmodhi4_loop>:
 39c:	aa 1f       	adc	r26, r26
 39e:	bb 1f       	adc	r27, r27
 3a0:	a6 17       	cp	r26, r22
 3a2:	b7 07       	cpc	r27, r23
 3a4:	10 f0       	brcs	.+4      	; 0x3aa <__udivmodhi4_ep>
 3a6:	a6 1b       	sub	r26, r22
 3a8:	b7 0b       	sbc	r27, r23

000003aa <__udivmodhi4_ep>:
 3aa:	88 1f       	adc	r24, r24
 3ac:	99 1f       	adc	r25, r25
 3ae:	5a 95       	dec	r21
 3b0:	a9 f7       	brne	.-22     	; 0x39c <__udivmodhi4_loop>
 3b2:	80 95       	com	r24
 3b4:	90 95       	com	r25
 3b6:	bc 01       	movw	r22, r24
 3b8:	cd 01       	movw	r24, r26
 3ba:	08 95       	ret

000003bc <_exit>:
 3bc:	f8 94       	cli

000003be <__stop_program>:
 3be:	ff cf       	rjmp	.-2      	; 0x3be <__stop_program>
