
EX09.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  000009ca  00000a3e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009ca  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .debug_aranges 00000078  00000000  00000000  00000a56  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000c8  00000000  00000000  00000ace  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000656  00000000  00000000  00000b96  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000225  00000000  00000000  000011ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000546  00000000  00000000  00001411  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000b0  00000000  00000000  00001958  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001cf  00000000  00000000  00001a08  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000293  00000000  00000000  00001bd7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000b0  00000000  00000000  00001e6a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
{
  LCD_Write_Data(0, CmdLCD);     //RS = 0, -> COMANDO A SER PROCESSADO
}

void DisplayLCD_Chr_Cp( char Tchar)
{
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea ec       	ldi	r30, 0xCA	; 202
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a8 31       	cpi	r26, 0x18	; 24
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>
  8a:	0e 94 a9 01 	call	0x352	; 0x352 <main>
  8e:	0c 94 e3 04 	jmp	0x9c6	; 0x9c6 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <LCD_Enable>:
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  96:	95 ed       	ldi	r25, 0xD5	; 213
  98:	89 2f       	mov	r24, r25
  9a:	8a 95       	dec	r24
  9c:	f1 f7       	brne	.-4      	; 0x9a <LCD_Enable+0x4>
}

void LCD_Enable(void)  //INSTRUÇÃO DE CLOCK PARA O LCD
{
  _delay_us(40);
  LCD_EN_IO = 1;
  9e:	e5 e2       	ldi	r30, 0x25	; 37
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	80 81       	ld	r24, Z
  a4:	82 60       	ori	r24, 0x02	; 2
  a6:	80 83       	st	Z, r24
  a8:	89 2f       	mov	r24, r25
  aa:	8a 95       	dec	r24
  ac:	f1 f7       	brne	.-4      	; 0xaa <LCD_Enable+0x14>
  _delay_us(40);
  LCD_EN_IO = 0;
  ae:	80 81       	ld	r24, Z
  b0:	8d 7f       	andi	r24, 0xFD	; 253
  b2:	80 83       	st	Z, r24
  b4:	9a 95       	dec	r25
  b6:	f1 f7       	brne	.-4      	; 0xb4 <LCD_Enable+0x1e>
  _delay_us(40);
}
  b8:	08 95       	ret

000000ba <LCD_Write_Data>:
#include <util/delay.h>


//****************************Funções
void LCD_Write_Data(unsigned char RS, unsigned char Data)
{
  ba:	ff 92       	push	r15
  bc:	0f 93       	push	r16
  be:	1f 93       	push	r17
  c0:	f6 2e       	mov	r15, r22
//             == 00010000 (ou 0x10)
//                --------
//              = 1        (retorna 1)
//*****************************************************************************

   LCD_RS_IO  = RS;     //0
  c2:	81 70       	andi	r24, 0x01	; 1
  c4:	e5 e2       	ldi	r30, 0x25	; 37
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	90 81       	ld	r25, Z
  ca:	9e 7f       	andi	r25, 0xFE	; 254
  cc:	98 2b       	or	r25, r24
  ce:	90 83       	st	Z, r25
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  d0:	80 e4       	ldi	r24, 0x40	; 64
  d2:	9f e1       	ldi	r25, 0x1F	; 31
  d4:	01 97       	sbiw	r24, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <LCD_Write_Data+0x1a>

   _delay_ms(2);
   LCD_DATA4_IO = ((Data & 0x10) == 0x10);
  d8:	46 2f       	mov	r20, r22
  da:	50 e0       	ldi	r21, 0x00	; 0
  dc:	ca 01       	movw	r24, r20
  de:	92 95       	swap	r25
  e0:	82 95       	swap	r24
  e2:	8f 70       	andi	r24, 0x0F	; 15
  e4:	89 27       	eor	r24, r25
  e6:	9f 70       	andi	r25, 0x0F	; 15
  e8:	89 27       	eor	r24, r25
  ea:	81 70       	andi	r24, 0x01	; 1
  ec:	eb e2       	ldi	r30, 0x2B	; 43
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	82 95       	swap	r24
  f2:	80 7f       	andi	r24, 0xF0	; 240
  f4:	20 81       	ld	r18, Z
  f6:	2f 7e       	andi	r18, 0xEF	; 239
  f8:	28 2b       	or	r18, r24
  fa:	20 83       	st	Z, r18
   LCD_DATA5_IO = ((Data & 0x20) == 0x20);
  fc:	ca 01       	movw	r24, r20
  fe:	96 95       	lsr	r25
 100:	87 95       	ror	r24
 102:	92 95       	swap	r25
 104:	82 95       	swap	r24
 106:	8f 70       	andi	r24, 0x0F	; 15
 108:	89 27       	eor	r24, r25
 10a:	9f 70       	andi	r25, 0x0F	; 15
 10c:	89 27       	eor	r24, r25
 10e:	81 70       	andi	r24, 0x01	; 1
 110:	82 95       	swap	r24
 112:	88 0f       	add	r24, r24
 114:	80 7e       	andi	r24, 0xE0	; 224
 116:	20 81       	ld	r18, Z
 118:	2f 7d       	andi	r18, 0xDF	; 223
 11a:	28 2b       	or	r18, r24
 11c:	20 83       	st	Z, r18
   LCD_DATA6_IO = ((Data & 0x40) == 0x40);
 11e:	00 24       	eor	r0, r0
 120:	44 0f       	add	r20, r20
 122:	55 1f       	adc	r21, r21
 124:	00 1c       	adc	r0, r0
 126:	44 0f       	add	r20, r20
 128:	55 1f       	adc	r21, r21
 12a:	00 1c       	adc	r0, r0
 12c:	45 2f       	mov	r20, r21
 12e:	50 2d       	mov	r21, r0
 130:	41 70       	andi	r20, 0x01	; 1
 132:	42 95       	swap	r20
 134:	44 0f       	add	r20, r20
 136:	44 0f       	add	r20, r20
 138:	40 7c       	andi	r20, 0xC0	; 192
 13a:	80 81       	ld	r24, Z
 13c:	8f 7b       	andi	r24, 0xBF	; 191
 13e:	84 2b       	or	r24, r20
 140:	80 83       	st	Z, r24
   LCD_DATA7_IO = ((Data & 0x80) == 0x80);
 142:	66 23       	and	r22, r22
 144:	96 2f       	mov	r25, r22
 146:	99 1f       	adc	r25, r25
 148:	99 27       	eor	r25, r25
 14a:	99 1f       	adc	r25, r25
 14c:	0b e2       	ldi	r16, 0x2B	; 43
 14e:	10 e0       	ldi	r17, 0x00	; 0
 150:	97 95       	ror	r25
 152:	99 27       	eor	r25, r25
 154:	97 95       	ror	r25
 156:	80 81       	ld	r24, Z
 158:	8f 77       	andi	r24, 0x7F	; 127
 15a:	89 2b       	or	r24, r25
 15c:	80 83       	st	Z, r24

   LCD_Enable();
 15e:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_Enable>

   Data = Data << 4; //Rotaciona o nibble o LSB para a posição MSB
 162:	ff 0c       	add	r15, r15
 164:	ff 0c       	add	r15, r15
 166:	ff 0c       	add	r15, r15
 168:	ff 0c       	add	r15, r15
   LCD_DATA4_IO = ((Data & 0x10) == 0x10);
 16a:	4f 2d       	mov	r20, r15
 16c:	50 e0       	ldi	r21, 0x00	; 0
 16e:	ca 01       	movw	r24, r20
 170:	92 95       	swap	r25
 172:	82 95       	swap	r24
 174:	8f 70       	andi	r24, 0x0F	; 15
 176:	89 27       	eor	r24, r25
 178:	9f 70       	andi	r25, 0x0F	; 15
 17a:	89 27       	eor	r24, r25
 17c:	81 70       	andi	r24, 0x01	; 1
 17e:	82 95       	swap	r24
 180:	80 7f       	andi	r24, 0xF0	; 240
 182:	f8 01       	movw	r30, r16
 184:	20 81       	ld	r18, Z
 186:	2f 7e       	andi	r18, 0xEF	; 239
 188:	28 2b       	or	r18, r24
 18a:	20 83       	st	Z, r18
   LCD_DATA5_IO = ((Data & 0x20) == 0x20);
 18c:	ca 01       	movw	r24, r20
 18e:	96 95       	lsr	r25
 190:	87 95       	ror	r24
 192:	92 95       	swap	r25
 194:	82 95       	swap	r24
 196:	8f 70       	andi	r24, 0x0F	; 15
 198:	89 27       	eor	r24, r25
 19a:	9f 70       	andi	r25, 0x0F	; 15
 19c:	89 27       	eor	r24, r25
 19e:	81 70       	andi	r24, 0x01	; 1
 1a0:	82 95       	swap	r24
 1a2:	88 0f       	add	r24, r24
 1a4:	80 7e       	andi	r24, 0xE0	; 224
 1a6:	20 81       	ld	r18, Z
 1a8:	2f 7d       	andi	r18, 0xDF	; 223
 1aa:	28 2b       	or	r18, r24
 1ac:	20 83       	st	Z, r18
   LCD_DATA6_IO = ((Data & 0x40) == 0x40);
 1ae:	00 24       	eor	r0, r0
 1b0:	44 0f       	add	r20, r20
 1b2:	55 1f       	adc	r21, r21
 1b4:	00 1c       	adc	r0, r0
 1b6:	44 0f       	add	r20, r20
 1b8:	55 1f       	adc	r21, r21
 1ba:	00 1c       	adc	r0, r0
 1bc:	45 2f       	mov	r20, r21
 1be:	50 2d       	mov	r21, r0
 1c0:	41 70       	andi	r20, 0x01	; 1
 1c2:	42 95       	swap	r20
 1c4:	44 0f       	add	r20, r20
 1c6:	44 0f       	add	r20, r20
 1c8:	40 7c       	andi	r20, 0xC0	; 192
 1ca:	80 81       	ld	r24, Z
 1cc:	8f 7b       	andi	r24, 0xBF	; 191
 1ce:	84 2b       	or	r24, r20
 1d0:	80 83       	st	Z, r24
   LCD_DATA7_IO = ((Data & 0x80) == 0x80);
 1d2:	ff 20       	and	r15, r15
 1d4:	ff 1c       	adc	r15, r15
 1d6:	ff 24       	eor	r15, r15
 1d8:	ff 1c       	adc	r15, r15
 1da:	f7 94       	ror	r15
 1dc:	ff 24       	eor	r15, r15
 1de:	f7 94       	ror	r15
 1e0:	80 81       	ld	r24, Z
 1e2:	8f 77       	andi	r24, 0x7F	; 127
 1e4:	8f 29       	or	r24, r15
 1e6:	80 83       	st	Z, r24

   LCD_Enable();
 1e8:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_Enable>


}
 1ec:	1f 91       	pop	r17
 1ee:	0f 91       	pop	r16
 1f0:	ff 90       	pop	r15
 1f2:	08 95       	ret

000001f4 <DisplayLCD_Cmd>:
  LCD_EN_IO = 0;
  _delay_us(40);
}

void DisplayLCD_Cmd(unsigned char CmdLCD)
{
 1f4:	68 2f       	mov	r22, r24
  LCD_Write_Data(0, CmdLCD);     //RS = 0, -> COMANDO A SER PROCESSADO
 1f6:	80 e0       	ldi	r24, 0x00	; 0
 1f8:	0e 94 5d 00 	call	0xba	; 0xba <LCD_Write_Data>
}
 1fc:	08 95       	ret

000001fe <DisplayLCD_Init>:
   LCD_Write_Data(1, Tchar);    //RS = 1 -> DADO A SER ESCRITO
}

//funções
void DisplayLCD_Init( void )
{ 
 1fe:	ef 92       	push	r14
 200:	ff 92       	push	r15
 202:	0f 93       	push	r16
 204:	1f 93       	push	r17
 LCD_DATA4_TRIS = 1; LCD_DATA4_IO = 0;
 206:	aa e2       	ldi	r26, 0x2A	; 42
 208:	b0 e0       	ldi	r27, 0x00	; 0
 20a:	8c 91       	ld	r24, X
 20c:	80 61       	ori	r24, 0x10	; 16
 20e:	8c 93       	st	X, r24
 210:	eb e2       	ldi	r30, 0x2B	; 43
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	80 81       	ld	r24, Z
 216:	8f 7e       	andi	r24, 0xEF	; 239
 218:	80 83       	st	Z, r24
 LCD_DATA5_TRIS = 1; LCD_DATA5_IO = 0;
 21a:	8c 91       	ld	r24, X
 21c:	80 62       	ori	r24, 0x20	; 32
 21e:	8c 93       	st	X, r24
 220:	80 81       	ld	r24, Z
 222:	8f 7d       	andi	r24, 0xDF	; 223
 224:	80 83       	st	Z, r24
 LCD_DATA6_TRIS = 1; LCD_DATA6_IO = 0;
 226:	8c 91       	ld	r24, X
 228:	80 64       	ori	r24, 0x40	; 64
 22a:	8c 93       	st	X, r24
 22c:	80 81       	ld	r24, Z
 22e:	8f 7b       	andi	r24, 0xBF	; 191
 230:	80 83       	st	Z, r24
 LCD_DATA7_TRIS = 1; LCD_DATA7_IO = 0;
 232:	8c 91       	ld	r24, X
 234:	80 68       	ori	r24, 0x80	; 128
 236:	8c 93       	st	X, r24
 238:	80 81       	ld	r24, Z
 23a:	8f 77       	andi	r24, 0x7F	; 127
 23c:	80 83       	st	Z, r24
 LCD_EN_TRIS = 1; LCD_RS_IO = 0;
 23e:	a4 e2       	ldi	r26, 0x24	; 36
 240:	b0 e0       	ldi	r27, 0x00	; 0
 242:	8c 91       	ld	r24, X
 244:	82 60       	ori	r24, 0x02	; 2
 246:	8c 93       	st	X, r24
 248:	e5 e2       	ldi	r30, 0x25	; 37
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	80 81       	ld	r24, Z
 24e:	8e 7f       	andi	r24, 0xFE	; 254
 250:	80 83       	st	Z, r24
 LCD_RS_TRIS = 1; LCD_RS_IO = 0;
 252:	8c 91       	ld	r24, X
 254:	81 60       	ori	r24, 0x01	; 1
 256:	8c 93       	st	X, r24
 258:	80 81       	ld	r24, Z
 25a:	8e 7f       	andi	r24, 0xFE	; 254
 25c:	80 83       	st	Z, r24
 25e:	28 ee       	ldi	r18, 0xE8	; 232
 260:	33 e0       	ldi	r19, 0x03	; 3
 262:	40 e9       	ldi	r20, 0x90	; 144
 264:	51 e0       	ldi	r21, 0x01	; 1
 266:	ca 01       	movw	r24, r20
 268:	01 97       	sbiw	r24, 0x01	; 1
 26a:	f1 f7       	brne	.-4      	; 0x268 <DisplayLCD_Init+0x6a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 26c:	21 50       	subi	r18, 0x01	; 1
 26e:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 270:	d1 f7       	brne	.-12     	; 0x266 <DisplayLCD_Init+0x68>

 _delay_ms(100);  //Tempo necessário para inicialização do LCD após power-on

 LCD_DATA4_IO = 1;
 272:	0b e2       	ldi	r16, 0x2B	; 43
 274:	10 e0       	ldi	r17, 0x00	; 0
 276:	f8 01       	movw	r30, r16
 278:	80 81       	ld	r24, Z
 27a:	80 61       	ori	r24, 0x10	; 16
 27c:	80 83       	st	Z, r24
 LCD_DATA5_IO = 1;
 27e:	80 81       	ld	r24, Z
 280:	80 62       	ori	r24, 0x20	; 32
 282:	80 83       	st	Z, r24
 LCD_Enable();
 284:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_Enable>
 LCD_Enable();
 288:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_Enable>
 LCD_Enable();
 28c:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_Enable>
 290:	0f 2e       	mov	r0, r31
 292:	f0 ea       	ldi	r31, 0xA0	; 160
 294:	ef 2e       	mov	r14, r31
 296:	ff e0       	ldi	r31, 0x0F	; 15
 298:	ff 2e       	mov	r15, r31
 29a:	f0 2d       	mov	r31, r0
 29c:	c7 01       	movw	r24, r14
 29e:	01 97       	sbiw	r24, 0x01	; 1
 2a0:	f1 f7       	brne	.-4      	; 0x29e <DisplayLCD_Init+0xa0>

 _delay_ms(1);

 LCD_DATA4_IO = 0;
 2a2:	f8 01       	movw	r30, r16
 2a4:	80 81       	ld	r24, Z
 2a6:	8f 7e       	andi	r24, 0xEF	; 239
 2a8:	80 83       	st	Z, r24
 LCD_DATA5_IO = 1;
 2aa:	80 81       	ld	r24, Z
 2ac:	80 62       	ori	r24, 0x20	; 32
 2ae:	80 83       	st	Z, r24
 LCD_Enable();
 2b0:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_Enable>
 LCD_Enable();
 2b4:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_Enable>
 LCD_Enable();
 2b8:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_Enable>
 2bc:	c7 01       	movw	r24, r14
 2be:	01 97       	sbiw	r24, 0x01	; 1
 2c0:	f1 f7       	brne	.-4      	; 0x2be <DisplayLCD_Init+0xc0>

 _delay_ms(1);


 DisplayLCD_Cmd(0X28); //2X linhas 7x5 em modo 4bits
 2c2:	88 e2       	ldi	r24, 0x28	; 40
 2c4:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <DisplayLCD_Cmd>
 DisplayLCD_Cmd(0X0C);
 2c8:	8c e0       	ldi	r24, 0x0C	; 12
 2ca:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <DisplayLCD_Cmd>
 DisplayLCD_Cmd(0X06);
 2ce:	86 e0       	ldi	r24, 0x06	; 6
 2d0:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <DisplayLCD_Cmd>
 DisplayLCD_Cmd(0X01);
 2d4:	81 e0       	ldi	r24, 0x01	; 1
 2d6:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <DisplayLCD_Cmd>
 2da:	28 ee       	ldi	r18, 0xE8	; 232
 2dc:	33 e0       	ldi	r19, 0x03	; 3
 2de:	40 e9       	ldi	r20, 0x90	; 144
 2e0:	51 e0       	ldi	r21, 0x01	; 1
 2e2:	ca 01       	movw	r24, r20
 2e4:	01 97       	sbiw	r24, 0x01	; 1
 2e6:	f1 f7       	brne	.-4      	; 0x2e4 <DisplayLCD_Init+0xe6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2e8:	21 50       	subi	r18, 0x01	; 1
 2ea:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2ec:	d1 f7       	brne	.-12     	; 0x2e2 <DisplayLCD_Init+0xe4>
 
 _delay_ms(100);

}
 2ee:	1f 91       	pop	r17
 2f0:	0f 91       	pop	r16
 2f2:	ff 90       	pop	r15
 2f4:	ef 90       	pop	r14
 2f6:	08 95       	ret

000002f8 <DisplayLCD_Out_Cp>:
}


//DisplayLCD_Out_Cp("BOM DIA");
void DisplayLCD_Out_Cp( char * Ponteiro)
{
 2f8:	cf 93       	push	r28
 2fa:	df 93       	push	r29
 2fc:	ec 01       	movw	r28, r24
 // LCD_RS_IO = 1;  //ESCREVER UM DADO
  while(*Ponteiro) //loop até encontrar o caractere NULL (ZERO)
 2fe:	68 81       	ld	r22, Y
 300:	66 23       	and	r22, r22
 302:	39 f0       	breq	.+14     	; 0x312 <DisplayLCD_Out_Cp+0x1a>
  {
    LCD_Write_Data(1,*Ponteiro);  //RS =1, ESCREVENDO NO LCD
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	0e 94 5d 00 	call	0xba	; 0xba <LCD_Write_Data>
    //LCD_Enable();
    ++Ponteiro;
 30a:	21 96       	adiw	r28, 0x01	; 1

//DisplayLCD_Out_Cp("BOM DIA");
void DisplayLCD_Out_Cp( char * Ponteiro)
{
 // LCD_RS_IO = 1;  //ESCREVER UM DADO
  while(*Ponteiro) //loop até encontrar o caractere NULL (ZERO)
 30c:	68 81       	ld	r22, Y
 30e:	66 23       	and	r22, r22
 310:	c9 f7       	brne	.-14     	; 0x304 <DisplayLCD_Out_Cp+0xc>
    LCD_Write_Data(1,*Ponteiro);  //RS =1, ESCREVENDO NO LCD
    //LCD_Enable();
    ++Ponteiro;
  }

}
 312:	df 91       	pop	r29
 314:	cf 91       	pop	r28
 316:	08 95       	ret

00000318 <DisplayLCD_Out>:

}

//DisplayLCD_Out(1,2, "BOM DIA");
void DisplayLCD_Out(unsigned char Linha, unsigned char Coluna, char *TextoLCD)
{
 318:	cf 93       	push	r28
 31a:	df 93       	push	r29
 31c:	98 2f       	mov	r25, r24
 31e:	ea 01       	movw	r28, r20
  LCD_RS_IO = 0; //TRATAR PRIMEIRO AS COORDENADAS X E Y
 320:	e5 e2       	ldi	r30, 0x25	; 37
 322:	f0 e0       	ldi	r31, 0x00	; 0
 324:	80 81       	ld	r24, Z
 326:	8e 7f       	andi	r24, 0xFE	; 254
 328:	80 83       	st	Z, r24
  switch(Linha)
 32a:	91 30       	cpi	r25, 0x01	; 1
 32c:	19 f0       	breq	.+6      	; 0x334 <DisplayLCD_Out+0x1c>
 32e:	92 30       	cpi	r25, 0x02	; 2
 330:	51 f4       	brne	.+20     	; 0x346 <DisplayLCD_Out+0x2e>
 332:	05 c0       	rjmp	.+10     	; 0x33e <DisplayLCD_Out+0x26>
  {
    case 1: {
            Coluna =  Coluna + 0X7F;  // 2 + 0X7F = 0X81
            LCD_Write_Data(0,Coluna); //Comando, visto que estamos posicionando o cursor
 334:	61 58       	subi	r22, 0x81	; 129
 336:	80 e0       	ldi	r24, 0x00	; 0
 338:	0e 94 5d 00 	call	0xba	; 0xba <LCD_Write_Data>
 33c:	04 c0       	rjmp	.+8      	; 0x346 <DisplayLCD_Out+0x2e>
            //LCD_Enable();
            break;
            }
    case 2: {
            Coluna = Coluna + 0xBF;  //2 + 0xBF = 0XC1
            LCD_Write_Data(0,Coluna);
 33e:	61 54       	subi	r22, 0x41	; 65
 340:	80 e0       	ldi	r24, 0x00	; 0
 342:	0e 94 5d 00 	call	0xba	; 0xba <LCD_Write_Data>
           //LCD_Enable();
            break;
            }
  }
  DisplayLCD_Out_Cp(TextoLCD); //Escreve no LCD "BOM DIA"
 346:	ce 01       	movw	r24, r28
 348:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <DisplayLCD_Out_Cp>
}
 34c:	df 91       	pop	r29
 34e:	cf 91       	pop	r28
 350:	08 95       	ret

00000352 <main>:

/**
 * FunÃ§Ã£o principal e de entrada do programa;
 */
int main( void )
{
 352:	8f 92       	push	r8
 354:	9f 92       	push	r9
 356:	af 92       	push	r10
 358:	bf 92       	push	r11
 35a:	cf 92       	push	r12
 35c:	df 92       	push	r13
 35e:	ef 92       	push	r14
 360:	ff 92       	push	r15
 362:	0f 93       	push	r16
 364:	1f 93       	push	r17
 366:	df 93       	push	r29
 368:	cf 93       	push	r28
 36a:	cd b7       	in	r28, 0x3d	; 61
 36c:	de b7       	in	r29, 0x3e	; 62
 36e:	2a 97       	sbiw	r28, 0x0a	; 10
 370:	0f b6       	in	r0, 0x3f	; 63
 372:	f8 94       	cli
 374:	de bf       	out	0x3e, r29	; 62
 376:	0f be       	out	0x3f, r0	; 63
 378:	cd bf       	out	0x3d, r28	; 61
	unsigned int count = 0;
	char string[10];
	/**
	 * Inicializa o Display LCD;
	 */
	 DisplayLCD_Init(); 
 37a:	0e 94 ff 00 	call	0x1fe	; 0x1fe <DisplayLCD_Init>
	 DisplayLCD_Cmd( LCD_Clear );
 37e:	81 e0       	ldi	r24, 0x01	; 1
 380:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <DisplayLCD_Cmd>
	 DisplayLCD_Cmd( LCD_Cursor_Off );
 384:	8c e0       	ldi	r24, 0x0C	; 12
 386:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <DisplayLCD_Cmd>
	 DisplayLCD_Out(1, 1, (char*)"Display 16x2" );
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	61 e0       	ldi	r22, 0x01	; 1
 38e:	40 e0       	ldi	r20, 0x00	; 0
 390:	51 e0       	ldi	r21, 0x01	; 1
 392:	0e 94 8c 01 	call	0x318	; 0x318 <DisplayLCD_Out>
	 DisplayLCD_Out(2, 1, "Count:" );
 396:	82 e0       	ldi	r24, 0x02	; 2
 398:	61 e0       	ldi	r22, 0x01	; 1
 39a:	4d e0       	ldi	r20, 0x0D	; 13
 39c:	51 e0       	ldi	r21, 0x01	; 1
 39e:	0e 94 8c 01 	call	0x318	; 0x318 <DisplayLCD_Out>
 3a2:	ee 24       	eor	r14, r14
 3a4:	ff 24       	eor	r15, r15
	 
    for(;;) 
    {
		count++;
		sprintf( (char*) string, "%d ", count );
 3a6:	6e 01       	movw	r12, r28
 3a8:	08 94       	sec
 3aa:	c1 1c       	adc	r12, r1
 3ac:	d1 1c       	adc	r13, r1
 3ae:	0f 2e       	mov	r0, r31
 3b0:	f4 e1       	ldi	r31, 0x14	; 20
 3b2:	af 2e       	mov	r10, r31
 3b4:	f1 e0       	ldi	r31, 0x01	; 1
 3b6:	bf 2e       	mov	r11, r31
 3b8:	f0 2d       	mov	r31, r0
		DisplayLCD_Out(2, 7, (char*) string ); 
 3ba:	0f 2e       	mov	r0, r31
 3bc:	f0 ed       	ldi	r31, 0xD0	; 208
 3be:	8f 2e       	mov	r8, r31
 3c0:	f7 e0       	ldi	r31, 0x07	; 7
 3c2:	9f 2e       	mov	r9, r31
 3c4:	f0 2d       	mov	r31, r0
 3c6:	00 e9       	ldi	r16, 0x90	; 144
 3c8:	11 e0       	ldi	r17, 0x01	; 1
	 DisplayLCD_Out(1, 1, (char*)"Display 16x2" );
	 DisplayLCD_Out(2, 1, "Count:" );
	 
    for(;;) 
    {
		count++;
 3ca:	08 94       	sec
 3cc:	e1 1c       	adc	r14, r1
 3ce:	f1 1c       	adc	r15, r1
		sprintf( (char*) string, "%d ", count );
 3d0:	00 d0       	rcall	.+0      	; 0x3d2 <main+0x80>
 3d2:	00 d0       	rcall	.+0      	; 0x3d4 <main+0x82>
 3d4:	00 d0       	rcall	.+0      	; 0x3d6 <main+0x84>
 3d6:	ed b7       	in	r30, 0x3d	; 61
 3d8:	fe b7       	in	r31, 0x3e	; 62
 3da:	31 96       	adiw	r30, 0x01	; 1
 3dc:	d1 82       	std	Z+1, r13	; 0x01
 3de:	c0 82       	st	Z, r12
 3e0:	b3 82       	std	Z+3, r11	; 0x03
 3e2:	a2 82       	std	Z+2, r10	; 0x02
 3e4:	f5 82       	std	Z+5, r15	; 0x05
 3e6:	e4 82       	std	Z+4, r14	; 0x04
 3e8:	0e 94 0b 02 	call	0x416	; 0x416 <sprintf>
		DisplayLCD_Out(2, 7, (char*) string ); 
 3ec:	8d b7       	in	r24, 0x3d	; 61
 3ee:	9e b7       	in	r25, 0x3e	; 62
 3f0:	06 96       	adiw	r24, 0x06	; 6
 3f2:	0f b6       	in	r0, 0x3f	; 63
 3f4:	f8 94       	cli
 3f6:	9e bf       	out	0x3e, r25	; 62
 3f8:	0f be       	out	0x3f, r0	; 63
 3fa:	8d bf       	out	0x3d, r24	; 61
 3fc:	82 e0       	ldi	r24, 0x02	; 2
 3fe:	67 e0       	ldi	r22, 0x07	; 7
 400:	a6 01       	movw	r20, r12
 402:	0e 94 8c 01 	call	0x318	; 0x318 <DisplayLCD_Out>
 406:	94 01       	movw	r18, r8
 408:	c8 01       	movw	r24, r16
 40a:	01 97       	sbiw	r24, 0x01	; 1
 40c:	f1 f7       	brne	.-4      	; 0x40a <main+0xb8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 40e:	21 50       	subi	r18, 0x01	; 1
 410:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 412:	d1 f7       	brne	.-12     	; 0x408 <main+0xb6>
 414:	da cf       	rjmp	.-76     	; 0x3ca <main+0x78>

00000416 <sprintf>:
 416:	ae e0       	ldi	r26, 0x0E	; 14
 418:	b0 e0       	ldi	r27, 0x00	; 0
 41a:	e1 e1       	ldi	r30, 0x11	; 17
 41c:	f2 e0       	ldi	r31, 0x02	; 2
 41e:	0c 94 ba 04 	jmp	0x974	; 0x974 <__prologue_saves__+0x1c>
 422:	0d 89       	ldd	r16, Y+21	; 0x15
 424:	1e 89       	ldd	r17, Y+22	; 0x16
 426:	86 e0       	ldi	r24, 0x06	; 6
 428:	8c 83       	std	Y+4, r24	; 0x04
 42a:	1a 83       	std	Y+2, r17	; 0x02
 42c:	09 83       	std	Y+1, r16	; 0x01
 42e:	8f ef       	ldi	r24, 0xFF	; 255
 430:	9f e7       	ldi	r25, 0x7F	; 127
 432:	9e 83       	std	Y+6, r25	; 0x06
 434:	8d 83       	std	Y+5, r24	; 0x05
 436:	9e 01       	movw	r18, r28
 438:	27 5e       	subi	r18, 0xE7	; 231
 43a:	3f 4f       	sbci	r19, 0xFF	; 255
 43c:	ce 01       	movw	r24, r28
 43e:	01 96       	adiw	r24, 0x01	; 1
 440:	6f 89       	ldd	r22, Y+23	; 0x17
 442:	78 8d       	ldd	r23, Y+24	; 0x18
 444:	a9 01       	movw	r20, r18
 446:	0e 94 2f 02 	call	0x45e	; 0x45e <vfprintf>
 44a:	2f 81       	ldd	r18, Y+7	; 0x07
 44c:	38 85       	ldd	r19, Y+8	; 0x08
 44e:	02 0f       	add	r16, r18
 450:	13 1f       	adc	r17, r19
 452:	f8 01       	movw	r30, r16
 454:	10 82       	st	Z, r1
 456:	2e 96       	adiw	r28, 0x0e	; 14
 458:	e4 e0       	ldi	r30, 0x04	; 4
 45a:	0c 94 d6 04 	jmp	0x9ac	; 0x9ac <__epilogue_restores__+0x1c>

0000045e <vfprintf>:
 45e:	ab e0       	ldi	r26, 0x0B	; 11
 460:	b0 e0       	ldi	r27, 0x00	; 0
 462:	e5 e3       	ldi	r30, 0x35	; 53
 464:	f2 e0       	ldi	r31, 0x02	; 2
 466:	0c 94 ac 04 	jmp	0x958	; 0x958 <__prologue_saves__>
 46a:	3c 01       	movw	r6, r24
 46c:	2b 01       	movw	r4, r22
 46e:	5a 01       	movw	r10, r20
 470:	fc 01       	movw	r30, r24
 472:	17 82       	std	Z+7, r1	; 0x07
 474:	16 82       	std	Z+6, r1	; 0x06
 476:	83 81       	ldd	r24, Z+3	; 0x03
 478:	81 fd       	sbrc	r24, 1
 47a:	03 c0       	rjmp	.+6      	; 0x482 <vfprintf+0x24>
 47c:	6f ef       	ldi	r22, 0xFF	; 255
 47e:	7f ef       	ldi	r23, 0xFF	; 255
 480:	c6 c1       	rjmp	.+908    	; 0x80e <vfprintf+0x3b0>
 482:	9a e0       	ldi	r25, 0x0A	; 10
 484:	89 2e       	mov	r8, r25
 486:	1e 01       	movw	r2, r28
 488:	08 94       	sec
 48a:	21 1c       	adc	r2, r1
 48c:	31 1c       	adc	r3, r1
 48e:	f3 01       	movw	r30, r6
 490:	23 81       	ldd	r18, Z+3	; 0x03
 492:	f2 01       	movw	r30, r4
 494:	23 fd       	sbrc	r18, 3
 496:	85 91       	lpm	r24, Z+
 498:	23 ff       	sbrs	r18, 3
 49a:	81 91       	ld	r24, Z+
 49c:	2f 01       	movw	r4, r30
 49e:	88 23       	and	r24, r24
 4a0:	09 f4       	brne	.+2      	; 0x4a4 <vfprintf+0x46>
 4a2:	b2 c1       	rjmp	.+868    	; 0x808 <vfprintf+0x3aa>
 4a4:	85 32       	cpi	r24, 0x25	; 37
 4a6:	39 f4       	brne	.+14     	; 0x4b6 <vfprintf+0x58>
 4a8:	23 fd       	sbrc	r18, 3
 4aa:	85 91       	lpm	r24, Z+
 4ac:	23 ff       	sbrs	r18, 3
 4ae:	81 91       	ld	r24, Z+
 4b0:	2f 01       	movw	r4, r30
 4b2:	85 32       	cpi	r24, 0x25	; 37
 4b4:	29 f4       	brne	.+10     	; 0x4c0 <vfprintf+0x62>
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	b3 01       	movw	r22, r6
 4ba:	0e 94 22 04 	call	0x844	; 0x844 <fputc>
 4be:	e7 cf       	rjmp	.-50     	; 0x48e <vfprintf+0x30>
 4c0:	98 2f       	mov	r25, r24
 4c2:	ff 24       	eor	r15, r15
 4c4:	ee 24       	eor	r14, r14
 4c6:	99 24       	eor	r9, r9
 4c8:	ff e1       	ldi	r31, 0x1F	; 31
 4ca:	ff 15       	cp	r31, r15
 4cc:	d0 f0       	brcs	.+52     	; 0x502 <vfprintf+0xa4>
 4ce:	9b 32       	cpi	r25, 0x2B	; 43
 4d0:	69 f0       	breq	.+26     	; 0x4ec <vfprintf+0x8e>
 4d2:	9c 32       	cpi	r25, 0x2C	; 44
 4d4:	28 f4       	brcc	.+10     	; 0x4e0 <vfprintf+0x82>
 4d6:	90 32       	cpi	r25, 0x20	; 32
 4d8:	59 f0       	breq	.+22     	; 0x4f0 <vfprintf+0x92>
 4da:	93 32       	cpi	r25, 0x23	; 35
 4dc:	91 f4       	brne	.+36     	; 0x502 <vfprintf+0xa4>
 4de:	0e c0       	rjmp	.+28     	; 0x4fc <vfprintf+0x9e>
 4e0:	9d 32       	cpi	r25, 0x2D	; 45
 4e2:	49 f0       	breq	.+18     	; 0x4f6 <vfprintf+0x98>
 4e4:	90 33       	cpi	r25, 0x30	; 48
 4e6:	69 f4       	brne	.+26     	; 0x502 <vfprintf+0xa4>
 4e8:	41 e0       	ldi	r20, 0x01	; 1
 4ea:	24 c0       	rjmp	.+72     	; 0x534 <vfprintf+0xd6>
 4ec:	52 e0       	ldi	r21, 0x02	; 2
 4ee:	f5 2a       	or	r15, r21
 4f0:	84 e0       	ldi	r24, 0x04	; 4
 4f2:	f8 2a       	or	r15, r24
 4f4:	28 c0       	rjmp	.+80     	; 0x546 <vfprintf+0xe8>
 4f6:	98 e0       	ldi	r25, 0x08	; 8
 4f8:	f9 2a       	or	r15, r25
 4fa:	25 c0       	rjmp	.+74     	; 0x546 <vfprintf+0xe8>
 4fc:	e0 e1       	ldi	r30, 0x10	; 16
 4fe:	fe 2a       	or	r15, r30
 500:	22 c0       	rjmp	.+68     	; 0x546 <vfprintf+0xe8>
 502:	f7 fc       	sbrc	r15, 7
 504:	29 c0       	rjmp	.+82     	; 0x558 <vfprintf+0xfa>
 506:	89 2f       	mov	r24, r25
 508:	80 53       	subi	r24, 0x30	; 48
 50a:	8a 30       	cpi	r24, 0x0A	; 10
 50c:	70 f4       	brcc	.+28     	; 0x52a <vfprintf+0xcc>
 50e:	f6 fe       	sbrs	r15, 6
 510:	05 c0       	rjmp	.+10     	; 0x51c <vfprintf+0xbe>
 512:	98 9c       	mul	r9, r8
 514:	90 2c       	mov	r9, r0
 516:	11 24       	eor	r1, r1
 518:	98 0e       	add	r9, r24
 51a:	15 c0       	rjmp	.+42     	; 0x546 <vfprintf+0xe8>
 51c:	e8 9c       	mul	r14, r8
 51e:	e0 2c       	mov	r14, r0
 520:	11 24       	eor	r1, r1
 522:	e8 0e       	add	r14, r24
 524:	f0 e2       	ldi	r31, 0x20	; 32
 526:	ff 2a       	or	r15, r31
 528:	0e c0       	rjmp	.+28     	; 0x546 <vfprintf+0xe8>
 52a:	9e 32       	cpi	r25, 0x2E	; 46
 52c:	29 f4       	brne	.+10     	; 0x538 <vfprintf+0xda>
 52e:	f6 fc       	sbrc	r15, 6
 530:	6b c1       	rjmp	.+726    	; 0x808 <vfprintf+0x3aa>
 532:	40 e4       	ldi	r20, 0x40	; 64
 534:	f4 2a       	or	r15, r20
 536:	07 c0       	rjmp	.+14     	; 0x546 <vfprintf+0xe8>
 538:	9c 36       	cpi	r25, 0x6C	; 108
 53a:	19 f4       	brne	.+6      	; 0x542 <vfprintf+0xe4>
 53c:	50 e8       	ldi	r21, 0x80	; 128
 53e:	f5 2a       	or	r15, r21
 540:	02 c0       	rjmp	.+4      	; 0x546 <vfprintf+0xe8>
 542:	98 36       	cpi	r25, 0x68	; 104
 544:	49 f4       	brne	.+18     	; 0x558 <vfprintf+0xfa>
 546:	f2 01       	movw	r30, r4
 548:	23 fd       	sbrc	r18, 3
 54a:	95 91       	lpm	r25, Z+
 54c:	23 ff       	sbrs	r18, 3
 54e:	91 91       	ld	r25, Z+
 550:	2f 01       	movw	r4, r30
 552:	99 23       	and	r25, r25
 554:	09 f0       	breq	.+2      	; 0x558 <vfprintf+0xfa>
 556:	b8 cf       	rjmp	.-144    	; 0x4c8 <vfprintf+0x6a>
 558:	89 2f       	mov	r24, r25
 55a:	85 54       	subi	r24, 0x45	; 69
 55c:	83 30       	cpi	r24, 0x03	; 3
 55e:	18 f0       	brcs	.+6      	; 0x566 <vfprintf+0x108>
 560:	80 52       	subi	r24, 0x20	; 32
 562:	83 30       	cpi	r24, 0x03	; 3
 564:	38 f4       	brcc	.+14     	; 0x574 <vfprintf+0x116>
 566:	44 e0       	ldi	r20, 0x04	; 4
 568:	50 e0       	ldi	r21, 0x00	; 0
 56a:	a4 0e       	add	r10, r20
 56c:	b5 1e       	adc	r11, r21
 56e:	5f e3       	ldi	r21, 0x3F	; 63
 570:	59 83       	std	Y+1, r21	; 0x01
 572:	0f c0       	rjmp	.+30     	; 0x592 <vfprintf+0x134>
 574:	93 36       	cpi	r25, 0x63	; 99
 576:	31 f0       	breq	.+12     	; 0x584 <vfprintf+0x126>
 578:	93 37       	cpi	r25, 0x73	; 115
 57a:	79 f0       	breq	.+30     	; 0x59a <vfprintf+0x13c>
 57c:	93 35       	cpi	r25, 0x53	; 83
 57e:	09 f0       	breq	.+2      	; 0x582 <vfprintf+0x124>
 580:	56 c0       	rjmp	.+172    	; 0x62e <vfprintf+0x1d0>
 582:	20 c0       	rjmp	.+64     	; 0x5c4 <vfprintf+0x166>
 584:	f5 01       	movw	r30, r10
 586:	80 81       	ld	r24, Z
 588:	89 83       	std	Y+1, r24	; 0x01
 58a:	42 e0       	ldi	r20, 0x02	; 2
 58c:	50 e0       	ldi	r21, 0x00	; 0
 58e:	a4 0e       	add	r10, r20
 590:	b5 1e       	adc	r11, r21
 592:	61 01       	movw	r12, r2
 594:	01 e0       	ldi	r16, 0x01	; 1
 596:	10 e0       	ldi	r17, 0x00	; 0
 598:	12 c0       	rjmp	.+36     	; 0x5be <vfprintf+0x160>
 59a:	f5 01       	movw	r30, r10
 59c:	c0 80       	ld	r12, Z
 59e:	d1 80       	ldd	r13, Z+1	; 0x01
 5a0:	f6 fc       	sbrc	r15, 6
 5a2:	03 c0       	rjmp	.+6      	; 0x5aa <vfprintf+0x14c>
 5a4:	6f ef       	ldi	r22, 0xFF	; 255
 5a6:	7f ef       	ldi	r23, 0xFF	; 255
 5a8:	02 c0       	rjmp	.+4      	; 0x5ae <vfprintf+0x150>
 5aa:	69 2d       	mov	r22, r9
 5ac:	70 e0       	ldi	r23, 0x00	; 0
 5ae:	42 e0       	ldi	r20, 0x02	; 2
 5b0:	50 e0       	ldi	r21, 0x00	; 0
 5b2:	a4 0e       	add	r10, r20
 5b4:	b5 1e       	adc	r11, r21
 5b6:	c6 01       	movw	r24, r12
 5b8:	0e 94 17 04 	call	0x82e	; 0x82e <strnlen>
 5bc:	8c 01       	movw	r16, r24
 5be:	5f e7       	ldi	r21, 0x7F	; 127
 5c0:	f5 22       	and	r15, r21
 5c2:	14 c0       	rjmp	.+40     	; 0x5ec <vfprintf+0x18e>
 5c4:	f5 01       	movw	r30, r10
 5c6:	c0 80       	ld	r12, Z
 5c8:	d1 80       	ldd	r13, Z+1	; 0x01
 5ca:	f6 fc       	sbrc	r15, 6
 5cc:	03 c0       	rjmp	.+6      	; 0x5d4 <vfprintf+0x176>
 5ce:	6f ef       	ldi	r22, 0xFF	; 255
 5d0:	7f ef       	ldi	r23, 0xFF	; 255
 5d2:	02 c0       	rjmp	.+4      	; 0x5d8 <vfprintf+0x17a>
 5d4:	69 2d       	mov	r22, r9
 5d6:	70 e0       	ldi	r23, 0x00	; 0
 5d8:	42 e0       	ldi	r20, 0x02	; 2
 5da:	50 e0       	ldi	r21, 0x00	; 0
 5dc:	a4 0e       	add	r10, r20
 5de:	b5 1e       	adc	r11, r21
 5e0:	c6 01       	movw	r24, r12
 5e2:	0e 94 0c 04 	call	0x818	; 0x818 <strnlen_P>
 5e6:	8c 01       	movw	r16, r24
 5e8:	50 e8       	ldi	r21, 0x80	; 128
 5ea:	f5 2a       	or	r15, r21
 5ec:	f3 fe       	sbrs	r15, 3
 5ee:	07 c0       	rjmp	.+14     	; 0x5fe <vfprintf+0x1a0>
 5f0:	1a c0       	rjmp	.+52     	; 0x626 <vfprintf+0x1c8>
 5f2:	80 e2       	ldi	r24, 0x20	; 32
 5f4:	90 e0       	ldi	r25, 0x00	; 0
 5f6:	b3 01       	movw	r22, r6
 5f8:	0e 94 22 04 	call	0x844	; 0x844 <fputc>
 5fc:	ea 94       	dec	r14
 5fe:	8e 2d       	mov	r24, r14
 600:	90 e0       	ldi	r25, 0x00	; 0
 602:	08 17       	cp	r16, r24
 604:	19 07       	cpc	r17, r25
 606:	a8 f3       	brcs	.-22     	; 0x5f2 <vfprintf+0x194>
 608:	0e c0       	rjmp	.+28     	; 0x626 <vfprintf+0x1c8>
 60a:	f6 01       	movw	r30, r12
 60c:	f7 fc       	sbrc	r15, 7
 60e:	85 91       	lpm	r24, Z+
 610:	f7 fe       	sbrs	r15, 7
 612:	81 91       	ld	r24, Z+
 614:	6f 01       	movw	r12, r30
 616:	90 e0       	ldi	r25, 0x00	; 0
 618:	b3 01       	movw	r22, r6
 61a:	0e 94 22 04 	call	0x844	; 0x844 <fputc>
 61e:	e1 10       	cpse	r14, r1
 620:	ea 94       	dec	r14
 622:	01 50       	subi	r16, 0x01	; 1
 624:	10 40       	sbci	r17, 0x00	; 0
 626:	01 15       	cp	r16, r1
 628:	11 05       	cpc	r17, r1
 62a:	79 f7       	brne	.-34     	; 0x60a <vfprintf+0x1ac>
 62c:	ea c0       	rjmp	.+468    	; 0x802 <vfprintf+0x3a4>
 62e:	94 36       	cpi	r25, 0x64	; 100
 630:	11 f0       	breq	.+4      	; 0x636 <vfprintf+0x1d8>
 632:	99 36       	cpi	r25, 0x69	; 105
 634:	69 f5       	brne	.+90     	; 0x690 <vfprintf+0x232>
 636:	f7 fe       	sbrs	r15, 7
 638:	08 c0       	rjmp	.+16     	; 0x64a <vfprintf+0x1ec>
 63a:	f5 01       	movw	r30, r10
 63c:	20 81       	ld	r18, Z
 63e:	31 81       	ldd	r19, Z+1	; 0x01
 640:	42 81       	ldd	r20, Z+2	; 0x02
 642:	53 81       	ldd	r21, Z+3	; 0x03
 644:	84 e0       	ldi	r24, 0x04	; 4
 646:	90 e0       	ldi	r25, 0x00	; 0
 648:	0a c0       	rjmp	.+20     	; 0x65e <vfprintf+0x200>
 64a:	f5 01       	movw	r30, r10
 64c:	80 81       	ld	r24, Z
 64e:	91 81       	ldd	r25, Z+1	; 0x01
 650:	9c 01       	movw	r18, r24
 652:	44 27       	eor	r20, r20
 654:	37 fd       	sbrc	r19, 7
 656:	40 95       	com	r20
 658:	54 2f       	mov	r21, r20
 65a:	82 e0       	ldi	r24, 0x02	; 2
 65c:	90 e0       	ldi	r25, 0x00	; 0
 65e:	a8 0e       	add	r10, r24
 660:	b9 1e       	adc	r11, r25
 662:	9f e6       	ldi	r25, 0x6F	; 111
 664:	f9 22       	and	r15, r25
 666:	57 ff       	sbrs	r21, 7
 668:	09 c0       	rjmp	.+18     	; 0x67c <vfprintf+0x21e>
 66a:	50 95       	com	r21
 66c:	40 95       	com	r20
 66e:	30 95       	com	r19
 670:	21 95       	neg	r18
 672:	3f 4f       	sbci	r19, 0xFF	; 255
 674:	4f 4f       	sbci	r20, 0xFF	; 255
 676:	5f 4f       	sbci	r21, 0xFF	; 255
 678:	e0 e8       	ldi	r30, 0x80	; 128
 67a:	fe 2a       	or	r15, r30
 67c:	ca 01       	movw	r24, r20
 67e:	b9 01       	movw	r22, r18
 680:	a1 01       	movw	r20, r2
 682:	2a e0       	ldi	r18, 0x0A	; 10
 684:	30 e0       	ldi	r19, 0x00	; 0
 686:	0e 94 4e 04 	call	0x89c	; 0x89c <__ultoa_invert>
 68a:	d8 2e       	mov	r13, r24
 68c:	d2 18       	sub	r13, r2
 68e:	40 c0       	rjmp	.+128    	; 0x710 <vfprintf+0x2b2>
 690:	95 37       	cpi	r25, 0x75	; 117
 692:	29 f4       	brne	.+10     	; 0x69e <vfprintf+0x240>
 694:	1f 2d       	mov	r17, r15
 696:	1f 7e       	andi	r17, 0xEF	; 239
 698:	2a e0       	ldi	r18, 0x0A	; 10
 69a:	30 e0       	ldi	r19, 0x00	; 0
 69c:	1d c0       	rjmp	.+58     	; 0x6d8 <vfprintf+0x27a>
 69e:	1f 2d       	mov	r17, r15
 6a0:	19 7f       	andi	r17, 0xF9	; 249
 6a2:	9f 36       	cpi	r25, 0x6F	; 111
 6a4:	61 f0       	breq	.+24     	; 0x6be <vfprintf+0x260>
 6a6:	90 37       	cpi	r25, 0x70	; 112
 6a8:	20 f4       	brcc	.+8      	; 0x6b2 <vfprintf+0x254>
 6aa:	98 35       	cpi	r25, 0x58	; 88
 6ac:	09 f0       	breq	.+2      	; 0x6b0 <vfprintf+0x252>
 6ae:	ac c0       	rjmp	.+344    	; 0x808 <vfprintf+0x3aa>
 6b0:	0f c0       	rjmp	.+30     	; 0x6d0 <vfprintf+0x272>
 6b2:	90 37       	cpi	r25, 0x70	; 112
 6b4:	39 f0       	breq	.+14     	; 0x6c4 <vfprintf+0x266>
 6b6:	98 37       	cpi	r25, 0x78	; 120
 6b8:	09 f0       	breq	.+2      	; 0x6bc <vfprintf+0x25e>
 6ba:	a6 c0       	rjmp	.+332    	; 0x808 <vfprintf+0x3aa>
 6bc:	04 c0       	rjmp	.+8      	; 0x6c6 <vfprintf+0x268>
 6be:	28 e0       	ldi	r18, 0x08	; 8
 6c0:	30 e0       	ldi	r19, 0x00	; 0
 6c2:	0a c0       	rjmp	.+20     	; 0x6d8 <vfprintf+0x27a>
 6c4:	10 61       	ori	r17, 0x10	; 16
 6c6:	14 fd       	sbrc	r17, 4
 6c8:	14 60       	ori	r17, 0x04	; 4
 6ca:	20 e1       	ldi	r18, 0x10	; 16
 6cc:	30 e0       	ldi	r19, 0x00	; 0
 6ce:	04 c0       	rjmp	.+8      	; 0x6d8 <vfprintf+0x27a>
 6d0:	14 fd       	sbrc	r17, 4
 6d2:	16 60       	ori	r17, 0x06	; 6
 6d4:	20 e1       	ldi	r18, 0x10	; 16
 6d6:	32 e0       	ldi	r19, 0x02	; 2
 6d8:	17 ff       	sbrs	r17, 7
 6da:	08 c0       	rjmp	.+16     	; 0x6ec <vfprintf+0x28e>
 6dc:	f5 01       	movw	r30, r10
 6de:	60 81       	ld	r22, Z
 6e0:	71 81       	ldd	r23, Z+1	; 0x01
 6e2:	82 81       	ldd	r24, Z+2	; 0x02
 6e4:	93 81       	ldd	r25, Z+3	; 0x03
 6e6:	44 e0       	ldi	r20, 0x04	; 4
 6e8:	50 e0       	ldi	r21, 0x00	; 0
 6ea:	08 c0       	rjmp	.+16     	; 0x6fc <vfprintf+0x29e>
 6ec:	f5 01       	movw	r30, r10
 6ee:	80 81       	ld	r24, Z
 6f0:	91 81       	ldd	r25, Z+1	; 0x01
 6f2:	bc 01       	movw	r22, r24
 6f4:	80 e0       	ldi	r24, 0x00	; 0
 6f6:	90 e0       	ldi	r25, 0x00	; 0
 6f8:	42 e0       	ldi	r20, 0x02	; 2
 6fa:	50 e0       	ldi	r21, 0x00	; 0
 6fc:	a4 0e       	add	r10, r20
 6fe:	b5 1e       	adc	r11, r21
 700:	a1 01       	movw	r20, r2
 702:	0e 94 4e 04 	call	0x89c	; 0x89c <__ultoa_invert>
 706:	d8 2e       	mov	r13, r24
 708:	d2 18       	sub	r13, r2
 70a:	8f e7       	ldi	r24, 0x7F	; 127
 70c:	f8 2e       	mov	r15, r24
 70e:	f1 22       	and	r15, r17
 710:	f6 fe       	sbrs	r15, 6
 712:	0b c0       	rjmp	.+22     	; 0x72a <vfprintf+0x2cc>
 714:	5e ef       	ldi	r21, 0xFE	; 254
 716:	f5 22       	and	r15, r21
 718:	d9 14       	cp	r13, r9
 71a:	38 f4       	brcc	.+14     	; 0x72a <vfprintf+0x2cc>
 71c:	f4 fe       	sbrs	r15, 4
 71e:	07 c0       	rjmp	.+14     	; 0x72e <vfprintf+0x2d0>
 720:	f2 fc       	sbrc	r15, 2
 722:	05 c0       	rjmp	.+10     	; 0x72e <vfprintf+0x2d0>
 724:	8f ee       	ldi	r24, 0xEF	; 239
 726:	f8 22       	and	r15, r24
 728:	02 c0       	rjmp	.+4      	; 0x72e <vfprintf+0x2d0>
 72a:	1d 2d       	mov	r17, r13
 72c:	01 c0       	rjmp	.+2      	; 0x730 <vfprintf+0x2d2>
 72e:	19 2d       	mov	r17, r9
 730:	f4 fe       	sbrs	r15, 4
 732:	0d c0       	rjmp	.+26     	; 0x74e <vfprintf+0x2f0>
 734:	fe 01       	movw	r30, r28
 736:	ed 0d       	add	r30, r13
 738:	f1 1d       	adc	r31, r1
 73a:	80 81       	ld	r24, Z
 73c:	80 33       	cpi	r24, 0x30	; 48
 73e:	19 f4       	brne	.+6      	; 0x746 <vfprintf+0x2e8>
 740:	99 ee       	ldi	r25, 0xE9	; 233
 742:	f9 22       	and	r15, r25
 744:	08 c0       	rjmp	.+16     	; 0x756 <vfprintf+0x2f8>
 746:	1f 5f       	subi	r17, 0xFF	; 255
 748:	f2 fe       	sbrs	r15, 2
 74a:	05 c0       	rjmp	.+10     	; 0x756 <vfprintf+0x2f8>
 74c:	03 c0       	rjmp	.+6      	; 0x754 <vfprintf+0x2f6>
 74e:	8f 2d       	mov	r24, r15
 750:	86 78       	andi	r24, 0x86	; 134
 752:	09 f0       	breq	.+2      	; 0x756 <vfprintf+0x2f8>
 754:	1f 5f       	subi	r17, 0xFF	; 255
 756:	0f 2d       	mov	r16, r15
 758:	f3 fc       	sbrc	r15, 3
 75a:	14 c0       	rjmp	.+40     	; 0x784 <vfprintf+0x326>
 75c:	f0 fe       	sbrs	r15, 0
 75e:	0f c0       	rjmp	.+30     	; 0x77e <vfprintf+0x320>
 760:	1e 15       	cp	r17, r14
 762:	10 f0       	brcs	.+4      	; 0x768 <vfprintf+0x30a>
 764:	9d 2c       	mov	r9, r13
 766:	0b c0       	rjmp	.+22     	; 0x77e <vfprintf+0x320>
 768:	9d 2c       	mov	r9, r13
 76a:	9e 0c       	add	r9, r14
 76c:	91 1a       	sub	r9, r17
 76e:	1e 2d       	mov	r17, r14
 770:	06 c0       	rjmp	.+12     	; 0x77e <vfprintf+0x320>
 772:	80 e2       	ldi	r24, 0x20	; 32
 774:	90 e0       	ldi	r25, 0x00	; 0
 776:	b3 01       	movw	r22, r6
 778:	0e 94 22 04 	call	0x844	; 0x844 <fputc>
 77c:	1f 5f       	subi	r17, 0xFF	; 255
 77e:	1e 15       	cp	r17, r14
 780:	c0 f3       	brcs	.-16     	; 0x772 <vfprintf+0x314>
 782:	04 c0       	rjmp	.+8      	; 0x78c <vfprintf+0x32e>
 784:	1e 15       	cp	r17, r14
 786:	10 f4       	brcc	.+4      	; 0x78c <vfprintf+0x32e>
 788:	e1 1a       	sub	r14, r17
 78a:	01 c0       	rjmp	.+2      	; 0x78e <vfprintf+0x330>
 78c:	ee 24       	eor	r14, r14
 78e:	04 ff       	sbrs	r16, 4
 790:	0f c0       	rjmp	.+30     	; 0x7b0 <vfprintf+0x352>
 792:	80 e3       	ldi	r24, 0x30	; 48
 794:	90 e0       	ldi	r25, 0x00	; 0
 796:	b3 01       	movw	r22, r6
 798:	0e 94 22 04 	call	0x844	; 0x844 <fputc>
 79c:	02 ff       	sbrs	r16, 2
 79e:	1d c0       	rjmp	.+58     	; 0x7da <vfprintf+0x37c>
 7a0:	01 fd       	sbrc	r16, 1
 7a2:	03 c0       	rjmp	.+6      	; 0x7aa <vfprintf+0x34c>
 7a4:	88 e7       	ldi	r24, 0x78	; 120
 7a6:	90 e0       	ldi	r25, 0x00	; 0
 7a8:	0e c0       	rjmp	.+28     	; 0x7c6 <vfprintf+0x368>
 7aa:	88 e5       	ldi	r24, 0x58	; 88
 7ac:	90 e0       	ldi	r25, 0x00	; 0
 7ae:	0b c0       	rjmp	.+22     	; 0x7c6 <vfprintf+0x368>
 7b0:	80 2f       	mov	r24, r16
 7b2:	86 78       	andi	r24, 0x86	; 134
 7b4:	91 f0       	breq	.+36     	; 0x7da <vfprintf+0x37c>
 7b6:	01 ff       	sbrs	r16, 1
 7b8:	02 c0       	rjmp	.+4      	; 0x7be <vfprintf+0x360>
 7ba:	8b e2       	ldi	r24, 0x2B	; 43
 7bc:	01 c0       	rjmp	.+2      	; 0x7c0 <vfprintf+0x362>
 7be:	80 e2       	ldi	r24, 0x20	; 32
 7c0:	f7 fc       	sbrc	r15, 7
 7c2:	8d e2       	ldi	r24, 0x2D	; 45
 7c4:	90 e0       	ldi	r25, 0x00	; 0
 7c6:	b3 01       	movw	r22, r6
 7c8:	0e 94 22 04 	call	0x844	; 0x844 <fputc>
 7cc:	06 c0       	rjmp	.+12     	; 0x7da <vfprintf+0x37c>
 7ce:	80 e3       	ldi	r24, 0x30	; 48
 7d0:	90 e0       	ldi	r25, 0x00	; 0
 7d2:	b3 01       	movw	r22, r6
 7d4:	0e 94 22 04 	call	0x844	; 0x844 <fputc>
 7d8:	9a 94       	dec	r9
 7da:	d9 14       	cp	r13, r9
 7dc:	c0 f3       	brcs	.-16     	; 0x7ce <vfprintf+0x370>
 7de:	da 94       	dec	r13
 7e0:	f1 01       	movw	r30, r2
 7e2:	ed 0d       	add	r30, r13
 7e4:	f1 1d       	adc	r31, r1
 7e6:	80 81       	ld	r24, Z
 7e8:	90 e0       	ldi	r25, 0x00	; 0
 7ea:	b3 01       	movw	r22, r6
 7ec:	0e 94 22 04 	call	0x844	; 0x844 <fputc>
 7f0:	dd 20       	and	r13, r13
 7f2:	a9 f7       	brne	.-22     	; 0x7de <vfprintf+0x380>
 7f4:	06 c0       	rjmp	.+12     	; 0x802 <vfprintf+0x3a4>
 7f6:	80 e2       	ldi	r24, 0x20	; 32
 7f8:	90 e0       	ldi	r25, 0x00	; 0
 7fa:	b3 01       	movw	r22, r6
 7fc:	0e 94 22 04 	call	0x844	; 0x844 <fputc>
 800:	ea 94       	dec	r14
 802:	ee 20       	and	r14, r14
 804:	c1 f7       	brne	.-16     	; 0x7f6 <vfprintf+0x398>
 806:	43 ce       	rjmp	.-890    	; 0x48e <vfprintf+0x30>
 808:	f3 01       	movw	r30, r6
 80a:	66 81       	ldd	r22, Z+6	; 0x06
 80c:	77 81       	ldd	r23, Z+7	; 0x07
 80e:	cb 01       	movw	r24, r22
 810:	2b 96       	adiw	r28, 0x0b	; 11
 812:	e2 e1       	ldi	r30, 0x12	; 18
 814:	0c 94 c8 04 	jmp	0x990	; 0x990 <__epilogue_restores__>

00000818 <strnlen_P>:
 818:	fc 01       	movw	r30, r24
 81a:	05 90       	lpm	r0, Z+
 81c:	61 50       	subi	r22, 0x01	; 1
 81e:	70 40       	sbci	r23, 0x00	; 0
 820:	01 10       	cpse	r0, r1
 822:	d8 f7       	brcc	.-10     	; 0x81a <strnlen_P+0x2>
 824:	80 95       	com	r24
 826:	90 95       	com	r25
 828:	8e 0f       	add	r24, r30
 82a:	9f 1f       	adc	r25, r31
 82c:	08 95       	ret

0000082e <strnlen>:
 82e:	fc 01       	movw	r30, r24
 830:	61 50       	subi	r22, 0x01	; 1
 832:	70 40       	sbci	r23, 0x00	; 0
 834:	01 90       	ld	r0, Z+
 836:	01 10       	cpse	r0, r1
 838:	d8 f7       	brcc	.-10     	; 0x830 <strnlen+0x2>
 83a:	80 95       	com	r24
 83c:	90 95       	com	r25
 83e:	8e 0f       	add	r24, r30
 840:	9f 1f       	adc	r25, r31
 842:	08 95       	ret

00000844 <fputc>:
 844:	0f 93       	push	r16
 846:	1f 93       	push	r17
 848:	cf 93       	push	r28
 84a:	df 93       	push	r29
 84c:	8c 01       	movw	r16, r24
 84e:	eb 01       	movw	r28, r22
 850:	8b 81       	ldd	r24, Y+3	; 0x03
 852:	81 ff       	sbrs	r24, 1
 854:	1b c0       	rjmp	.+54     	; 0x88c <fputc+0x48>
 856:	82 ff       	sbrs	r24, 2
 858:	0d c0       	rjmp	.+26     	; 0x874 <fputc+0x30>
 85a:	2e 81       	ldd	r18, Y+6	; 0x06
 85c:	3f 81       	ldd	r19, Y+7	; 0x07
 85e:	8c 81       	ldd	r24, Y+4	; 0x04
 860:	9d 81       	ldd	r25, Y+5	; 0x05
 862:	28 17       	cp	r18, r24
 864:	39 07       	cpc	r19, r25
 866:	64 f4       	brge	.+24     	; 0x880 <fputc+0x3c>
 868:	e8 81       	ld	r30, Y
 86a:	f9 81       	ldd	r31, Y+1	; 0x01
 86c:	01 93       	st	Z+, r16
 86e:	f9 83       	std	Y+1, r31	; 0x01
 870:	e8 83       	st	Y, r30
 872:	06 c0       	rjmp	.+12     	; 0x880 <fputc+0x3c>
 874:	e8 85       	ldd	r30, Y+8	; 0x08
 876:	f9 85       	ldd	r31, Y+9	; 0x09
 878:	80 2f       	mov	r24, r16
 87a:	09 95       	icall
 87c:	89 2b       	or	r24, r25
 87e:	31 f4       	brne	.+12     	; 0x88c <fputc+0x48>
 880:	8e 81       	ldd	r24, Y+6	; 0x06
 882:	9f 81       	ldd	r25, Y+7	; 0x07
 884:	01 96       	adiw	r24, 0x01	; 1
 886:	9f 83       	std	Y+7, r25	; 0x07
 888:	8e 83       	std	Y+6, r24	; 0x06
 88a:	02 c0       	rjmp	.+4      	; 0x890 <fputc+0x4c>
 88c:	0f ef       	ldi	r16, 0xFF	; 255
 88e:	1f ef       	ldi	r17, 0xFF	; 255
 890:	c8 01       	movw	r24, r16
 892:	df 91       	pop	r29
 894:	cf 91       	pop	r28
 896:	1f 91       	pop	r17
 898:	0f 91       	pop	r16
 89a:	08 95       	ret

0000089c <__ultoa_invert>:
 89c:	fa 01       	movw	r30, r20
 89e:	aa 27       	eor	r26, r26
 8a0:	28 30       	cpi	r18, 0x08	; 8
 8a2:	51 f1       	breq	.+84     	; 0x8f8 <__ultoa_invert+0x5c>
 8a4:	20 31       	cpi	r18, 0x10	; 16
 8a6:	81 f1       	breq	.+96     	; 0x908 <__stack+0x9>
 8a8:	e8 94       	clt
 8aa:	6f 93       	push	r22
 8ac:	6e 7f       	andi	r22, 0xFE	; 254
 8ae:	6e 5f       	subi	r22, 0xFE	; 254
 8b0:	7f 4f       	sbci	r23, 0xFF	; 255
 8b2:	8f 4f       	sbci	r24, 0xFF	; 255
 8b4:	9f 4f       	sbci	r25, 0xFF	; 255
 8b6:	af 4f       	sbci	r26, 0xFF	; 255
 8b8:	b1 e0       	ldi	r27, 0x01	; 1
 8ba:	3e d0       	rcall	.+124    	; 0x938 <__stack+0x39>
 8bc:	b4 e0       	ldi	r27, 0x04	; 4
 8be:	3c d0       	rcall	.+120    	; 0x938 <__stack+0x39>
 8c0:	67 0f       	add	r22, r23
 8c2:	78 1f       	adc	r23, r24
 8c4:	89 1f       	adc	r24, r25
 8c6:	9a 1f       	adc	r25, r26
 8c8:	a1 1d       	adc	r26, r1
 8ca:	68 0f       	add	r22, r24
 8cc:	79 1f       	adc	r23, r25
 8ce:	8a 1f       	adc	r24, r26
 8d0:	91 1d       	adc	r25, r1
 8d2:	a1 1d       	adc	r26, r1
 8d4:	6a 0f       	add	r22, r26
 8d6:	71 1d       	adc	r23, r1
 8d8:	81 1d       	adc	r24, r1
 8da:	91 1d       	adc	r25, r1
 8dc:	a1 1d       	adc	r26, r1
 8de:	20 d0       	rcall	.+64     	; 0x920 <__stack+0x21>
 8e0:	09 f4       	brne	.+2      	; 0x8e4 <__ultoa_invert+0x48>
 8e2:	68 94       	set
 8e4:	3f 91       	pop	r19
 8e6:	2a e0       	ldi	r18, 0x0A	; 10
 8e8:	26 9f       	mul	r18, r22
 8ea:	11 24       	eor	r1, r1
 8ec:	30 19       	sub	r19, r0
 8ee:	30 5d       	subi	r19, 0xD0	; 208
 8f0:	31 93       	st	Z+, r19
 8f2:	de f6       	brtc	.-74     	; 0x8aa <__ultoa_invert+0xe>
 8f4:	cf 01       	movw	r24, r30
 8f6:	08 95       	ret
 8f8:	46 2f       	mov	r20, r22
 8fa:	47 70       	andi	r20, 0x07	; 7
 8fc:	40 5d       	subi	r20, 0xD0	; 208
 8fe:	41 93       	st	Z+, r20
 900:	b3 e0       	ldi	r27, 0x03	; 3
 902:	0f d0       	rcall	.+30     	; 0x922 <__stack+0x23>
 904:	c9 f7       	brne	.-14     	; 0x8f8 <__ultoa_invert+0x5c>
 906:	f6 cf       	rjmp	.-20     	; 0x8f4 <__ultoa_invert+0x58>
 908:	46 2f       	mov	r20, r22
 90a:	4f 70       	andi	r20, 0x0F	; 15
 90c:	40 5d       	subi	r20, 0xD0	; 208
 90e:	4a 33       	cpi	r20, 0x3A	; 58
 910:	18 f0       	brcs	.+6      	; 0x918 <__stack+0x19>
 912:	49 5d       	subi	r20, 0xD9	; 217
 914:	31 fd       	sbrc	r19, 1
 916:	40 52       	subi	r20, 0x20	; 32
 918:	41 93       	st	Z+, r20
 91a:	02 d0       	rcall	.+4      	; 0x920 <__stack+0x21>
 91c:	a9 f7       	brne	.-22     	; 0x908 <__stack+0x9>
 91e:	ea cf       	rjmp	.-44     	; 0x8f4 <__ultoa_invert+0x58>
 920:	b4 e0       	ldi	r27, 0x04	; 4
 922:	a6 95       	lsr	r26
 924:	97 95       	ror	r25
 926:	87 95       	ror	r24
 928:	77 95       	ror	r23
 92a:	67 95       	ror	r22
 92c:	ba 95       	dec	r27
 92e:	c9 f7       	brne	.-14     	; 0x922 <__stack+0x23>
 930:	00 97       	sbiw	r24, 0x00	; 0
 932:	61 05       	cpc	r22, r1
 934:	71 05       	cpc	r23, r1
 936:	08 95       	ret
 938:	9b 01       	movw	r18, r22
 93a:	ac 01       	movw	r20, r24
 93c:	0a 2e       	mov	r0, r26
 93e:	06 94       	lsr	r0
 940:	57 95       	ror	r21
 942:	47 95       	ror	r20
 944:	37 95       	ror	r19
 946:	27 95       	ror	r18
 948:	ba 95       	dec	r27
 94a:	c9 f7       	brne	.-14     	; 0x93e <__stack+0x3f>
 94c:	62 0f       	add	r22, r18
 94e:	73 1f       	adc	r23, r19
 950:	84 1f       	adc	r24, r20
 952:	95 1f       	adc	r25, r21
 954:	a0 1d       	adc	r26, r0
 956:	08 95       	ret

00000958 <__prologue_saves__>:
 958:	2f 92       	push	r2
 95a:	3f 92       	push	r3
 95c:	4f 92       	push	r4
 95e:	5f 92       	push	r5
 960:	6f 92       	push	r6
 962:	7f 92       	push	r7
 964:	8f 92       	push	r8
 966:	9f 92       	push	r9
 968:	af 92       	push	r10
 96a:	bf 92       	push	r11
 96c:	cf 92       	push	r12
 96e:	df 92       	push	r13
 970:	ef 92       	push	r14
 972:	ff 92       	push	r15
 974:	0f 93       	push	r16
 976:	1f 93       	push	r17
 978:	cf 93       	push	r28
 97a:	df 93       	push	r29
 97c:	cd b7       	in	r28, 0x3d	; 61
 97e:	de b7       	in	r29, 0x3e	; 62
 980:	ca 1b       	sub	r28, r26
 982:	db 0b       	sbc	r29, r27
 984:	0f b6       	in	r0, 0x3f	; 63
 986:	f8 94       	cli
 988:	de bf       	out	0x3e, r29	; 62
 98a:	0f be       	out	0x3f, r0	; 63
 98c:	cd bf       	out	0x3d, r28	; 61
 98e:	09 94       	ijmp

00000990 <__epilogue_restores__>:
 990:	2a 88       	ldd	r2, Y+18	; 0x12
 992:	39 88       	ldd	r3, Y+17	; 0x11
 994:	48 88       	ldd	r4, Y+16	; 0x10
 996:	5f 84       	ldd	r5, Y+15	; 0x0f
 998:	6e 84       	ldd	r6, Y+14	; 0x0e
 99a:	7d 84       	ldd	r7, Y+13	; 0x0d
 99c:	8c 84       	ldd	r8, Y+12	; 0x0c
 99e:	9b 84       	ldd	r9, Y+11	; 0x0b
 9a0:	aa 84       	ldd	r10, Y+10	; 0x0a
 9a2:	b9 84       	ldd	r11, Y+9	; 0x09
 9a4:	c8 84       	ldd	r12, Y+8	; 0x08
 9a6:	df 80       	ldd	r13, Y+7	; 0x07
 9a8:	ee 80       	ldd	r14, Y+6	; 0x06
 9aa:	fd 80       	ldd	r15, Y+5	; 0x05
 9ac:	0c 81       	ldd	r16, Y+4	; 0x04
 9ae:	1b 81       	ldd	r17, Y+3	; 0x03
 9b0:	aa 81       	ldd	r26, Y+2	; 0x02
 9b2:	b9 81       	ldd	r27, Y+1	; 0x01
 9b4:	ce 0f       	add	r28, r30
 9b6:	d1 1d       	adc	r29, r1
 9b8:	0f b6       	in	r0, 0x3f	; 63
 9ba:	f8 94       	cli
 9bc:	de bf       	out	0x3e, r29	; 62
 9be:	0f be       	out	0x3f, r0	; 63
 9c0:	cd bf       	out	0x3d, r28	; 61
 9c2:	ed 01       	movw	r28, r26
 9c4:	08 95       	ret

000009c6 <_exit>:
 9c6:	f8 94       	cli

000009c8 <__stop_program>:
 9c8:	ff cf       	rjmp	.-2      	; 0x9c8 <__stop_program>
