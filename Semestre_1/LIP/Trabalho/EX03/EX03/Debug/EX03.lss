
EX03.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000126  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  00000146  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000111  00000000  00000000  00000161  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000b4  00000000  00000000  00000272  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000153  00000000  00000000  00000326  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  0000047c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000c9  00000000  00000000  0000049c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000050  00000000  00000000  00000565  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000060  00000000  00000000  000005b5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 67 00 	jmp	0xce	; 0xce <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:

/**
 * Função principal e de entrada do programa;
 */
int main( void )
{
  80:	1f 93       	push	r17
	/**
	 * Para usar qualquer GPIO antes é necessário configurar o sentido (entrada ou saída);
	 * Configura todos os pinos do PORTB como saída; 
	 */
    Set_bit( DDRB, 5 ); //Pino RB5 como saída;
  82:	e4 e2       	ldi	r30, 0x24	; 36
  84:	f0 e0       	ldi	r31, 0x00	; 0
  86:	80 81       	ld	r24, Z
  88:	80 62       	ori	r24, 0x20	; 32
  8a:	80 83       	st	Z, r24
    Clr_bit( DDRD, 2 ); //Pino PD2 como entrada; 
  8c:	ea e2       	ldi	r30, 0x2A	; 42
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	80 81       	ld	r24, Z
  92:	8b 7f       	andi	r24, 0xFB	; 251
  94:	80 83       	st	Z, r24
	Set_bit( PORTD, 2 ); //Pull UP em PD2
  96:	eb e2       	ldi	r30, 0x2B	; 43
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 81       	ld	r24, Z
  9c:	84 60       	ori	r24, 0x04	; 4
  9e:	80 83       	st	Z, r24
	/**
	 * Isso é um pisca led, correto? Portanto, loop infinito!
	 */
    for(;;) 
    {
    	if( !Tst_bit(PIND, 2) )  
  a0:	e9 e2       	ldi	r30, 0x29	; 41
  a2:	f0 e0       	ldi	r31, 0x00	; 0
    	{
			Cpl_bit( PORTB, 5 );  // Inverte o estado lógico do pino por meio de um XOR;
  a4:	a5 e2       	ldi	r26, 0x25	; 37
  a6:	b0 e0       	ldi	r27, 0x00	; 0
  a8:	10 e2       	ldi	r17, 0x20	; 32
  aa:	68 ee       	ldi	r22, 0xE8	; 232
  ac:	73 e0       	ldi	r23, 0x03	; 3
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  ae:	40 e9       	ldi	r20, 0x90	; 144
  b0:	51 e0       	ldi	r21, 0x01	; 1
	/**
	 * Isso é um pisca led, correto? Portanto, loop infinito!
	 */
    for(;;) 
    {
    	if( !Tst_bit(PIND, 2) )  
  b2:	80 81       	ld	r24, Z
  b4:	82 fd       	sbrc	r24, 2
  b6:	fd cf       	rjmp	.-6      	; 0xb2 <main+0x32>
    	{
			Cpl_bit( PORTB, 5 );  // Inverte o estado lógico do pino por meio de um XOR;
  b8:	8c 91       	ld	r24, X
  ba:	81 27       	eor	r24, r17
  bc:	8c 93       	st	X, r24
  be:	9b 01       	movw	r18, r22
  c0:	ca 01       	movw	r24, r20
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <main+0x42>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  c6:	21 50       	subi	r18, 0x01	; 1
  c8:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  ca:	d1 f7       	brne	.-12     	; 0xc0 <main+0x40>
  cc:	f2 cf       	rjmp	.-28     	; 0xb2 <main+0x32>

000000ce <_exit>:
  ce:	f8 94       	cli

000000d0 <__stop_program>:
  d0:	ff cf       	rjmp	.-2      	; 0xd0 <__stop_program>
