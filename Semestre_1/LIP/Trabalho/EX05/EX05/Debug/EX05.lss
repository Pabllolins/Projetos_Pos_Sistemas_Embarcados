
EX05.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002c  00800100  000001be  00000232  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001be  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .debug_aranges 00000060  00000000  00000000  0000025e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000080  00000000  00000000  000002be  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000279  00000000  00000000  0000033e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000187  00000000  00000000  000005b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002f6  00000000  00000000  0000073e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000080  00000000  00000000  00000a34  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000122  00000000  00000000  00000ab4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000014b  00000000  00000000  00000bd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000098  00000000  00000000  00000d21  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	UDR0 = data;								// Envia o dado pela porta serial
}

//-------------------------------------------------------------------------------------------------------
unsigned char USART_Receive()
{
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee eb       	ldi	r30, 0xBE	; 190
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	ac 32       	cpi	r26, 0x2C	; 44
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:

/**
 * Função principal e de entrada do programa;
 */
int main( void )
{
  96:	5f 92       	push	r5
  98:	6f 92       	push	r6
  9a:	7f 92       	push	r7
  9c:	8f 92       	push	r8
  9e:	9f 92       	push	r9
  a0:	af 92       	push	r10
  a2:	bf 92       	push	r11
  a4:	cf 92       	push	r12
  a6:	df 92       	push	r13
  a8:	ef 92       	push	r14
  aa:	ff 92       	push	r15
  ac:	0f 93       	push	r16
  ae:	1f 93       	push	r17
  b0:	cf 93       	push	r28
  b2:	df 93       	push	r29
    uint8_t aux = 0;
	/**
	 * Para usar qualquer GPIO antes é necessário configurar o sentido (entrada ou saída);
	 * Configura todos os pinos do PORTB como saída; 
	 */
    Set_bit( DDRB, LED_BUILDING );  //Pino RB5 como saída;
  b4:	e4 e2       	ldi	r30, 0x24	; 36
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	80 62       	ori	r24, 0x20	; 32
  bc:	80 83       	st	Z, r24
    Clr_bit( DDRD, BUTTON_1 ); 		//Pino PD2 como entrada; 
  be:	ea e2       	ldi	r30, 0x2A	; 42
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	8b 7f       	andi	r24, 0xFB	; 251
  c6:	80 83       	st	Z, r24
	Set_bit( PORTD, BUTTON_1 ); 	//Pull UP em PD2
  c8:	eb e2       	ldi	r30, 0x2B	; 43
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	84 60       	ori	r24, 0x04	; 4
  d0:	80 83       	st	Z, r24
	/**
	 * Isso é um pisca led, correto? Portanto, loop infinito!
	 */
	USART_Init(); 
  d2:	0e 94 b9 00 	call	0x172	; 0x172 <USART_Init>
	USART_StrTx("Hello\r\n");
  d6:	80 e0       	ldi	r24, 0x00	; 0
  d8:	91 e0       	ldi	r25, 0x01	; 1
  da:	0e 94 ce 00 	call	0x19c	; 0x19c <USART_StrTx>
  de:	90 e0       	ldi	r25, 0x00	; 0
    for(;;) 
    {
		/**
		 * Button pressionado?
		 */
    	if( !Tst_bit( PIND, BUTTON_1 ) && aux == 0 )  
  e0:	09 e2       	ldi	r16, 0x29	; 41
  e2:	10 e0       	ldi	r17, 0x00	; 0
    	{
			
			USART_StrTx("Button Pressionado\r\n");
  e4:	0f 2e       	mov	r0, r31
  e6:	f8 e0       	ldi	r31, 0x08	; 8
  e8:	8f 2e       	mov	r8, r31
  ea:	f1 e0       	ldi	r31, 0x01	; 1
  ec:	9f 2e       	mov	r9, r31
  ee:	f0 2d       	mov	r31, r0
			
    		/**
    		 * Inverte o estado lógico do led building;
    		 */
			Cpl_bit( PORTB, LED_BUILDING ); 
  f0:	0f 2e       	mov	r0, r31
  f2:	f5 e2       	ldi	r31, 0x25	; 37
  f4:	ef 2e       	mov	r14, r31
  f6:	ff 24       	eor	r15, r15
  f8:	f0 2d       	mov	r31, r0
  fa:	77 24       	eor	r7, r7
  fc:	68 94       	set
  fe:	75 f8       	bld	r7, 5
 100:	0f 2e       	mov	r0, r31
 102:	f8 ee       	ldi	r31, 0xE8	; 232
 104:	cf 2e       	mov	r12, r31
 106:	f3 e0       	ldi	r31, 0x03	; 3
 108:	df 2e       	mov	r13, r31
 10a:	f0 2d       	mov	r31, r0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 10c:	c0 e9       	ldi	r28, 0x90	; 144
 10e:	d1 e0       	ldi	r29, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 110:	66 24       	eor	r6, r6
 112:	63 94       	inc	r6
		/**
		 * Button solto?
		 */
		if( Tst_bit( PIND, BUTTON_1 ) && aux == 1 )
		{
			USART_StrTx("Button Solto\r\n");
 114:	0f 2e       	mov	r0, r31
 116:	fd e1       	ldi	r31, 0x1D	; 29
 118:	af 2e       	mov	r10, r31
 11a:	f1 e0       	ldi	r31, 0x01	; 1
 11c:	bf 2e       	mov	r11, r31
 11e:	f0 2d       	mov	r31, r0
	Set_bit( PORTD, BUTTON_1 ); 	//Pull UP em PD2
	/**
	 * Isso é um pisca led, correto? Portanto, loop infinito!
	 */
	USART_Init(); 
	USART_StrTx("Hello\r\n");
 120:	55 24       	eor	r5, r5
 122:	01 c0       	rjmp	.+2      	; 0x126 <main+0x90>
 124:	95 2d       	mov	r25, r5
    for(;;) 
    {
		/**
		 * Button pressionado?
		 */
    	if( !Tst_bit( PIND, BUTTON_1 ) && aux == 0 )  
 126:	f8 01       	movw	r30, r16
 128:	80 81       	ld	r24, Z
 12a:	82 fd       	sbrc	r24, 2
 12c:	11 c0       	rjmp	.+34     	; 0x150 <main+0xba>
 12e:	99 23       	and	r25, r25
 130:	79 f4       	brne	.+30     	; 0x150 <main+0xba>
    	{
			
			USART_StrTx("Button Pressionado\r\n");
 132:	c4 01       	movw	r24, r8
 134:	0e 94 ce 00 	call	0x19c	; 0x19c <USART_StrTx>
			
    		/**
    		 * Inverte o estado lógico do led building;
    		 */
			Cpl_bit( PORTB, LED_BUILDING ); 
 138:	f7 01       	movw	r30, r14
 13a:	80 81       	ld	r24, Z
 13c:	87 25       	eor	r24, r7
 13e:	80 83       	st	Z, r24
 140:	96 01       	movw	r18, r12
 142:	ce 01       	movw	r24, r28
 144:	01 97       	sbiw	r24, 0x01	; 1
 146:	f1 f7       	brne	.-4      	; 0x144 <main+0xae>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 148:	21 50       	subi	r18, 0x01	; 1
 14a:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 14c:	d1 f7       	brne	.-12     	; 0x142 <main+0xac>
 14e:	96 2d       	mov	r25, r6
			aux = 1; 
		}
		/**
		 * Button solto?
		 */
		if( Tst_bit( PIND, BUTTON_1 ) && aux == 1 )
 150:	f8 01       	movw	r30, r16
 152:	80 81       	ld	r24, Z
 154:	82 ff       	sbrs	r24, 2
 156:	e7 cf       	rjmp	.-50     	; 0x126 <main+0x90>
 158:	91 30       	cpi	r25, 0x01	; 1
 15a:	29 f7       	brne	.-54     	; 0x126 <main+0x90>
		{
			USART_StrTx("Button Solto\r\n");
 15c:	c5 01       	movw	r24, r10
 15e:	0e 94 ce 00 	call	0x19c	; 0x19c <USART_StrTx>
 162:	96 01       	movw	r18, r12
 164:	ce 01       	movw	r24, r28
 166:	01 97       	sbiw	r24, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <main+0xd0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 16a:	21 50       	subi	r18, 0x01	; 1
 16c:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 16e:	d1 f7       	brne	.-12     	; 0x164 <main+0xce>
 170:	d9 cf       	rjmp	.-78     	; 0x124 <main+0x8e>

00000172 <USART_Init>:
#include "usart.h"

void USART_Init()
{
	UBRR0H = (uint8_t) (MYUBRR>>8);				// Ajuste da transmissão em 9600 bps
 172:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (uint8_t)(MYUBRR);
 176:	87 e6       	ldi	r24, 0x67	; 103
 178:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);				// Habilita transmissão e recepção
 17c:	88 e1       	ldi	r24, 0x18	; 24
 17e:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (3<<UCSZ00);						// Modo assincrono, 8 bits, 1 stop, sem paridade
 182:	86 e0       	ldi	r24, 0x06	; 6
 184:	80 93 c2 00 	sts	0x00C2, r24
}
 188:	08 95       	ret

0000018a <USART_Transmit>:
//-------------------------------------------------------------------------------------------------------
void USART_Transmit(unsigned char data)
{
 18a:	98 2f       	mov	r25, r24
	while(!(UCSR0A & (1<<UDRE0)));				// Espera o dado ser enviado
 18c:	e0 ec       	ldi	r30, 0xC0	; 192
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	80 81       	ld	r24, Z
 192:	85 ff       	sbrs	r24, 5
 194:	fd cf       	rjmp	.-6      	; 0x190 <USART_Transmit+0x6>
	UDR0 = data;								// Envia o dado pela porta serial
 196:	90 93 c6 00 	sts	0x00C6, r25
}
 19a:	08 95       	ret

0000019c <USART_StrTx>:
	return UDR0;
}

//-------------------------------------------------------------------------------------------------------
void USART_StrTx(const char* ptr)
{
 19c:	cf 93       	push	r28
 19e:	df 93       	push	r29
 1a0:	ec 01       	movw	r28, r24
	while(*ptr != '\0')
 1a2:	88 81       	ld	r24, Y
 1a4:	88 23       	and	r24, r24
 1a6:	31 f0       	breq	.+12     	; 0x1b4 <USART_StrTx+0x18>
	{
		USART_Transmit(*ptr);
 1a8:	0e 94 c5 00 	call	0x18a	; 0x18a <USART_Transmit>
		ptr++;
 1ac:	21 96       	adiw	r28, 0x01	; 1
}

//-------------------------------------------------------------------------------------------------------
void USART_StrTx(const char* ptr)
{
	while(*ptr != '\0')
 1ae:	88 81       	ld	r24, Y
 1b0:	88 23       	and	r24, r24
 1b2:	d1 f7       	brne	.-12     	; 0x1a8 <USART_StrTx+0xc>
	{
		USART_Transmit(*ptr);
		ptr++;
	}
}
 1b4:	df 91       	pop	r29
 1b6:	cf 91       	pop	r28
 1b8:	08 95       	ret

000001ba <_exit>:
 1ba:	f8 94       	cli

000001bc <__stop_program>:
 1bc:	ff cf       	rjmp	.-2      	; 0x1bc <__stop_program>
