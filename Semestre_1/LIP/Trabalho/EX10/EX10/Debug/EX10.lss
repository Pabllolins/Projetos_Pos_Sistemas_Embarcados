
EX10.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005c  00800100  000006ce  00000762  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000067  0080015c  0080015c  000007be  2**0
                  ALLOC
  3 .debug_aranges 000000e8  00000000  00000000  000007be  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000199  00000000  00000000  000008a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000900  00000000  00000000  00000a3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003c2  00000000  00000000  0000133f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008c8  00000000  00000000  00001701  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000150  00000000  00000000  00001fcc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000027c  00000000  00000000  0000211c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000397  00000000  00000000  00002398  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000110  00000000  00000000  0000272f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
{
  LCD_Write_Data(0, CmdLCD);     //RS = 0, -> COMANDO A SER PROCESSADO
}

void DisplayLCD_Chr_Cp( char Tchar)
{
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
	UDR0 = data;								// Envia o dado pela porta serial
}

//-------------------------------------------------------------------------------------------------------
unsigned char USART_Receive()
{
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 ce 01 	jmp	0x39c	; 0x39c <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ec       	ldi	r30, 0xCE	; 206
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	ac 35       	cpi	r26, 0x5C	; 92
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	ac e5       	ldi	r26, 0x5C	; 92
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 3c       	cpi	r26, 0xC3	; 195
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 11 02 	call	0x422	; 0x422 <main>
  9e:	0c 94 65 03 	jmp	0x6ca	; 0x6ca <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <adc_init>:
#include <stdint.h>

void adc_init(void)
{
	// AREF = AVcc
	ADMUX = (1<<REFS0);
  a6:	80 e4       	ldi	r24, 0x40	; 64
  a8:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  ac:	87 e8       	ldi	r24, 0x87	; 135
  ae:	80 93 7a 00 	sts	0x007A, r24
}
  b2:	08 95       	ret

000000b4 <adc_read>:
{
	// select the corresponding channel 0~7
	// ANDing with â€™7' will always keep the value
	// of â€˜châ€™ between 0 and 7
	ch &= 0b00000111;  // AND operation with 7
	ADMUX = (ADMUX & 0xF8)|ch; 
  b4:	ec e7       	ldi	r30, 0x7C	; 124
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	90 81       	ld	r25, Z
  ba:	87 70       	andi	r24, 0x07	; 7
  bc:	98 7f       	andi	r25, 0xF8	; 248
  be:	89 2b       	or	r24, r25
  c0:	80 83       	st	Z, r24

	// start single convertion
	// write â€™1' to ADSC
	ADCSRA |= (1<<ADSC);
  c2:	ea e7       	ldi	r30, 0x7A	; 122
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	80 64       	ori	r24, 0x40	; 64
  ca:	80 83       	st	Z, r24

	// wait for conversion to complete
	// ADSC becomes â€™0' again
	// till then, run loop continuously
	while(ADCSRA & (1<<ADSC));
  cc:	80 81       	ld	r24, Z
  ce:	86 fd       	sbrc	r24, 6
  d0:	fd cf       	rjmp	.-6      	; 0xcc <adc_read+0x18>

	return (ADCW);
  d2:	20 91 78 00 	lds	r18, 0x0078
  d6:	30 91 79 00 	lds	r19, 0x0079
  da:	82 2f       	mov	r24, r18
  dc:	93 2f       	mov	r25, r19
  de:	08 95       	ret

000000e0 <LCD_Enable>:
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  e0:	95 ed       	ldi	r25, 0xD5	; 213
  e2:	89 2f       	mov	r24, r25
  e4:	8a 95       	dec	r24
  e6:	f1 f7       	brne	.-4      	; 0xe4 <LCD_Enable+0x4>
}

void LCD_Enable(void)  //INSTRUÇÃO DE CLOCK PARA O LCD
{
  _delay_us(40);
  LCD_EN_IO = 1;
  e8:	e5 e2       	ldi	r30, 0x25	; 37
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	80 81       	ld	r24, Z
  ee:	82 60       	ori	r24, 0x02	; 2
  f0:	80 83       	st	Z, r24
  f2:	89 2f       	mov	r24, r25
  f4:	8a 95       	dec	r24
  f6:	f1 f7       	brne	.-4      	; 0xf4 <LCD_Enable+0x14>
  _delay_us(40);
  LCD_EN_IO = 0;
  f8:	80 81       	ld	r24, Z
  fa:	8d 7f       	andi	r24, 0xFD	; 253
  fc:	80 83       	st	Z, r24
  fe:	9a 95       	dec	r25
 100:	f1 f7       	brne	.-4      	; 0xfe <LCD_Enable+0x1e>
  _delay_us(40);
}
 102:	08 95       	ret

00000104 <LCD_Write_Data>:
#include <util/delay.h>


//****************************Funções
void LCD_Write_Data(unsigned char RS, unsigned char Data)
{
 104:	ff 92       	push	r15
 106:	0f 93       	push	r16
 108:	1f 93       	push	r17
 10a:	f6 2e       	mov	r15, r22
//             == 00010000 (ou 0x10)
//                --------
//              = 1        (retorna 1)
//*****************************************************************************

   LCD_RS_IO  = RS;     //0
 10c:	81 70       	andi	r24, 0x01	; 1
 10e:	e5 e2       	ldi	r30, 0x25	; 37
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	90 81       	ld	r25, Z
 114:	9e 7f       	andi	r25, 0xFE	; 254
 116:	98 2b       	or	r25, r24
 118:	90 83       	st	Z, r25
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 11a:	80 e4       	ldi	r24, 0x40	; 64
 11c:	9f e1       	ldi	r25, 0x1F	; 31
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <LCD_Write_Data+0x1a>

   _delay_ms(2);
   LCD_DATA4_IO = ((Data & 0x10) == 0x10);
 122:	46 2f       	mov	r20, r22
 124:	50 e0       	ldi	r21, 0x00	; 0
 126:	ca 01       	movw	r24, r20
 128:	92 95       	swap	r25
 12a:	82 95       	swap	r24
 12c:	8f 70       	andi	r24, 0x0F	; 15
 12e:	89 27       	eor	r24, r25
 130:	9f 70       	andi	r25, 0x0F	; 15
 132:	89 27       	eor	r24, r25
 134:	81 70       	andi	r24, 0x01	; 1
 136:	eb e2       	ldi	r30, 0x2B	; 43
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	82 95       	swap	r24
 13c:	80 7f       	andi	r24, 0xF0	; 240
 13e:	20 81       	ld	r18, Z
 140:	2f 7e       	andi	r18, 0xEF	; 239
 142:	28 2b       	or	r18, r24
 144:	20 83       	st	Z, r18
   LCD_DATA5_IO = ((Data & 0x20) == 0x20);
 146:	ca 01       	movw	r24, r20
 148:	96 95       	lsr	r25
 14a:	87 95       	ror	r24
 14c:	92 95       	swap	r25
 14e:	82 95       	swap	r24
 150:	8f 70       	andi	r24, 0x0F	; 15
 152:	89 27       	eor	r24, r25
 154:	9f 70       	andi	r25, 0x0F	; 15
 156:	89 27       	eor	r24, r25
 158:	81 70       	andi	r24, 0x01	; 1
 15a:	82 95       	swap	r24
 15c:	88 0f       	add	r24, r24
 15e:	80 7e       	andi	r24, 0xE0	; 224
 160:	20 81       	ld	r18, Z
 162:	2f 7d       	andi	r18, 0xDF	; 223
 164:	28 2b       	or	r18, r24
 166:	20 83       	st	Z, r18
   LCD_DATA6_IO = ((Data & 0x40) == 0x40);
 168:	00 24       	eor	r0, r0
 16a:	44 0f       	add	r20, r20
 16c:	55 1f       	adc	r21, r21
 16e:	00 1c       	adc	r0, r0
 170:	44 0f       	add	r20, r20
 172:	55 1f       	adc	r21, r21
 174:	00 1c       	adc	r0, r0
 176:	45 2f       	mov	r20, r21
 178:	50 2d       	mov	r21, r0
 17a:	41 70       	andi	r20, 0x01	; 1
 17c:	42 95       	swap	r20
 17e:	44 0f       	add	r20, r20
 180:	44 0f       	add	r20, r20
 182:	40 7c       	andi	r20, 0xC0	; 192
 184:	80 81       	ld	r24, Z
 186:	8f 7b       	andi	r24, 0xBF	; 191
 188:	84 2b       	or	r24, r20
 18a:	80 83       	st	Z, r24
   LCD_DATA7_IO = ((Data & 0x80) == 0x80);
 18c:	66 23       	and	r22, r22
 18e:	96 2f       	mov	r25, r22
 190:	99 1f       	adc	r25, r25
 192:	99 27       	eor	r25, r25
 194:	99 1f       	adc	r25, r25
 196:	0b e2       	ldi	r16, 0x2B	; 43
 198:	10 e0       	ldi	r17, 0x00	; 0
 19a:	97 95       	ror	r25
 19c:	99 27       	eor	r25, r25
 19e:	97 95       	ror	r25
 1a0:	80 81       	ld	r24, Z
 1a2:	8f 77       	andi	r24, 0x7F	; 127
 1a4:	89 2b       	or	r24, r25
 1a6:	80 83       	st	Z, r24

   LCD_Enable();
 1a8:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_Enable>

   Data = Data << 4; //Rotaciona o nibble o LSB para a posição MSB
 1ac:	ff 0c       	add	r15, r15
 1ae:	ff 0c       	add	r15, r15
 1b0:	ff 0c       	add	r15, r15
 1b2:	ff 0c       	add	r15, r15
   LCD_DATA4_IO = ((Data & 0x10) == 0x10);
 1b4:	4f 2d       	mov	r20, r15
 1b6:	50 e0       	ldi	r21, 0x00	; 0
 1b8:	ca 01       	movw	r24, r20
 1ba:	92 95       	swap	r25
 1bc:	82 95       	swap	r24
 1be:	8f 70       	andi	r24, 0x0F	; 15
 1c0:	89 27       	eor	r24, r25
 1c2:	9f 70       	andi	r25, 0x0F	; 15
 1c4:	89 27       	eor	r24, r25
 1c6:	81 70       	andi	r24, 0x01	; 1
 1c8:	82 95       	swap	r24
 1ca:	80 7f       	andi	r24, 0xF0	; 240
 1cc:	f8 01       	movw	r30, r16
 1ce:	20 81       	ld	r18, Z
 1d0:	2f 7e       	andi	r18, 0xEF	; 239
 1d2:	28 2b       	or	r18, r24
 1d4:	20 83       	st	Z, r18
   LCD_DATA5_IO = ((Data & 0x20) == 0x20);
 1d6:	ca 01       	movw	r24, r20
 1d8:	96 95       	lsr	r25
 1da:	87 95       	ror	r24
 1dc:	92 95       	swap	r25
 1de:	82 95       	swap	r24
 1e0:	8f 70       	andi	r24, 0x0F	; 15
 1e2:	89 27       	eor	r24, r25
 1e4:	9f 70       	andi	r25, 0x0F	; 15
 1e6:	89 27       	eor	r24, r25
 1e8:	81 70       	andi	r24, 0x01	; 1
 1ea:	82 95       	swap	r24
 1ec:	88 0f       	add	r24, r24
 1ee:	80 7e       	andi	r24, 0xE0	; 224
 1f0:	20 81       	ld	r18, Z
 1f2:	2f 7d       	andi	r18, 0xDF	; 223
 1f4:	28 2b       	or	r18, r24
 1f6:	20 83       	st	Z, r18
   LCD_DATA6_IO = ((Data & 0x40) == 0x40);
 1f8:	00 24       	eor	r0, r0
 1fa:	44 0f       	add	r20, r20
 1fc:	55 1f       	adc	r21, r21
 1fe:	00 1c       	adc	r0, r0
 200:	44 0f       	add	r20, r20
 202:	55 1f       	adc	r21, r21
 204:	00 1c       	adc	r0, r0
 206:	45 2f       	mov	r20, r21
 208:	50 2d       	mov	r21, r0
 20a:	41 70       	andi	r20, 0x01	; 1
 20c:	42 95       	swap	r20
 20e:	44 0f       	add	r20, r20
 210:	44 0f       	add	r20, r20
 212:	40 7c       	andi	r20, 0xC0	; 192
 214:	80 81       	ld	r24, Z
 216:	8f 7b       	andi	r24, 0xBF	; 191
 218:	84 2b       	or	r24, r20
 21a:	80 83       	st	Z, r24
   LCD_DATA7_IO = ((Data & 0x80) == 0x80);
 21c:	ff 20       	and	r15, r15
 21e:	ff 1c       	adc	r15, r15
 220:	ff 24       	eor	r15, r15
 222:	ff 1c       	adc	r15, r15
 224:	f7 94       	ror	r15
 226:	ff 24       	eor	r15, r15
 228:	f7 94       	ror	r15
 22a:	80 81       	ld	r24, Z
 22c:	8f 77       	andi	r24, 0x7F	; 127
 22e:	8f 29       	or	r24, r15
 230:	80 83       	st	Z, r24

   LCD_Enable();
 232:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_Enable>


}
 236:	1f 91       	pop	r17
 238:	0f 91       	pop	r16
 23a:	ff 90       	pop	r15
 23c:	08 95       	ret

0000023e <DisplayLCD_Cmd>:
  LCD_EN_IO = 0;
  _delay_us(40);
}

void DisplayLCD_Cmd(unsigned char CmdLCD)
{
 23e:	68 2f       	mov	r22, r24
  LCD_Write_Data(0, CmdLCD);     //RS = 0, -> COMANDO A SER PROCESSADO
 240:	80 e0       	ldi	r24, 0x00	; 0
 242:	0e 94 82 00 	call	0x104	; 0x104 <LCD_Write_Data>
}
 246:	08 95       	ret

00000248 <DisplayLCD_Init>:
   LCD_Write_Data(1, Tchar);    //RS = 1 -> DADO A SER ESCRITO
}

//funções
void DisplayLCD_Init( void )
{ 
 248:	ef 92       	push	r14
 24a:	ff 92       	push	r15
 24c:	0f 93       	push	r16
 24e:	1f 93       	push	r17
 LCD_DATA4_TRIS = 1; LCD_DATA4_IO = 0;
 250:	aa e2       	ldi	r26, 0x2A	; 42
 252:	b0 e0       	ldi	r27, 0x00	; 0
 254:	8c 91       	ld	r24, X
 256:	80 61       	ori	r24, 0x10	; 16
 258:	8c 93       	st	X, r24
 25a:	eb e2       	ldi	r30, 0x2B	; 43
 25c:	f0 e0       	ldi	r31, 0x00	; 0
 25e:	80 81       	ld	r24, Z
 260:	8f 7e       	andi	r24, 0xEF	; 239
 262:	80 83       	st	Z, r24
 LCD_DATA5_TRIS = 1; LCD_DATA5_IO = 0;
 264:	8c 91       	ld	r24, X
 266:	80 62       	ori	r24, 0x20	; 32
 268:	8c 93       	st	X, r24
 26a:	80 81       	ld	r24, Z
 26c:	8f 7d       	andi	r24, 0xDF	; 223
 26e:	80 83       	st	Z, r24
 LCD_DATA6_TRIS = 1; LCD_DATA6_IO = 0;
 270:	8c 91       	ld	r24, X
 272:	80 64       	ori	r24, 0x40	; 64
 274:	8c 93       	st	X, r24
 276:	80 81       	ld	r24, Z
 278:	8f 7b       	andi	r24, 0xBF	; 191
 27a:	80 83       	st	Z, r24
 LCD_DATA7_TRIS = 1; LCD_DATA7_IO = 0;
 27c:	8c 91       	ld	r24, X
 27e:	80 68       	ori	r24, 0x80	; 128
 280:	8c 93       	st	X, r24
 282:	80 81       	ld	r24, Z
 284:	8f 77       	andi	r24, 0x7F	; 127
 286:	80 83       	st	Z, r24
 LCD_EN_TRIS = 1; LCD_RS_IO = 0;
 288:	a4 e2       	ldi	r26, 0x24	; 36
 28a:	b0 e0       	ldi	r27, 0x00	; 0
 28c:	8c 91       	ld	r24, X
 28e:	82 60       	ori	r24, 0x02	; 2
 290:	8c 93       	st	X, r24
 292:	e5 e2       	ldi	r30, 0x25	; 37
 294:	f0 e0       	ldi	r31, 0x00	; 0
 296:	80 81       	ld	r24, Z
 298:	8e 7f       	andi	r24, 0xFE	; 254
 29a:	80 83       	st	Z, r24
 LCD_RS_TRIS = 1; LCD_RS_IO = 0;
 29c:	8c 91       	ld	r24, X
 29e:	81 60       	ori	r24, 0x01	; 1
 2a0:	8c 93       	st	X, r24
 2a2:	80 81       	ld	r24, Z
 2a4:	8e 7f       	andi	r24, 0xFE	; 254
 2a6:	80 83       	st	Z, r24
 2a8:	28 ee       	ldi	r18, 0xE8	; 232
 2aa:	33 e0       	ldi	r19, 0x03	; 3
 2ac:	40 e9       	ldi	r20, 0x90	; 144
 2ae:	51 e0       	ldi	r21, 0x01	; 1
 2b0:	ca 01       	movw	r24, r20
 2b2:	01 97       	sbiw	r24, 0x01	; 1
 2b4:	f1 f7       	brne	.-4      	; 0x2b2 <DisplayLCD_Init+0x6a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2b6:	21 50       	subi	r18, 0x01	; 1
 2b8:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2ba:	d1 f7       	brne	.-12     	; 0x2b0 <DisplayLCD_Init+0x68>

 _delay_ms(100);  //Tempo necessário para inicialização do LCD após power-on

 LCD_DATA4_IO = 1;
 2bc:	0b e2       	ldi	r16, 0x2B	; 43
 2be:	10 e0       	ldi	r17, 0x00	; 0
 2c0:	f8 01       	movw	r30, r16
 2c2:	80 81       	ld	r24, Z
 2c4:	80 61       	ori	r24, 0x10	; 16
 2c6:	80 83       	st	Z, r24
 LCD_DATA5_IO = 1;
 2c8:	80 81       	ld	r24, Z
 2ca:	80 62       	ori	r24, 0x20	; 32
 2cc:	80 83       	st	Z, r24
 LCD_Enable();
 2ce:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_Enable>
 LCD_Enable();
 2d2:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_Enable>
 LCD_Enable();
 2d6:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_Enable>
 2da:	0f 2e       	mov	r0, r31
 2dc:	f0 ea       	ldi	r31, 0xA0	; 160
 2de:	ef 2e       	mov	r14, r31
 2e0:	ff e0       	ldi	r31, 0x0F	; 15
 2e2:	ff 2e       	mov	r15, r31
 2e4:	f0 2d       	mov	r31, r0
 2e6:	c7 01       	movw	r24, r14
 2e8:	01 97       	sbiw	r24, 0x01	; 1
 2ea:	f1 f7       	brne	.-4      	; 0x2e8 <DisplayLCD_Init+0xa0>

 _delay_ms(1);

 LCD_DATA4_IO = 0;
 2ec:	f8 01       	movw	r30, r16
 2ee:	80 81       	ld	r24, Z
 2f0:	8f 7e       	andi	r24, 0xEF	; 239
 2f2:	80 83       	st	Z, r24
 LCD_DATA5_IO = 1;
 2f4:	80 81       	ld	r24, Z
 2f6:	80 62       	ori	r24, 0x20	; 32
 2f8:	80 83       	st	Z, r24
 LCD_Enable();
 2fa:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_Enable>
 LCD_Enable();
 2fe:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_Enable>
 LCD_Enable();
 302:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_Enable>
 306:	c7 01       	movw	r24, r14
 308:	01 97       	sbiw	r24, 0x01	; 1
 30a:	f1 f7       	brne	.-4      	; 0x308 <DisplayLCD_Init+0xc0>

 _delay_ms(1);


 DisplayLCD_Cmd(0X28); //2X linhas 7x5 em modo 4bits
 30c:	88 e2       	ldi	r24, 0x28	; 40
 30e:	0e 94 1f 01 	call	0x23e	; 0x23e <DisplayLCD_Cmd>
 DisplayLCD_Cmd(0X0C);
 312:	8c e0       	ldi	r24, 0x0C	; 12
 314:	0e 94 1f 01 	call	0x23e	; 0x23e <DisplayLCD_Cmd>
 DisplayLCD_Cmd(0X06);
 318:	86 e0       	ldi	r24, 0x06	; 6
 31a:	0e 94 1f 01 	call	0x23e	; 0x23e <DisplayLCD_Cmd>
 DisplayLCD_Cmd(0X01);
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	0e 94 1f 01 	call	0x23e	; 0x23e <DisplayLCD_Cmd>
 324:	28 ee       	ldi	r18, 0xE8	; 232
 326:	33 e0       	ldi	r19, 0x03	; 3
 328:	40 e9       	ldi	r20, 0x90	; 144
 32a:	51 e0       	ldi	r21, 0x01	; 1
 32c:	ca 01       	movw	r24, r20
 32e:	01 97       	sbiw	r24, 0x01	; 1
 330:	f1 f7       	brne	.-4      	; 0x32e <DisplayLCD_Init+0xe6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 332:	21 50       	subi	r18, 0x01	; 1
 334:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 336:	d1 f7       	brne	.-12     	; 0x32c <DisplayLCD_Init+0xe4>
 
 _delay_ms(100);

}
 338:	1f 91       	pop	r17
 33a:	0f 91       	pop	r16
 33c:	ff 90       	pop	r15
 33e:	ef 90       	pop	r14
 340:	08 95       	ret

00000342 <DisplayLCD_Out_Cp>:
}


//DisplayLCD_Out_Cp("BOM DIA");
void DisplayLCD_Out_Cp( char * Ponteiro)
{
 342:	cf 93       	push	r28
 344:	df 93       	push	r29
 346:	ec 01       	movw	r28, r24
 // LCD_RS_IO = 1;  //ESCREVER UM DADO
  while(*Ponteiro) //loop até encontrar o caractere NULL (ZERO)
 348:	68 81       	ld	r22, Y
 34a:	66 23       	and	r22, r22
 34c:	39 f0       	breq	.+14     	; 0x35c <DisplayLCD_Out_Cp+0x1a>
  {
    LCD_Write_Data(1,*Ponteiro);  //RS =1, ESCREVENDO NO LCD
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	0e 94 82 00 	call	0x104	; 0x104 <LCD_Write_Data>
    //LCD_Enable();
    ++Ponteiro;
 354:	21 96       	adiw	r28, 0x01	; 1

//DisplayLCD_Out_Cp("BOM DIA");
void DisplayLCD_Out_Cp( char * Ponteiro)
{
 // LCD_RS_IO = 1;  //ESCREVER UM DADO
  while(*Ponteiro) //loop até encontrar o caractere NULL (ZERO)
 356:	68 81       	ld	r22, Y
 358:	66 23       	and	r22, r22
 35a:	c9 f7       	brne	.-14     	; 0x34e <DisplayLCD_Out_Cp+0xc>
    LCD_Write_Data(1,*Ponteiro);  //RS =1, ESCREVENDO NO LCD
    //LCD_Enable();
    ++Ponteiro;
  }

}
 35c:	df 91       	pop	r29
 35e:	cf 91       	pop	r28
 360:	08 95       	ret

00000362 <DisplayLCD_Out>:

}

//DisplayLCD_Out(1,2, "BOM DIA");
void DisplayLCD_Out(unsigned char Linha, unsigned char Coluna, char *TextoLCD)
{
 362:	cf 93       	push	r28
 364:	df 93       	push	r29
 366:	98 2f       	mov	r25, r24
 368:	ea 01       	movw	r28, r20
  LCD_RS_IO = 0; //TRATAR PRIMEIRO AS COORDENADAS X E Y
 36a:	e5 e2       	ldi	r30, 0x25	; 37
 36c:	f0 e0       	ldi	r31, 0x00	; 0
 36e:	80 81       	ld	r24, Z
 370:	8e 7f       	andi	r24, 0xFE	; 254
 372:	80 83       	st	Z, r24
  switch(Linha)
 374:	91 30       	cpi	r25, 0x01	; 1
 376:	19 f0       	breq	.+6      	; 0x37e <DisplayLCD_Out+0x1c>
 378:	92 30       	cpi	r25, 0x02	; 2
 37a:	51 f4       	brne	.+20     	; 0x390 <DisplayLCD_Out+0x2e>
 37c:	05 c0       	rjmp	.+10     	; 0x388 <DisplayLCD_Out+0x26>
  {
    case 1: {
            Coluna =  Coluna + 0X7F;  // 2 + 0X7F = 0X81
            LCD_Write_Data(0,Coluna); //Comando, visto que estamos posicionando o cursor
 37e:	61 58       	subi	r22, 0x81	; 129
 380:	80 e0       	ldi	r24, 0x00	; 0
 382:	0e 94 82 00 	call	0x104	; 0x104 <LCD_Write_Data>
 386:	04 c0       	rjmp	.+8      	; 0x390 <DisplayLCD_Out+0x2e>
            //LCD_Enable();
            break;
            }
    case 2: {
            Coluna = Coluna + 0xBF;  //2 + 0xBF = 0XC1
            LCD_Write_Data(0,Coluna);
 388:	61 54       	subi	r22, 0x41	; 65
 38a:	80 e0       	ldi	r24, 0x00	; 0
 38c:	0e 94 82 00 	call	0x104	; 0x104 <LCD_Write_Data>
           //LCD_Enable();
            break;
            }
  }
  DisplayLCD_Out_Cp(TextoLCD); //Escreve no LCD "BOM DIA"
 390:	ce 01       	movw	r24, r28
 392:	0e 94 a1 01 	call	0x342	; 0x342 <DisplayLCD_Out_Cp>
}
 396:	df 91       	pop	r29
 398:	cf 91       	pop	r28
 39a:	08 95       	ret

0000039c <__vector_18>:

/**
 * Vetor de Interrupção USART RX
 */
ISR( USART_RX_vect )
{
 39c:	1f 92       	push	r1
 39e:	0f 92       	push	r0
 3a0:	0f b6       	in	r0, 0x3f	; 63
 3a2:	0f 92       	push	r0
 3a4:	11 24       	eor	r1, r1
 3a6:	2f 93       	push	r18
 3a8:	8f 93       	push	r24
 3aa:	9f 93       	push	r25
 3ac:	ef 93       	push	r30
 3ae:	ff 93       	push	r31
	 *  FE0 = Frame Error;
	 *  DOR0 = Data OverRun;
	 *  UPE0 = USART Parity Error;
	 */
	 
	 data = UDR0;
 3b0:	20 91 c6 00 	lds	r18, 0x00C6
	
	if((UCSR0A & ((1 << FE0) | (1 << DOR0) | (1 << UPE0))) == 0)
 3b4:	80 91 c0 00 	lds	r24, 0x00C0
 3b8:	8c 71       	andi	r24, 0x1C	; 28
 3ba:	49 f5       	brne	.+82     	; 0x40e <__vector_18+0x72>
	{

		/**
		 * Buffer cheio? Caso sim, reinicia indice
		 */		
		if(indice >= sizeof(usart_rx_buffer))
 3bc:	80 91 5c 01 	lds	r24, 0x015C
 3c0:	90 91 5d 01 	lds	r25, 0x015D
 3c4:	84 36       	cpi	r24, 0x64	; 100
 3c6:	91 05       	cpc	r25, r1
 3c8:	20 f0       	brcs	.+8      	; 0x3d2 <__vector_18+0x36>
		{
			indice = 0;
 3ca:	10 92 5d 01 	sts	0x015D, r1
 3ce:	10 92 5c 01 	sts	0x015C, r1
		}
		
		/**
		 * Caractere indicador de fim de frame;
		 */
		if( data == '\n' )
 3d2:	2a 30       	cpi	r18, 0x0A	; 10
 3d4:	79 f4       	brne	.+30     	; 0x3f4 <__vector_18+0x58>
		{
			usart_rx_buffer[indice] = '\0'; 
 3d6:	e0 91 5c 01 	lds	r30, 0x015C
 3da:	f0 91 5d 01 	lds	r31, 0x015D
 3de:	e1 5a       	subi	r30, 0xA1	; 161
 3e0:	fe 4f       	sbci	r31, 0xFE	; 254
 3e2:	10 82       	st	Z, r1
			frame_status = 1; 
 3e4:	81 e0       	ldi	r24, 0x01	; 1
 3e6:	80 93 5e 01 	sts	0x015E, r24
			indice = 0;
 3ea:	10 92 5d 01 	sts	0x015D, r1
 3ee:	10 92 5c 01 	sts	0x015C, r1
 3f2:	0d c0       	rjmp	.+26     	; 0x40e <__vector_18+0x72>
		} 
		/* Armazena os bytes recebidos no buffer */
		else {
			usart_rx_buffer[indice++] = data; 
 3f4:	80 91 5c 01 	lds	r24, 0x015C
 3f8:	90 91 5d 01 	lds	r25, 0x015D
 3fc:	fc 01       	movw	r30, r24
 3fe:	e1 5a       	subi	r30, 0xA1	; 161
 400:	fe 4f       	sbci	r31, 0xFE	; 254
 402:	20 83       	st	Z, r18
 404:	01 96       	adiw	r24, 0x01	; 1
 406:	90 93 5d 01 	sts	0x015D, r25
 40a:	80 93 5c 01 	sts	0x015C, r24
		}
	
	}
}
 40e:	ff 91       	pop	r31
 410:	ef 91       	pop	r30
 412:	9f 91       	pop	r25
 414:	8f 91       	pop	r24
 416:	2f 91       	pop	r18
 418:	0f 90       	pop	r0
 41a:	0f be       	out	0x3f, r0	; 63
 41c:	0f 90       	pop	r0
 41e:	1f 90       	pop	r1
 420:	18 95       	reti

00000422 <main>:
/**
 * Função principal e de entrada do programa;
 */
int main( void )
{
 422:	2f 92       	push	r2
 424:	3f 92       	push	r3
 426:	4f 92       	push	r4
 428:	5f 92       	push	r5
 42a:	6f 92       	push	r6
 42c:	7f 92       	push	r7
 42e:	8f 92       	push	r8
 430:	9f 92       	push	r9
 432:	af 92       	push	r10
 434:	bf 92       	push	r11
 436:	cf 92       	push	r12
 438:	df 92       	push	r13
 43a:	ef 92       	push	r14
 43c:	ff 92       	push	r15
 43e:	0f 93       	push	r16
 440:	1f 93       	push	r17
 442:	df 93       	push	r29
 444:	cf 93       	push	r28
 446:	cd b7       	in	r28, 0x3d	; 61
 448:	de b7       	in	r29, 0x3e	; 62
 44a:	2a 97       	sbiw	r28, 0x0a	; 10
 44c:	0f b6       	in	r0, 0x3f	; 63
 44e:	f8 94       	cli
 450:	de bf       	out	0x3e, r29	; 62
 452:	0f be       	out	0x3f, r0	; 63
 454:	cd bf       	out	0x3d, r28	; 61
	uint8_t string_adc[10];
	/**
	 * Para usar qualquer GPIO antes é necessário configurar o sentido (entrada ou saída);
	 * Configura todos os pinos do PORTB como saída; 
	 */
    Set_bit( DDRB, LED_BUILDING );  //Pino RB5 como saída;
 456:	e4 e2       	ldi	r30, 0x24	; 36
 458:	f0 e0       	ldi	r31, 0x00	; 0
 45a:	80 81       	ld	r24, Z
 45c:	80 62       	ori	r24, 0x20	; 32
 45e:	80 83       	st	Z, r24
    Clr_bit( DDRD, BUTTON_1 ); 		//Pino PD2 como entrada; 
 460:	ea e2       	ldi	r30, 0x2A	; 42
 462:	f0 e0       	ldi	r31, 0x00	; 0
 464:	80 81       	ld	r24, Z
 466:	8b 7f       	andi	r24, 0xFB	; 251
 468:	80 83       	st	Z, r24
	Set_bit( PORTD, BUTTON_1 ); 	//Pull UP em PD2
 46a:	eb e2       	ldi	r30, 0x2B	; 43
 46c:	f0 e0       	ldi	r31, 0x00	; 0
 46e:	80 81       	ld	r24, Z
 470:	84 60       	ori	r24, 0x04	; 4
 472:	80 83       	st	Z, r24
	/**
	 * Inicializa a Uart
	 */
	USART_Init(); 
 474:	0e 94 e7 02 	call	0x5ce	; 0x5ce <USART_Init>
	USART_StrTx("Hello\r\n");
 478:	80 e0       	ldi	r24, 0x00	; 0
 47a:	91 e0       	ldi	r25, 0x01	; 1
 47c:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <USART_StrTx>
	/**
	 * Habilita a interrupção Serial;
	 * sei() -> habilita a chave geral das interrupções;
	 * cli() -> desabilita a chave geral das interrupções;
	 */	
	sei(); 
 480:	78 94       	sei
	USART_rxIE();   
 482:	0e 94 0b 03 	call	0x616	; 0x616 <USART_rxIE>

	/**
	 * Inicializa AD;
	 */		
	adc_init(); 
 486:	0e 94 53 00 	call	0xa6	; 0xa6 <adc_init>
	
	DisplayLCD_Init();
 48a:	0e 94 24 01 	call	0x248	; 0x248 <DisplayLCD_Init>
	DisplayLCD_Cmd( LCD_Clear );
 48e:	81 e0       	ldi	r24, 0x01	; 1
 490:	0e 94 1f 01 	call	0x23e	; 0x23e <DisplayLCD_Cmd>
	DisplayLCD_Cmd( LCD_Cursor_Off );
 494:	8c e0       	ldi	r24, 0x0C	; 12
 496:	0e 94 1f 01 	call	0x23e	; 0x23e <DisplayLCD_Cmd>
	DisplayLCD_Out(1, 1, (char*)"Display 16x2" );
 49a:	81 e0       	ldi	r24, 0x01	; 1
 49c:	61 e0       	ldi	r22, 0x01	; 1
 49e:	48 e0       	ldi	r20, 0x08	; 8
 4a0:	51 e0       	ldi	r21, 0x01	; 1
 4a2:	0e 94 b1 01 	call	0x362	; 0x362 <DisplayLCD_Out>
 4a6:	ff 24       	eor	r15, r15
				
				/**
				 * Comando: 
				 * [AN0] -> Leitura do canal AN0;
				 */
				if( strstr( (char*) usart_rx_buffer, "[AN0]" ) )
 4a8:	0f 2e       	mov	r0, r31
 4aa:	ff e5       	ldi	r31, 0x5F	; 95
 4ac:	af 2e       	mov	r10, r31
 4ae:	f1 e0       	ldi	r31, 0x01	; 1
 4b0:	bf 2e       	mov	r11, r31
 4b2:	f0 2d       	mov	r31, r0
 4b4:	0f 2e       	mov	r0, r31
 4b6:	f5 e1       	ldi	r31, 0x15	; 21
 4b8:	6f 2e       	mov	r6, r31
 4ba:	f1 e0       	ldi	r31, 0x01	; 1
 4bc:	7f 2e       	mov	r7, r31
 4be:	f0 2d       	mov	r31, r0
				}
				/**
				 * Comando: 
				 * [LCD:SENAI ANCHIETA] -> Escreve no display LCD
				 */
				if( (pot = strstr( (char*) usart_rx_buffer, "[LCD:" )) != NULL )
 4c0:	0f 2e       	mov	r0, r31
 4c2:	f5 e2       	ldi	r31, 0x25	; 37
 4c4:	4f 2e       	mov	r4, r31
 4c6:	f1 e0       	ldi	r31, 0x01	; 1
 4c8:	5f 2e       	mov	r5, r31
 4ca:	f0 2d       	mov	r31, r0
				if( strstr( (char*) usart_rx_buffer, "[AN0]" ) )
				{
					adc_result = adc_read(0);
					
					/* Converte o valor uint16_t para string via utoa da libC stdlib.h */
					utoa( adc_result, (char*)string_adc, 10 ); 
 4cc:	4e 01       	movw	r8, r28
 4ce:	08 94       	sec
 4d0:	81 1c       	adc	r8, r1
 4d2:	91 1c       	adc	r9, r1
		
		
		/**
		 * Button pressionado?
		 */
    	if( !Tst_bit( PIND, BUTTON_1 ) && aux == 0 )  
 4d4:	0f 2e       	mov	r0, r31
 4d6:	f9 e2       	ldi	r31, 0x29	; 41
 4d8:	cf 2e       	mov	r12, r31
 4da:	dd 24       	eor	r13, r13
 4dc:	f0 2d       	mov	r31, r0
			USART_StrTx("Button Pressionado.\r\n");
			
    		/**
    		 * Inverte o estado lógico do led building;
    		 */
			Cpl_bit( PORTB, LED_BUILDING ); 
 4de:	0f 2e       	mov	r0, r31
 4e0:	f5 e2       	ldi	r31, 0x25	; 37
 4e2:	2f 2e       	mov	r2, r31
 4e4:	33 24       	eor	r3, r3
 4e6:	f0 2d       	mov	r31, r0
 4e8:	ee 24       	eor	r14, r14
 4ea:	68 94       	set
 4ec:	e5 f8       	bld	r14, 5
 4ee:	00 e9       	ldi	r16, 0x90	; 144
 4f0:	11 e0       	ldi	r17, 0x01	; 1
 4f2:	01 c0       	rjmp	.+2      	; 0x4f6 <main+0xd4>
	adc_init(); 
	
	DisplayLCD_Init();
	DisplayLCD_Cmd( LCD_Clear );
	DisplayLCD_Cmd( LCD_Cursor_Off );
	DisplayLCD_Out(1, 1, (char*)"Display 16x2" );
 4f4:	ff 24       	eor	r15, r15
	
    for(;;) 
    {
		
		ENTER_CRITICAL();
 4f6:	f8 94       	cli
		{
			if( frame_status )
 4f8:	80 91 5e 01 	lds	r24, 0x015E
 4fc:	88 23       	and	r24, r24
 4fe:	c9 f1       	breq	.+114    	; 0x572 <main+0x150>
				
				/**
				 * Comando: 
				 * [AN0] -> Leitura do canal AN0;
				 */
				if( strstr( (char*) usart_rx_buffer, "[AN0]" ) )
 500:	c5 01       	movw	r24, r10
 502:	b3 01       	movw	r22, r6
 504:	0e 94 11 03 	call	0x622	; 0x622 <strstr>
 508:	28 2f       	mov	r18, r24
 50a:	39 2f       	mov	r19, r25
 50c:	23 2b       	or	r18, r19
 50e:	99 f0       	breq	.+38     	; 0x536 <main+0x114>
				{
					adc_result = adc_read(0);
 510:	80 e0       	ldi	r24, 0x00	; 0
 512:	0e 94 5a 00 	call	0xb4	; 0xb4 <adc_read>
					
					/* Converte o valor uint16_t para string via utoa da libC stdlib.h */
					utoa( adc_result, (char*)string_adc, 10 ); 
 516:	b4 01       	movw	r22, r8
 518:	4a e0       	ldi	r20, 0x0A	; 10
 51a:	50 e0       	ldi	r21, 0x00	; 0
 51c:	0e 94 2b 03 	call	0x656	; 0x656 <utoa>
					
				    /**
					 * Formata o retorno com a leitura do conversor AD conforme: "[AD0:XXXXX]\r\n";
					 */
					 				
					USART_StrTx( "[AN0:" );
 520:	8b e1       	ldi	r24, 0x1B	; 27
 522:	91 e0       	ldi	r25, 0x01	; 1
 524:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <USART_StrTx>
					USART_StrTx( (char*)string_adc ); 
 528:	c4 01       	movw	r24, r8
 52a:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <USART_StrTx>
					USART_StrTx( "]\r\n" ); 
 52e:	81 e2       	ldi	r24, 0x21	; 33
 530:	91 e0       	ldi	r25, 0x01	; 1
 532:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <USART_StrTx>
				}
				/**
				 * Comando: 
				 * [LCD:SENAI ANCHIETA] -> Escreve no display LCD
				 */
				if( (pot = strstr( (char*) usart_rx_buffer, "[LCD:" )) != NULL )
 536:	c5 01       	movw	r24, r10
 538:	b2 01       	movw	r22, r4
 53a:	0e 94 11 03 	call	0x622	; 0x622 <strstr>
 53e:	00 97       	sbiw	r24, 0x00	; 0
 540:	b1 f0       	breq	.+44     	; 0x56e <main+0x14c>
				{
					/* substitui o colchete da string por null */
					pot[5 + strlen(&pot[5])-1] = 0;
 542:	fc 01       	movw	r30, r24
 544:	35 96       	adiw	r30, 0x05	; 5
 546:	df 01       	movw	r26, r30
 548:	0d 90       	ld	r0, X+
 54a:	00 20       	and	r0, r0
 54c:	e9 f7       	brne	.-6      	; 0x548 <main+0x126>
 54e:	11 97       	sbiw	r26, 0x01	; 1
 550:	ae 1b       	sub	r26, r30
 552:	bf 0b       	sbc	r27, r31
 554:	a8 0f       	add	r26, r24
 556:	b9 1f       	adc	r27, r25
 558:	14 96       	adiw	r26, 0x04	; 4
 55a:	1c 92       	st	X, r1
					DisplayLCD_Out(1, 1, (char*)&pot[5] );
 55c:	81 e0       	ldi	r24, 0x01	; 1
 55e:	61 e0       	ldi	r22, 0x01	; 1
 560:	af 01       	movw	r20, r30
 562:	0e 94 b1 01 	call	0x362	; 0x362 <DisplayLCD_Out>
					USART_StrTx( "[LCD:OK]\r\n" );
 566:	8b e2       	ldi	r24, 0x2B	; 43
 568:	91 e0       	ldi	r25, 0x01	; 1
 56a:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <USART_StrTx>
				}				
				frame_status = 0; 
 56e:	10 92 5e 01 	sts	0x015E, r1
			}
		}
		EXIT_CRITICAL();
 572:	78 94       	sei
		
		
		/**
		 * Button pressionado?
		 */
    	if( !Tst_bit( PIND, BUTTON_1 ) && aux == 0 )  
 574:	f6 01       	movw	r30, r12
 576:	80 81       	ld	r24, Z
 578:	82 fd       	sbrc	r24, 2
 57a:	14 c0       	rjmp	.+40     	; 0x5a4 <main+0x182>
 57c:	ff 20       	and	r15, r15
 57e:	91 f4       	brne	.+36     	; 0x5a4 <main+0x182>
    	{
			
			USART_StrTx("Button Pressionado.\r\n");
 580:	86 e3       	ldi	r24, 0x36	; 54
 582:	91 e0       	ldi	r25, 0x01	; 1
 584:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <USART_StrTx>
			
    		/**
    		 * Inverte o estado lógico do led building;
    		 */
			Cpl_bit( PORTB, LED_BUILDING ); 
 588:	f1 01       	movw	r30, r2
 58a:	80 81       	ld	r24, Z
 58c:	8e 25       	eor	r24, r14
 58e:	80 83       	st	Z, r24
 590:	28 ee       	ldi	r18, 0xE8	; 232
 592:	33 e0       	ldi	r19, 0x03	; 3
 594:	c8 01       	movw	r24, r16
 596:	01 97       	sbiw	r24, 0x01	; 1
 598:	f1 f7       	brne	.-4      	; 0x596 <main+0x174>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 59a:	21 50       	subi	r18, 0x01	; 1
 59c:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 59e:	d1 f7       	brne	.-12     	; 0x594 <main+0x172>
 5a0:	ff 24       	eor	r15, r15
 5a2:	f3 94       	inc	r15
			aux = 1; 
		}
		/**
		 * Button solto?
		 */
		if( Tst_bit( PIND, BUTTON_1 ) && aux == 1 )
 5a4:	f6 01       	movw	r30, r12
 5a6:	80 81       	ld	r24, Z
 5a8:	82 ff       	sbrs	r24, 2
 5aa:	a5 cf       	rjmp	.-182    	; 0x4f6 <main+0xd4>
 5ac:	f1 e0       	ldi	r31, 0x01	; 1
 5ae:	ff 16       	cp	r15, r31
 5b0:	09 f0       	breq	.+2      	; 0x5b4 <main+0x192>
 5b2:	a1 cf       	rjmp	.-190    	; 0x4f6 <main+0xd4>
		{
			USART_StrTx("Button Solto.\r\n");
 5b4:	8c e4       	ldi	r24, 0x4C	; 76
 5b6:	91 e0       	ldi	r25, 0x01	; 1
 5b8:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <USART_StrTx>
 5bc:	28 ee       	ldi	r18, 0xE8	; 232
 5be:	33 e0       	ldi	r19, 0x03	; 3
 5c0:	c8 01       	movw	r24, r16
 5c2:	01 97       	sbiw	r24, 0x01	; 1
 5c4:	f1 f7       	brne	.-4      	; 0x5c2 <main+0x1a0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 5c6:	21 50       	subi	r18, 0x01	; 1
 5c8:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 5ca:	d1 f7       	brne	.-12     	; 0x5c0 <main+0x19e>
 5cc:	93 cf       	rjmp	.-218    	; 0x4f4 <main+0xd2>

000005ce <USART_Init>:
#include "usart.h"

void USART_Init()
{
	UBRR0H = (uint8_t) (MYUBRR>>8);				// Ajuste da transmissÃ£o em 9600 bps
 5ce:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (uint8_t)(MYUBRR);
 5d2:	87 e6       	ldi	r24, 0x67	; 103
 5d4:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);				// Habilita transmissÃ£o e recepÃ§Ã£o
 5d8:	88 e1       	ldi	r24, 0x18	; 24
 5da:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (3<<UCSZ00);						// Modo assincrono, 8 bits, 1 stop, sem paridade
 5de:	86 e0       	ldi	r24, 0x06	; 6
 5e0:	80 93 c2 00 	sts	0x00C2, r24
}
 5e4:	08 95       	ret

000005e6 <USART_Transmit>:
//-------------------------------------------------------------------------------------------------------
void USART_Transmit(unsigned char data)
{
 5e6:	98 2f       	mov	r25, r24
	while(!(UCSR0A & (1<<UDRE0)));				// Espera o dado ser enviado
 5e8:	e0 ec       	ldi	r30, 0xC0	; 192
 5ea:	f0 e0       	ldi	r31, 0x00	; 0
 5ec:	80 81       	ld	r24, Z
 5ee:	85 ff       	sbrs	r24, 5
 5f0:	fd cf       	rjmp	.-6      	; 0x5ec <USART_Transmit+0x6>
	UDR0 = data;								// Envia o dado pela porta serial
 5f2:	90 93 c6 00 	sts	0x00C6, r25
}
 5f6:	08 95       	ret

000005f8 <USART_StrTx>:
	return UDR0;
}

//-------------------------------------------------------------------------------------------------------
void USART_StrTx(const char* ptr)
{
 5f8:	cf 93       	push	r28
 5fa:	df 93       	push	r29
 5fc:	ec 01       	movw	r28, r24
	while(*ptr != '\0')
 5fe:	88 81       	ld	r24, Y
 600:	88 23       	and	r24, r24
 602:	31 f0       	breq	.+12     	; 0x610 <USART_StrTx+0x18>
	{
		USART_Transmit(*ptr);
 604:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <USART_Transmit>
		ptr++;
 608:	21 96       	adiw	r28, 0x01	; 1
}

//-------------------------------------------------------------------------------------------------------
void USART_StrTx(const char* ptr)
{
	while(*ptr != '\0')
 60a:	88 81       	ld	r24, Y
 60c:	88 23       	and	r24, r24
 60e:	d1 f7       	brne	.-12     	; 0x604 <USART_StrTx+0xc>
	{
		USART_Transmit(*ptr);
		ptr++;
	}
}
 610:	df 91       	pop	r29
 612:	cf 91       	pop	r28
 614:	08 95       	ret

00000616 <USART_rxIE>:
//-------------------------------------------------------------------------------------------------------
void USART_rxIE()
{
	UCSR0B |= (1 << RXCIE0 );
 616:	e1 ec       	ldi	r30, 0xC1	; 193
 618:	f0 e0       	ldi	r31, 0x00	; 0
 61a:	80 81       	ld	r24, Z
 61c:	80 68       	ori	r24, 0x80	; 128
 61e:	80 83       	st	Z, r24
}
 620:	08 95       	ret

00000622 <strstr>:
 622:	fb 01       	movw	r30, r22
 624:	51 91       	ld	r21, Z+
 626:	55 23       	and	r21, r21
 628:	a9 f0       	breq	.+42     	; 0x654 <strstr+0x32>
 62a:	bf 01       	movw	r22, r30
 62c:	dc 01       	movw	r26, r24
 62e:	4d 91       	ld	r20, X+
 630:	45 17       	cp	r20, r21
 632:	41 11       	cpse	r20, r1
 634:	e1 f7       	brne	.-8      	; 0x62e <strstr+0xc>
 636:	59 f4       	brne	.+22     	; 0x64e <strstr+0x2c>
 638:	cd 01       	movw	r24, r26
 63a:	01 90       	ld	r0, Z+
 63c:	00 20       	and	r0, r0
 63e:	49 f0       	breq	.+18     	; 0x652 <strstr+0x30>
 640:	4d 91       	ld	r20, X+
 642:	40 15       	cp	r20, r0
 644:	41 11       	cpse	r20, r1
 646:	c9 f3       	breq	.-14     	; 0x63a <strstr+0x18>
 648:	fb 01       	movw	r30, r22
 64a:	41 11       	cpse	r20, r1
 64c:	ef cf       	rjmp	.-34     	; 0x62c <strstr+0xa>
 64e:	81 e0       	ldi	r24, 0x01	; 1
 650:	90 e0       	ldi	r25, 0x00	; 0
 652:	01 97       	sbiw	r24, 0x01	; 1
 654:	08 95       	ret

00000656 <utoa>:
 656:	fb 01       	movw	r30, r22
 658:	9f 01       	movw	r18, r30
 65a:	42 30       	cpi	r20, 0x02	; 2
 65c:	74 f0       	brlt	.+28     	; 0x67a <utoa+0x24>
 65e:	45 32       	cpi	r20, 0x25	; 37
 660:	64 f4       	brge	.+24     	; 0x67a <utoa+0x24>
 662:	64 2f       	mov	r22, r20
 664:	77 27       	eor	r23, r23
 666:	0e 94 51 03 	call	0x6a2	; 0x6a2 <__udivmodhi4>
 66a:	80 5d       	subi	r24, 0xD0	; 208
 66c:	8a 33       	cpi	r24, 0x3A	; 58
 66e:	0c f0       	brlt	.+2      	; 0x672 <utoa+0x1c>
 670:	89 5d       	subi	r24, 0xD9	; 217
 672:	81 93       	st	Z+, r24
 674:	cb 01       	movw	r24, r22
 676:	00 97       	sbiw	r24, 0x00	; 0
 678:	a1 f7       	brne	.-24     	; 0x662 <utoa+0xc>
 67a:	10 82       	st	Z, r1
 67c:	c9 01       	movw	r24, r18
 67e:	0c 94 41 03 	jmp	0x682	; 0x682 <strrev>

00000682 <strrev>:
 682:	dc 01       	movw	r26, r24
 684:	fc 01       	movw	r30, r24
 686:	67 2f       	mov	r22, r23
 688:	71 91       	ld	r23, Z+
 68a:	77 23       	and	r23, r23
 68c:	e1 f7       	brne	.-8      	; 0x686 <strrev+0x4>
 68e:	32 97       	sbiw	r30, 0x02	; 2
 690:	04 c0       	rjmp	.+8      	; 0x69a <strrev+0x18>
 692:	7c 91       	ld	r23, X
 694:	6d 93       	st	X+, r22
 696:	70 83       	st	Z, r23
 698:	62 91       	ld	r22, -Z
 69a:	ae 17       	cp	r26, r30
 69c:	bf 07       	cpc	r27, r31
 69e:	c8 f3       	brcs	.-14     	; 0x692 <strrev+0x10>
 6a0:	08 95       	ret

000006a2 <__udivmodhi4>:
 6a2:	aa 1b       	sub	r26, r26
 6a4:	bb 1b       	sub	r27, r27
 6a6:	51 e1       	ldi	r21, 0x11	; 17
 6a8:	07 c0       	rjmp	.+14     	; 0x6b8 <__udivmodhi4_ep>

000006aa <__udivmodhi4_loop>:
 6aa:	aa 1f       	adc	r26, r26
 6ac:	bb 1f       	adc	r27, r27
 6ae:	a6 17       	cp	r26, r22
 6b0:	b7 07       	cpc	r27, r23
 6b2:	10 f0       	brcs	.+4      	; 0x6b8 <__udivmodhi4_ep>
 6b4:	a6 1b       	sub	r26, r22
 6b6:	b7 0b       	sbc	r27, r23

000006b8 <__udivmodhi4_ep>:
 6b8:	88 1f       	adc	r24, r24
 6ba:	99 1f       	adc	r25, r25
 6bc:	5a 95       	dec	r21
 6be:	a9 f7       	brne	.-22     	; 0x6aa <__udivmodhi4_loop>
 6c0:	80 95       	com	r24
 6c2:	90 95       	com	r25
 6c4:	bc 01       	movw	r22, r24
 6c6:	cd 01       	movw	r24, r26
 6c8:	08 95       	ret

000006ca <_exit>:
 6ca:	f8 94       	cli

000006cc <__stop_program>:
 6cc:	ff cf       	rjmp	.-2      	; 0x6cc <__stop_program>
